<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lzhello的碎碎念</title>
  
  
  <link href="https://github.com/lzhello/lzhello.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/lzhello/lzhello.github.io.git/"/>
  <updated>2021-02-18T16:21:14.060Z</updated>
  <id>https://github.com/lzhello/lzhello.github.io.git/</id>
  
  <author>
    <name>lzhello</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP连接 学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/02/18/TCP%E8%BF%9E%E6%8E%A5-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/02/18/TCP%E8%BF%9E%E6%8E%A5-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-18T12:55:01.000Z</published>
    <updated>2021-02-18T16:21:14.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计网学习"><a href="#计网学习" class="headerlink" title="计网学习"></a>计网学习</h1><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p><strong>关键词</strong><br>面向连接的可靠的传输</p><p>确认ACK（确认号是否有效，一般置为1）：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效</p><p>同步SYN（请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1）：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</p><p>终止FIN（希望断开连接）：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</p><a id="more"></a><p>三次握手</p><p>C to S : 建立连接 SYN</p><p>S to C : SYN+ACK</p><p>C to S : ACK</p><p>四次分手（目的是为了让资源不要随意释放）</p><p>C to S : FIN</p><p>S to C : FIN+ACK</p><p>S to C : FIN</p><p>C to S : ACK</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>【1】为什么连接3次握手，断开4次分手</p><p>“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”</p><p>防止了服务器端的一直等待而浪费资源</p><p>当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，<strong>很可能并不会立即关闭SOCKET</strong>，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p>在谢希仁著《计算机网络》书中同时举了一个例子，如下：</p><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，<strong>而是在某个网络结点长时间的滞留了</strong>，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。<strong>这样，server的很多资源就白白浪费掉了</strong>。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p><p>【2】为什么不能连接时2次握手</p><p>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p><p>为了保证服务端S能收接受到客户端C的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手。</p><h2 id="Socket-套接字"><a href="#Socket-套接字" class="headerlink" title="Socket 套接字"></a>Socket 套接字</h2><p>ip+port 唯一表示</p><p>ip找到主机</p><p>port（端口号）找到程序<br>65535个</p><font size =4><h4 id="一-OSI七层模型-amp-TCP-IP四层模型"><a href="#一-OSI七层模型-amp-TCP-IP四层模型" class="headerlink" title="一. OSI七层模型 &amp; TCP/IP四层模型"></a>一. OSI七层模型 &amp; TCP/IP四层模型</h4><p><img src="https://note.youdao.com/yws/res/43474/4FC3472641744C66B229F5234DAE043C" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">五层模型 【作用】</span><br><span class="line">1. 应用层 ： 应用进程间【通信数据】的处理</span><br><span class="line">2. 传输层 ： 实现【两台主机】间【数据传输】</span><br><span class="line">3. 网络层 ： 两台主机通信，会经过多段【数据链路】。网络层作用 【选择】合适的路由和交换节点</span><br><span class="line">4. 数据链路层 ： 确保【一段链路】上的数据传输</span><br><span class="line">5. 物理层 ： 实现 【两个节点间】【比特流】的【透明传输】</span><br></pre></td></tr></table></figure><hr><h4 id="二-应用层-amp-传输层-amp-网络层-常见协议-1710"><a href="#二-应用层-amp-传输层-amp-网络层-常见协议-1710" class="headerlink" title="二. 应用层 &amp; 传输层 &amp; 网络层 常见协议 1710"></a>二. 应用层 &amp; 传输层 &amp; 网络层 常见协议 1710</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">应用层：</span><br><span class="line">    DNS ： 实现 域名--&gt;IP地址 </span><br><span class="line">        (注意：多个主机可以映射成一个IP地址，一台主机 映射唯一MAC地址)</span><br><span class="line">    HTTP ： 实现 客户端 向服务端请求资源，服务端向客户端发送 资源数据(html css js)</span><br><span class="line">    FTP： 文件传输协议</span><br><span class="line">    STMP： 邮件传输协议</span><br><span class="line">    SSL： 加密套接字协议</span><br><span class="line">    </span><br><span class="line">传输层： </span><br><span class="line">    TCP： </span><br><span class="line">        1. 【区别】：面向连接、可靠的数据传输，一对一全双工</span><br><span class="line">        2. 【应用场景】：应用于【文件传输、重要状态更新】</span><br><span class="line">        3. 【基于TCP的协议】：HTTP、FTP、SMTP 协议基于TCP。 【文件传输、邮件发送，要求可靠性】</span><br><span class="line">    UDP： </span><br><span class="line">        1. 【区别】：不面向连接、不可靠的数据传输，一对多</span><br><span class="line">        2. 【应用场景】： 应用于【视频传输、实时通信】</span><br><span class="line">        3. 【基于UDP的协议】： DNS协议  (数据量小，调用频繁。建立连接开销过大)</span><br><span class="line">网络层：</span><br><span class="line">    ARP ： 实现 IP地址--&gt;Mac地址 </span><br><span class="line">    IP：【主机间通信】  经过多段数据链路，</span><br><span class="line">        IP协议 &#x3D; 【路由+交换节点】的选择</span><br><span class="line">        IP协议 &#x3D; 【无连接、不可靠】数据传输</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三-TCP-三次握手"><a href="#三-TCP-三次握手" class="headerlink" title="三.   TCP 三次握手"></a>三.   TCP 三次握手</h4><p>【==三次握手目的==】： 双方确认 自己和对方的 【<strong>发送与接受正常</strong>】</p><h5 id="！！3-1-为什么三次握手"><a href="#！！3-1-为什么三次握手" class="headerlink" title="！！3.1. 为什么三次握手"></a>！！3.1. 为什么三次握手</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ACK 确认位</span><br><span class="line">SYN 同步位</span><br><span class="line">seq 序号： 自己本次数据的开始序号</span><br><span class="line">ack 确认号 : 对方下次数据的开始序号</span><br><span class="line"></span><br><span class="line">(1) 客户端--SYN，seq&#x3D;x --&gt;服务端</span><br><span class="line">    服务端确认 客户端发送和服务端接受 正常</span><br><span class="line">(2) 服务端--ACK SYN seq&#x3D;y ack &#x3D;x+1 --&gt; 客户端</span><br><span class="line">    客户端确认  客户端发送和接受 服务端发送和接受 正常</span><br><span class="line">    【SYN&#x3D;1的原因】 ： 服务端告诉客户端 我接收到的信息确实是你发送的</span><br><span class="line">(3) 客户端--ACK seq&#x3D;x+1 ack&#x3D;y+1--&gt;服务端</span><br><span class="line">    服务端确认 客户端接受 和 服务端发送 正常</span><br><span class="line">    第三次握手 ，客户端可向 服务端传输信息</span><br><span class="line">    【ACK&#x3D;1的原因】 客户端告诉服务端 ， 我接受到的信息确实是你发送的</span><br><span class="line">三次握手 确认双方 接受和发送功能正常，缺一不可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-2-缺少第三次握手"><a href="#3-2-缺少第三次握手" class="headerlink" title="3.2 缺少第三次握手"></a>3.2 缺少第三次握手</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一次握手时，客户端 发送SYN信息滞留，超时重传。滞留信息 和   超时重传信息最终都成功发送，则存在两次连接建立，浪费资源。</span><br></pre></td></tr></table></figure><hr><h4 id="四-TCP-四次挥手-1853"><a href="#四-TCP-四次挥手-1853" class="headerlink" title="四. TCP 四次挥手 1853"></a>四. TCP 四次挥手 1853</h4><p><img src="https://note.youdao.com/yws/res/43485/7FB35C1EE4CB4D12A8A36EB73BA666A6" alt="image"></p><h5 id="！！4-1-四次挥手过程"><a href="#！！4-1-四次挥手过程" class="headerlink" title="！！4.1 四次挥手过程"></a>！！4.1 四次挥手过程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一次挥手 ： 客户端--&gt;服务端发送断开请求。请求 &#x3D; &#123;FIN&#x3D;1,seq&#x3D;x&#125;</span><br><span class="line">第二次挥手 ： 服务端--&gt;客户端发送响应。响应 &#x3D; &#123;ACK&#x3D;1,seq&#x3D;y,ack&#x3D;x+1&#125;</span><br><span class="line"></span><br><span class="line">期间存在 服务端--&gt;客户端 发送数据</span><br><span class="line"></span><br><span class="line">第三次挥手 ： 服务端---&gt;客户端发送断开请求。 请求 &#x3D; &#123;FIN&#x3D;1，seq&#x3D;z&#125;</span><br><span class="line">第四次挥手 ： 客户端---&gt;服务端发送响应 。 响应 &#x3D; &#123;ACK&#x3D;1,ack&#x3D;z+1,&#125;</span><br><span class="line"></span><br><span class="line">至此 连接关闭</span><br></pre></td></tr></table></figure><h5 id="！！4-2-第四次挥手后-【客户端-time-wait】，等待2MSL-1933"><a href="#！！4-2-第四次挥手后-【客户端-time-wait】，等待2MSL-1933" class="headerlink" title="！！4.2 第四次挥手后 【客户端= time wait】，等待2MSL 1933"></a>！！4.2 第四次挥手后 【客户端= time wait】，等待2MSL 1933</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第四次挥手的【报文段】丢失，则服务端【超时重传】第三次挥手【报文段】。</span><br><span class="line">若 客户端未等待2MSL直接关闭，则无法接受重传【报文段】，关闭失败。</span><br></pre></td></tr></table></figure><h5 id="4-3-CLOSE-WAIT-TIME-WAIT"><a href="#4-3-CLOSE-WAIT-TIME-WAIT" class="headerlink" title="4.3 CLOSE-WAIT TIME-WAIT"></a>4.3 CLOSE-WAIT TIME-WAIT</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. CLOSED-WAIT ：   服务端 【被动接受】断开连接请求</span><br><span class="line">2. TIME-WAIT : 发送完最后一次ACK报文段后，进入TIME-WAIT，等待2MSL.防止最后ACK报文段丢失。</span><br></pre></td></tr></table></figure><h5 id="4-4-TIME-WAIT状态过多"><a href="#4-4-TIME-WAIT状态过多" class="headerlink" title="4.4 TIME-WAIT状态过多"></a>4.4 <a href="https://www.cnblogs.com/dadonggg/p/8778318.html">TIME-WAIT状态过多</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TIME-WAIT状态占用端口。</span><br><span class="line">短链接 &#x3D; &#123;处理业务+传输数据&#125; &lt; TIME-wait的时间 的连接</span><br><span class="line"></span><br><span class="line">【高并发短连接】服务器【主动】申请关闭连接，造成TIME-WAIT过多。</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr><h4 id="五-TCP可靠性"><a href="#五-TCP可靠性" class="headerlink" title="五.TCP可靠性"></a>五.TCP可靠性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 校验和： 确保端到端数据可靠传输，TCP首部含有校验和字段，</span><br><span class="line">2. 【ARQ】自动重传请求 :  存在 【等待停止】 和 【GO_BACK_N】 两种ARQ </span><br><span class="line">3. 【流量控制】：  </span><br><span class="line">        (1) 【目的】：  防止【接收端】的接受能力不足</span><br><span class="line">        (2) 接收端返回【确认报文】中含【接收窗口】大小</span><br><span class="line">4. 【拥塞控制】:</span><br><span class="line">        (1) 【目的】：  防止【全局网络 】如【路由器||链路】过载</span><br><span class="line">        (2) 【网络】拥塞情况决定的【拥塞窗口】大小。</span><br><span class="line">        (3) TCP拥塞控制采用四种算法, </span><br><span class="line">        </span><br><span class="line">            1) 慢开始： 拥塞窗口大小cwbd &lt; 慢开始阈值， 每经过一轮传播，cwnd加倍</span><br><span class="line">            </span><br><span class="line">            2)拥塞避免、 ： 拥塞窗口大小cwbd &gt; 慢开始阈值, 每经过一轮传播 拥塞窗口+1</span><br><span class="line">            </span><br><span class="line">            3)快重传 : </span><br><span class="line">                当【接收端】接收到【顺序错误】的报文段后，向【发送端】发送【重复】ACK报文。</span><br><span class="line">                此时 发送端是根据【接收重复ACK报文】判断传输失败，而不是根据【超时】判断发送失败。避免【超时等待】时，发送端空等。</span><br><span class="line">            4)快恢复</span><br><span class="line">                【慢开始阈值】 &#x3D; 【初始拥塞窗口】 &#x3D; 【旧拥塞窗口的一半】</span><br><span class="line">【发送窗口】 &#x3D; Math.min(接收窗口、拥塞窗口);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="六-输入URL显示主页-1149-1249"><a href="#六-输入URL显示主页-1149-1249" class="headerlink" title="六. 输入URL显示主页 1149 - 1249"></a>六. 输入URL显示主页 1149 - 1249</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1. DNS 解析域名</span><br><span class="line">2. 建立TCP连接 ： 三次握手</span><br><span class="line">3. 创建http请求报文，并通过【SSL加密】。最后发送http请求</span><br><span class="line">    请求报文 &#x3D; &#123;</span><br><span class="line">        1.  请求行 &#x3D; &#123;请求方法 + URL + http版本&#125; </span><br><span class="line">        2. 请求首部 &#x3D; &#123;</span><br><span class="line">                        Connnection &#x3D; keep-alive ，</span><br><span class="line">                        Accept &#x3D; 客户端接收的数据类型，</span><br><span class="line">                        content -length &#x3D; 内容长度</span><br><span class="line">                    &#125;</span><br><span class="line">        3. 请求实体 &#x3D; &#123; 如 【请求方法&#x3D;post||put】，则请求实体存储传输的数据&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    请求经过【负载均衡+重定向】</span><br><span class="line">    </span><br><span class="line">4. 服务端接收解析http请求，并返回http响应。</span><br><span class="line">    响应报文 &#x3D; &#123;</span><br><span class="line">            1. 响应行 &#x3D; &#123; 协议版本 + 状态码 &#125;</span><br><span class="line">            2. 响应首部 &#x3D; &#123;</span><br><span class="line">                    content-legnth</span><br><span class="line">                    content-type &#x3D; html</span><br><span class="line">                &#125;    </span><br><span class="line">            3. 响应实体 &#x3D; &#123; 请求所需的资源 如 html css js&#125;</span><br><span class="line">    &#125;</span><br><span class="line">5. 浏览器解析http响应，并渲染页面</span><br><span class="line"></span><br><span class="line">6. 断开TCP连接 ： 四次挥手</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="七-HTTPS-1500"><a href="#七-HTTPS-1500" class="headerlink" title="七. HTTPS  1500"></a>七. HTTPS  1500</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">(1)    【对称加密】： 密钥只有一个，加密解密使用同个密码。【速度快】</span><br><span class="line">            【优点】： 速度快</span><br><span class="line">            【缺点】 ： 无法确保【消息来源】，存在自己发自己的情况</span><br><span class="line">            </span><br><span class="line">(2)    【非对称加密】： 密钥分 公钥、私钥(本人保管)。</span><br><span class="line">            (公钥加密内容 使用私钥解密，私钥加密内容，使用公钥解密)。</span><br><span class="line">            【举例】： A 发送邮件给B ， 若邮件使用A的私钥加密，则确保(确保邮件来源)。 若邮件使用B的公钥加密，则确保邮件去处。</span><br><span class="line">            【优点】： 确保【消息来源】 || 【消息去处】 【二者按需取一】</span><br><span class="line">            【缺点】： 速度慢</span><br><span class="line">(3)     【数字签名】：</span><br><span class="line">            数字签名 &#x3D; 对消息的hash值使用私钥加密。</span><br><span class="line">            数字签名添加在消息尾部</span><br><span class="line">            【优点】：确保 【消息来源】 和 【消息未被修改】。</span><br><span class="line">            【缺点】：C修改B电脑中的A公钥，C冒充A发送数据给B，B无法察觉。</span><br><span class="line">(4)     【数字证书】：</span><br><span class="line">            数字证书 &#x3D; 将A的公钥交由第三方CA(Certificate Authority)的私钥加密</span><br><span class="line">            数字证书 添加在 消息尾部。避免B电脑中A公钥被替换。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(1) HTTP 默认端口 &#x3D; 80 </span><br><span class="line">    HTTP协议 运行在TCP之上，http报文是明文。</span><br><span class="line">    【http安全缺陷】 &#x3D; &#123;</span><br><span class="line">            (1) 无法验证服务器身份</span><br><span class="line">            (2) 无法确保数据完整性</span><br><span class="line">            (3) 无法确保数据未被窃听</span><br><span class="line">        &#125;</span><br><span class="line">(2) HTTPS 默认端口 &#x3D; 443</span><br><span class="line">    HTTPS &#x3D; HTTP报文 + SSL协议(加密http报文)</span><br><span class="line">    【http报文】 采用【对称加密】，【对称加密的密钥】采用【服务端数字证书】进行【非对称加密】</span><br><span class="line">    接收方</span><br><span class="line">     </span><br><span class="line">     非对称加密 采用 幂模运算，在解密过程中私钥很大，导致幂运算很慢</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="https-加密过程"><a href="#https-加密过程" class="headerlink" title="https 加密过程"></a><a href="https://www.cnblogs.com/wqhwe/p/5407468.html">https 加密过程</a></h5><p><img src="https://note.youdao.com/yws/res/43486/7DCFCE57D4E84BD9894900F9054CFE58" alt="image"></p><h4 id="八-HTTP-长短连接-1718"><a href="#八-HTTP-长短连接-1718" class="headerlink" title="八. HTTP 长短连接 1718"></a>八. HTTP 长短连接 1718</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Http短链接 ： 每次客户端发送请求都会重新建立连接。</span><br><span class="line">Http长连接 ： 服务器响应报文中，其响应首部 connection&#x3D;keep-alive，表明该链接是长连接，一段时间内不断开。客户端再次发送请求时通过该链接。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="！！九-Cookie-和-Session的区别"><a href="#！！九-Cookie-和-Session的区别" class="headerlink" title="！！九. Cookie 和 Session的区别"></a>！！九. Cookie 和 Session的区别</h4><p>HTTP协议是无状态协议。不保存【用户状态】。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(1) Session作用：实现【服务端】存储【用户状态】</span><br><span class="line">         每个用户绑定一个SessionID，请求中url或者cookie拿到sessionid</span><br><span class="line">         Session存储在服务器||数据库中，超过一段时间会销毁。</span><br><span class="line">         常用于 购物车场景。明确购物操作是哪一个用户进行的。</span><br><span class="line">     </span><br><span class="line"> Cookie作用 ：实现【客户端】存储【用户状态】</span><br><span class="line">         有4KB的大小限制</span><br><span class="line">         当请求发送给同个domain中服务器，则都会携带cookie</span><br><span class="line">         可以禁用cookie</span><br><span class="line">         常用于下次访问网站时自动登录</span><br></pre></td></tr></table></figure><h4 id="十-URI-和URL"><a href="#十-URI-和URL" class="headerlink" title="十. URI 和URL"></a>十. URI 和URL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URI : 统一资源标识符，唯一标识一个资源</span><br><span class="line">URL : 统一资源定位器，定位资源所在位置</span><br></pre></td></tr></table></figure><h4 id="！十一-HTTP1-0-和-HTTP1-1"><a href="#！十一-HTTP1-0-和-HTTP1-1" class="headerlink" title="！十一. HTTP1.0 和 HTTP1.1"></a>！十一. HTTP1.0 和 HTTP1.1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. HTTP1.0 默认使用短链接 ， HTTP1.1默认使用长连接</span><br><span class="line"></span><br><span class="line">2. http1.0 存在【带宽浪费】：</span><br><span class="line">    例如    </span><br><span class="line">    客户端仅需要某资源对象的一部分，</span><br><span class="line">    但在http1.0中只能请求整个资源。</span><br><span class="line">    http1.1中【允许请求资源的某个部分】，响应码206。</span><br><span class="line">3. 【错误状态响应码不同】：</span><br><span class="line">    http1.1中增加【错误状态】响应码，</span><br><span class="line">    如 409(confilct)请求资源和资源当前状态冲突 410(GONE) 请求资源永久删除 </span><br><span class="line"></span><br><span class="line">4. 【缓存处理】</span><br><span class="line">    http1.1 在报文首部中 引入If-unModitfied-Since If-match等缓存头</span><br><span class="line"></span><br><span class="line">5. 【host头】：</span><br><span class="line">http1.0认为一台主机匹配一个IP地址，因此 request中的URL不带有hostname</span><br><span class="line">虚拟机技术发展， 一台物理主机可以创建多台虚拟主机，</span><br><span class="line">http1.1通过hostname指定虚拟机，http1.1不指定hostname，则会报错400 请求错误</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HTTP1-1-和-http-2-0-区别"><a href="#HTTP1-1-和-http-2-0-区别" class="headerlink" title="HTTP1.1 和 http 2.0 区别"></a>HTTP1.1 和 http 2.0 区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 1. HTTP&#x2F;2采用二进制格式(传统二进制格式 健壮性考虑因素很多)</span><br><span class="line"> </span><br><span class="line"> 2. 多路复用 (共享连接) ： </span><br><span class="line"> HTTP1.X采用keep alive来解决复用TCP的问题，但是仍存在请求阻塞问题</span><br><span class="line"> HTTP1.x需要每条请求顺序发送,服务端才能判断接收到的数据属于哪条请求</span><br><span class="line"> HTTP&#x2F;2 每个请求以stream的方式传输，每个stream有唯一标识  </span><br><span class="line"> </span><br><span class="line"> 3. header ： </span><br><span class="line"> 通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小</span><br><span class="line"> </span><br><span class="line">HAPCK</span><br><span class="line"> </span><br><span class="line"> 4. 服务器推送：</span><br><span class="line"> 浏览器只请求了index.html，但是服务器把index.html、style.css、example.png全部发送给浏览器</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><hr><h4 id="十二-get和post的区别"><a href="#十二-get和post的区别" class="headerlink" title="十二. get和post的区别"></a>十二. get和post的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 【参数传递】</span><br><span class="line">GET参数通过URL传递</span><br><span class="line">POST数据通过 http请求的请求实体传递</span><br><span class="line">2. 【刷新】</span><br><span class="line">    GET方法用于获取资源，不改变资源的状态，所以是幂等的</span><br><span class="line">    POST方法用于创建资源，不幂等</span><br><span class="line">    两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI</span><br><span class="line">3. 【缓存问题】</span><br><span class="line">    GET在浏览器中缓存，post不缓存</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="十三-状态码"><a href="#十三-状态码" class="headerlink" title="十三. 状态码"></a>十三. 状态码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1XX请求成功，正在处理</span><br><span class="line">2XX请求成功，已经处理</span><br><span class="line">    200 - 请求成功</span><br><span class="line">    206 - 请求部分成功</span><br><span class="line">3XX 重定向</span><br><span class="line">301永久重定向</span><br><span class="line">302临时重定向</span><br><span class="line"></span><br><span class="line">4XX</span><br><span class="line">400 请求语法错误</span><br><span class="line">403 服务被拒绝</span><br><span class="line">404页面不存在</span><br><span class="line"></span><br><span class="line">5XX</span><br><span class="line">500服务器内部错误（报错了）</span><br><span class="line">502 服务不可用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十四-正向代理和-反向代理"><a href="#十四-正向代理和-反向代理" class="headerlink" title="十四. 正向代理和 反向代理"></a>十四. 正向代理和 反向代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">正向代理隐藏真实客户端，</span><br><span class="line">    1. 做【缓存】，加速访问资源</span><br><span class="line">    2. 对客户端【授权】</span><br><span class="line">    3. 客户端访问记录</span><br><span class="line">    </span><br><span class="line">反向代理隐藏真实服务端， </span><br><span class="line">    1. 实现负载均衡</span><br><span class="line">    2. 避免网络攻击</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/res/43525/21FC53398F45409BBE6268EC9FE6C619" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计网学习&quot;&gt;&lt;a href=&quot;#计网学习&quot; class=&quot;headerlink&quot; title=&quot;计网学习&quot;&gt;&lt;/a&gt;计网学习&lt;/h1&gt;&lt;h2 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;&lt;br&gt;面向连接的可靠的传输&lt;/p&gt;
&lt;p&gt;确认ACK（确认号是否有效，一般置为1）：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效&lt;/p&gt;
&lt;p&gt;同步SYN（请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1）：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。&lt;/p&gt;
&lt;p&gt;终止FIN（希望断开连接）：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>并发learning</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/02/18/%E5%B9%B6%E5%8F%91learning-1/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/02/18/%E5%B9%B6%E5%8F%91learning-1/</id>
    <published>2021-02-18T12:00:03.000Z</published>
    <updated>2021-02-20T14:15:14.513Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-进程process和线程thread的关系"><a href="#一-进程process和线程thread的关系" class="headerlink" title="一. 进程process和线程thread的关系"></a>一. 进程process和线程thread的关系</h4><h5 id="两者的定义"><a href="#两者的定义" class="headerlink" title="两者的定义"></a><strong>两者的定义</strong></h5><p>进程(process)是程序运行的基本单位。一个进程可以有多个线程。进程是及程序的一次执行过程，是正在运行的程序的抽象，代表了运行的CPU。系统资源（内存，文件等）都已进程为单位分配。操作系统为每个进程都分配了独立的地址空间，同时通过“调度”把控制权交给了进程。</p><p>但是进程存在问题：</p><ol><li>进程切换的代价和开销大</li><li>在一个进程内需要并行执行多个程序与实现不同功能</li><li>有时性能低</li></ol><p>线程(thread)是进程划分成更小的运行单位。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。多个线程【共享】进程的【堆和方法】区资源，但每个线程【独占】一个【程序计数器、虚拟机栈、本地方法栈】。</p><h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a><strong>区别：</strong></h5><ol><li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多</li></ol><a id="more"></a><hr><h4 id="二-如何避免死锁"><a href="#二-如何避免死锁" class="headerlink" title="二. 如何避免死锁"></a>二. 如何避免死锁</h4><h5 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a><strong>什么是死锁？</strong></h5><p>两个或两个以上的线程在执行过程中，由于竞争资源而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。简化一点说就是：<u>一组相互竞争资源的线程因为互相等待，导致“永久”阻塞的现象。</u></p><h5 id="死锁的【四个必要条件】"><a href="#死锁的【四个必要条件】" class="headerlink" title="死锁的【四个必要条件】"></a><strong>死锁的【四个必要条件】</strong></h5><ul><li>互斥，共享资源 X 和 Y 只能被一个线程占用；</li><li>占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</li><li>不可抢占，其他线程不能强行抢占线程 T1 占有的资源；</li><li>循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等待。</li></ul><p> <strong>避免【线程死锁】</strong><br>       1. 加锁顺序<br>       2. 加锁时限<br>       3. 死锁检测</p><p><strong>例子</strong>：</p><hr><h4 id="三-一些基础问题"><a href="#三-一些基础问题" class="headerlink" title="三. 一些基础问题"></a>三. 一些基础问题</h4><h5 id="3-1-sleep-和-wait的区别"><a href="#3-1-sleep-和-wait的区别" class="headerlink" title="3.1 sleep 和 wait的区别"></a>3.1 sleep 和 wait的区别</h5><ol><li>【是否释放锁】：sleep 没有释放锁，wait释放锁。<br> 因此 wait多用线程交互，sleep只是暂停线程执行</li><li>【是否自动苏醒】：<br> 线程调用sleep()后，会自动苏醒。<br> 线程调用wait() ，若wait()无参，需要等待其他线程调 【同一对象】的notify() notifyAll()唤醒.若wait()方法有timeout参数,则会超时后苏醒。    </li></ol><h5 id="3-2-为什么调用start执行run-，而不是直接调用run"><a href="#3-2-为什么调用start执行run-，而不是直接调用run" class="headerlink" title="3.2 为什么调用start执行run()，而不是直接调用run()"></a>3.2 为什么调用start执行run()，而不是直接调用run()</h5><p>直接调用run()方法： 只是在main()线程中将run方法作为普通方法调用，还是在main线程中执行。这并不是多线程<br>调用start()方法 ： 启动一个线程 &amp; 使该线程进入就绪状态，当该线程分配到时间片后开始运行。</p><hr><h4 id="四-Synchronized-相关问题"><a href="#四-Synchronized-相关问题" class="headerlink" title="四. Synchronized 相关问题"></a>四. Synchronized 相关问题</h4><h5 id="4-1-sychronized-使用方式"><a href="#4-1-sychronized-使用方式" class="headerlink" title="4.1 sychronized 使用方式"></a>4.1 sychronized 使用方式</h5><p>Synchronized 修饰对象 = {1. 代码块  2. 方法}</p><ol><li>Synchronized 修饰 静态方法 ||  Sychronized(Class)修饰代码块 = {<br> Class 类上锁<br>}</li><li>Synchronized 修饰 实例方法 {<br> 该类的某个对象实例上锁<br>}</li></ol><h5 id="4-2-单例模式-【双重校验锁】-实现对象单例"><a href="#4-2-单例模式-【双重校验锁】-实现对象单例" class="headerlink" title="4.2 单例模式 =  【双重校验锁】 实现对象单例"></a>4.2 单例模式 =  【双重校验锁】 实现对象单例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Class Singleton&#123;</span><br><span class="line">    <span class="comment">// 为什么 volatile修饰</span></span><br><span class="line">    ---</span><br><span class="line">    </span><br><span class="line">    JVM指令重排 ，为对象分配内存空间，并且uniqueInstance指向该内存地址，但是对象并未初始化</span><br><span class="line">    线程T2调用get方法，在外层校验中发现uniqueInstance！=<span class="keyword">null</span>,则直接返回。【但此时uniqueInstance未被初始化】</span><br><span class="line">    </span><br><span class="line">    ---</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance ;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 私有构造器     </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance==<span class="keyword">null</span>)&#123; <span class="comment">// 检测单例是否已经创建</span></span><br><span class="line">            Synchronized(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(uniqueInstance==<span class="keyword">null</span>)&#123; <span class="comment">// 检测其他线程是否先获取锁创建了单例对象</span></span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-JDK1-6后-Synchronized的底层优化-1041"><a href="#4-3-JDK1-6后-Synchronized的底层优化-1041" class="headerlink" title="4.3 JDK1.6后 Synchronized的底层优化 1041"></a>4.3 JDK1.6后 Synchronized的底层优化 1041</h5><p>​    四种锁状态 ： 无锁 –&gt; 偏向锁 –&gt; 轻量级锁 —&gt;重量级锁<br>​    锁随着【竞争程度】上升，逐渐升级。但不可降级。</p><pre><code>1. 【初次执行Synchronized代码块】，锁对象变为【偏向锁】    (通过CAS操作修改对象头中【锁标志位】和【持锁线程ID】)。    (偏向锁意为偏向于第一个获取它的线程)。执行完同步块后，线程不主动释放偏向锁。    当执行下一个同步块时，检测该当前想要获取锁的线程是否就是持有锁的线程。    如果是，则正常执行。【线程没有释放锁，因此也不用重新加锁】   2. 【一旦出现锁竞争】，偏向锁升级为【轻量级锁】。    如果锁标志位=释放，则线程通过【CAS操作】修改锁标志位，并获取锁。    如果锁标志位=锁定，则线程通过【自旋】等待锁的释放。    自旋：一个线程获取锁，其他线程通过忙循环等待线程释放锁。    轻量级锁本质 = 【忙等开销 换取 用户态切换到核心态的开销】   3. 【忙等是有限度】，当某个线程自旋次数达到最大自选次数。    该线程通过CAS操作修改对象头的锁标志位，表明轻量级锁升级为【重量级锁】    一个线程持有锁时，其他请求线程只能阻塞等待。</code></pre><h5 id="4-4-synchronized-底层"><a href="#4-4-synchronized-底层" class="headerlink" title="4.4 synchronized 底层"></a>4.4 synchronized 底层</h5><p>Sychronized 修饰 代码块 || 方法<br>    1.修饰代码块时<br>        通过 【monitorenter 和 monitorExit 两条指令】，分别指定同步代码块的 开始位置和结束位置。<br>        线程获取锁 = 获取位于对象头的monitor的持有权<br>        获取到锁，则计数器++。 执行到monitorExit，则计数器–</p><pre><code>2.修饰方法     JVM通过 ACC_SYNCHRONIZED 辨别方法为同步方法 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【面试口头】</span><br><span class="line">    Sychronized 是【JVM】层面的关键字。它是通过 【字节码指令】实现的。</span><br><span class="line">       (1) Sychronized 修饰 【代码块】时，montior-enter monitor-exit两个字节码指令表明 同步块的开始和结束位置。</span><br><span class="line">       (2) Sychronized 修饰 【方法】时，JVM中通过ACC_SYCHRONIZED 标志同步方法 </span><br></pre></td></tr></table></figure><h5 id="4-5-ReentrantLock-和-Sychronized-区别"><a href="#4-5-ReentrantLock-和-Sychronized-区别" class="headerlink" title="4.5  ReentrantLock 和 Sychronized 区别"></a>4.5  ReentrantLock 和 Sychronized 区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.  两者都是【可重入锁】 : </span><br><span class="line">    获得某一对象锁时，若自己未释放，也可重复再次获得该对象的锁 。 锁计数器++ </span><br><span class="line">    </span><br><span class="line">2. Sychronized 依赖JVM实现，而ReentrantLock 依赖API实现(JDK层面)</span><br><span class="line">    ReentrantLock 调用 lock() unlock() try&#x2F;finally语句 实现同步块，可以直接查看源代码</span><br><span class="line">    Sychronized 在JVM层面，通过字节码指令 monitorEnter monitorExit指定同步块的开始和结束位置 </span><br><span class="line">    </span><br><span class="line">3. ReentrantLock 实现高级功能</span><br><span class="line">    (1) ReentrantLock实现等待可中断 ： </span><br><span class="line">        通过调用 lockInterruptibly() 中断等待锁的线程</span><br><span class="line">    (2) ReentrantLock可实现公平锁，而Sychronized仅实现非公平锁：</span><br><span class="line">        公平锁 &#x3D; 先等待的线程，先获得锁</span><br><span class="line">    (3) 等待&#x2F;通知机制 不同：</span><br><span class="line">        Sychronized 通过 notiy() notifyAll() wait() 实现等待&#x2F;通知机制</span><br><span class="line">        ReentrantLock 通过 Condition对象实现。</span><br><span class="line">            一个lock可创建多个Condition对象，一个Condition对象可注册多个线程。</span><br><span class="line">            Condition 对象调用signal ||signalAll() </span><br><span class="line">                唤醒线程所在范围 &#x3D;  注册的线程，</span><br><span class="line">            而Sychronized 调用 notify() || notifyAll() </span><br><span class="line">                唤醒线程 &#x3D; JVM选择的</span><br><span class="line">            因此 ReentrantLock的等待通知机制更加灵活</span><br><span class="line">    </span><br><span class="line">        </span><br></pre></td></tr></table></figure><hr><h4 id="五-volatile"><a href="#五-volatile" class="headerlink" title="五. volatile"></a>五. volatile</h4><h5 id="5-1-volatile-作用"><a href="#5-1-volatile-作用" class="headerlink" title="5.1 volatile 作用"></a>5.1 volatile 作用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 防止指令重排</span><br><span class="line">2. 保证变量的可见性</span><br><span class="line">    当前Java内存模型，不是从主存读取变量，而是将变量保存在本地内存(寄存器)。</span><br><span class="line">    可能存在 一个线程修改【主存】中的变量值，而另一个线程仍使用【本地内存】中的变量拷贝值，</span><br><span class="line">    造成【数据】不一致。</span><br><span class="line">    变量声明为volatile，即告知JVM该变量不稳定。每次要在主存中读取值。</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="5-2-Synchronized-和-volatile-的区别"><a href="#5-2-Synchronized-和-volatile-的区别" class="headerlink" title="5.2 Synchronized 和 volatile 的区别"></a>5.2 Synchronized 和 volatile 的区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 【是否阻塞】</span><br><span class="line">    volatile 不会造成阻塞，Synchronized会造成阻塞</span><br><span class="line">2. 【作用范围不同】</span><br><span class="line">    volatile 只能修饰变量， Synchronized 修饰 代码块和 方法 </span><br><span class="line">3. 【作用不同】</span><br><span class="line">    volatile 主要用于保证变量在多个线程之间的可见性，而Synchronized则是保证临界资源在多个线程之间的同步性</span><br><span class="line">    volatile 仅保证变量的可见性，而不保证原子性。Synchronized两者都能保证</span><br><span class="line">4. 【效率】</span><br><span class="line">    volatile 是 线程同步的轻量级实现，效率高于Sychronized</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="五-ThreadLocal"><a href="#五-ThreadLocal" class="headerlink" title="五. ThreadLocal"></a>五. ThreadLocal</h4><p>作用 ： 和每个线程绑定专属的本地变量</p><h5 id="！5-1-ThreadLocal-底层原理"><a href="#！5-1-ThreadLocal-底层原理" class="headerlink" title="！5.1 ThreadLocal 底层原理"></a>！5.1 ThreadLocal 底层原理</h5><p>每个Thread对象中具备threadLocalMap ，而threadLocalMap中存储 key=threadLocal的键值对。<br>ThreadLocal.get() threadLocal.set();</p><h5 id="5-2-软引用-amp-弱引用"><a href="#5-2-软引用-amp-弱引用" class="headerlink" title="5.2 软引用 &amp; 弱引用"></a>5.2 软引用 &amp; 弱引用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">虚引用-&gt; 弱引用 -&gt; 软引用 -&gt; 强引用</span><br><span class="line">弱引用被GC线程发现后，不论内存空间是否不足，都立刻回收</span><br><span class="line">软引用被GC线程发现后，如果内存空间不足，则回收</span><br></pre></td></tr></table></figure><hr><h4 id="！！六-线程池-1057"><a href="#！！六-线程池-1057" class="headerlink" title="！！六. 线程池 1057"></a>！！六. 线程池 1057</h4><p>作用 ： 减少 创建和销毁线程的开销，任务无需等待线程创建可立即执行。</p><h5 id="6-1-callable-和-runnable-的区别"><a href="#6-1-callable-和-runnable-的区别" class="headerlink" title="6.1 callable 和 runnable 的区别"></a>6.1 callable 和 runnable 的区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callable 可返回值||抛出异常，runnable不行</span><br></pre></td></tr></table></figure><h5 id="6-2-submit-和-execute-区别"><a href="#6-2-submit-和-execute-区别" class="headerlink" title="6.2 submit 和 execute 区别"></a>6.2 submit 和 execute 区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execute提交【无返回值】的任务，无法根据返回值判断任务是否成功执行</span><br><span class="line">submit提交【有返回值】的任务，根据返回值判断任务是否成功执行</span><br></pre></td></tr></table></figure><h5 id="6-3-【如何】创建线程池-1344"><a href="#6-3-【如何】创建线程池-1344" class="headerlink" title="6.3  【如何】创建线程池 1344"></a>6.3  【如何】创建线程池 1344</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">方法1 ： 通过构造器 </span><br><span class="line">ThreadPoolExecutor();</span><br><span class="line">！！ 【构造器参数】</span><br><span class="line"></span><br><span class="line">    1. int corePoolSize：</span><br><span class="line">        任务数 &lt; 核心池大小 ，</span><br><span class="line">        则将任务交给空闲线程 || 创建新线程 处理  </span><br><span class="line">    2. int maximunPoolSize：</span><br><span class="line">        等待队列已满 &amp; 核心池大小&lt;任务数&lt; 最大线程数量，</span><br><span class="line">        则创建临时线程</span><br><span class="line">    3. long keepAliveTime,TimeUtil：</span><br><span class="line">        线程空闲时间 &gt; 指定时间后，则线程销毁</span><br><span class="line">    4. BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">        任务数&gt;核心池大小 &amp; 请求队列未满 ，</span><br><span class="line">        则任务加入请求队列</span><br><span class="line">        </span><br><span class="line">    5. ThreadFactory</span><br><span class="line">        负责创建线程</span><br><span class="line">    6. handler 制定拒绝策略</span><br><span class="line">方法2： 通过【工具类Executors】 创建线程池。 线程池类型如下 </span><br><span class="line">    1. FixedThreadPool ： 线程数量固定</span><br><span class="line">    2. SingleThreadExecutor : 线程数量&#x3D;1 ，多余任务提交给线程池则进入等待队列</span><br><span class="line">        如果创建这两类线程池，则其 请求队列长度&#x3D;Integer.MAX_VALUE;</span><br><span class="line">        可能堆积大量请求而导致OOM</span><br><span class="line">        </span><br><span class="line">    3. CachedThreadPool ： 线程数量不固定，优先复用空闲线程</span><br><span class="line">        该类线程池，允许创建的线程数量&#x3D;Integer.MAX_VALUE,</span><br><span class="line">        可能创建过多线程，导致OOM</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="6-4-线程池拒绝策略"><a href="#6-4-线程池拒绝策略" class="headerlink" title="6.4 线程池拒绝策略"></a>6.4 线程池拒绝策略</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. abort : 默认使用的拒绝策略， 拒绝执行任务，抛出异常</span><br><span class="line">2. CallerRunPolicy ： 调用 当前线程池所在线程执行任务</span><br><span class="line">3. discard ： 直接抛弃任务，不做任何处理</span><br><span class="line">4. discardOldest ： 抛弃 请求队列中最早的任务</span><br></pre></td></tr></table></figure><h5 id="6-5-Executor创建线程池的【弊端】"><a href="#6-5-Executor创建线程池的【弊端】" class="headerlink" title="6.5 Executor创建线程池的【弊端】"></a>6.5 Executor创建线程池的【弊端】</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FixedThreadPool 、SingleThreadExecutor 中等待队列长度设置为Integer.MAX_VALUE</span><br><span class="line"></span><br><span class="line">CachedThreadPool 和 ScheduledThreadPool 允许最大线程数设置为 Integer.MAX_VALUE</span><br><span class="line"></span><br><span class="line">这两者都可能造成 OOM的问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="七-AQS-1430"><a href="#七-AQS-1430" class="headerlink" title="七. AQS 1430"></a>七. AQS 1430</h4><p><img src="https://note.youdao.com/yws/res/43414/400F2FB130F9470BAD70079722D25F33" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">一. AQS 是构建同步器的【框架】 </span><br><span class="line">        【核心思想】 ： 线程请求资源 </span><br><span class="line">        情况1 ： 资源空闲</span><br><span class="line">            则 请求线程设置为工作线程，资源上锁</span><br><span class="line">        情况2 ： 资源被占用</span><br><span class="line">            则 请求线程阻塞，加入CLH队列。等待资源空闲时竞争资源</span><br><span class="line">    </span><br><span class="line">二. AQS 定义两种 资源共享模式</span><br><span class="line">    1. 独占锁 Exclusive  ： 锁只能被一个线程占有</span><br><span class="line">        例如 ： ReentrantLock 又分为 公平锁和非公平锁</span><br><span class="line">        </span><br><span class="line">    2. 共享锁 shared    ： 多个线程共享锁</span><br><span class="line">        例如 ： CountDownLatch 、Semaphore</span><br><span class="line">        </span><br><span class="line">三. AQS框架 自定义模块</span><br><span class="line">    尝试 获取&#x2F;释放 独占资源</span><br><span class="line">    tryAcquire()</span><br><span class="line">    tryRelease()</span><br><span class="line">    尝试 获取&#x2F;释放共享资源</span><br><span class="line">    tryAcquireShared()</span><br><span class="line">    tryReleaseShared()</span><br><span class="line"></span><br><span class="line">四. AQS 常见组件 </span><br><span class="line">    1. ReentrantLock </span><br><span class="line">        A 线程调用 lock()方法</span><br><span class="line">        若 state&#x3D;0 ，</span><br><span class="line">            则资源空闲 ，state++，且 A线程可重复获取锁 </span><br><span class="line">            </span><br><span class="line">        若 state！&#x3D;0 ， </span><br><span class="line">            则资源被占有，当state&#x3D;0时其他线程才能竞争</span><br><span class="line">    </span><br><span class="line">    2. CountDownLatch </span><br><span class="line">        (1) 构造器初始化 【state &#x3D; N】</span><br><span class="line">            </span><br><span class="line">            当【子线程】调用countDown(),通过 CAS操作state自减1</span><br><span class="line">            </span><br><span class="line">            当state&#x3D;0 时，调用await的线程 恢复正常继续执行</span><br><span class="line">    </span><br><span class="line">    3. CyclicBarrier </span><br><span class="line">        构造方法 state&#x3D;n</span><br><span class="line">         </span><br><span class="line">        每当一个线程调用 await()方法，则CAS操作state自减1</span><br><span class="line">            </span><br><span class="line">        当state&#x3D;0 时 ，所有调用await()的线程恢复</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">         </span><br></pre></td></tr></table></figure><hr><h5 id="AQS源码"><a href="#AQS源码" class="headerlink" title="AQS源码"></a>AQS源码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. aquire()</span><br><span class="line"></span><br><span class="line">public void aquire()&#123;   </span><br><span class="line">    if(!tryAcquire()    &#x2F;&#x2F; 尝试获取一次  </span><br><span class="line">        &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE),arg)) </span><br><span class="line">            &#x2F;&#x2F; acquireQueued 【作用】： 自旋检测  (tryAcquire()&amp;&amp; node&#x3D;&#x3D;head.next)</span><br><span class="line">            &#x2F;&#x2F; addWaiter【作用】： 添加当前线程node至 队列尾部</span><br><span class="line">            </span><br><span class="line">        selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line">【问题】： 为何不仅调用 acuqireQueued(addWaiter())</span><br><span class="line">    优先尝试最可能成功的代码， 可减少执行的字节码指令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="八-用户态和核心态-1425"><a href="#八-用户态和核心态-1425" class="headerlink" title="八. 用户态和核心态 1425"></a>八. 用户态和核心态 1425</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指令分为 特权指令和非特权指令</span><br><span class="line">其中 特权指令必须在核心态执行，如 启动IO &#x2F;内存清零 &#x2F;修改程序状态字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="九-乐观锁和悲观锁-很不错的总结"><a href="#九-乐观锁和悲观锁-很不错的总结" class="headerlink" title="九. 乐观锁和悲观锁 很不错的总结"></a>九. <a href="https://www.zhihu.com/search?type=content&q=%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81">乐观锁和悲观锁</a> 很不错的总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">悲观锁和乐观锁 是锁的两种分类，并非特指某一个锁。</span><br><span class="line">悲观锁【通过阻塞机制】实现，乐观锁通过【回滚重试】实现。</span><br><span class="line"></span><br><span class="line">1. 悲观锁 ：</span><br><span class="line">    【描述】：线程独占临界资源，在线程执行完毕前，其他【请求】线程只能【阻塞】等待</span><br><span class="line">    【适用场景】： 写操作较多，资源竞争激烈。</span><br><span class="line">2. 乐观锁 ：</span><br><span class="line">    【描述】：乐观锁并【未上锁】，【更新前】检测该数据在【读取到更新】这一段时间内是否被其他线程修改。如果被修改，则循环操作直到成功为止。</span><br><span class="line">    【使用场景】: 读操作较多，资源竞争情况较少</span><br><span class="line">3. CAS 是原子性操作，是乐观锁实现的基础：</span><br><span class="line">    （1） 读取值A，在更新为B之前，检测【原值】是否为A</span><br><span class="line">    （2） 如果是，则更新为B</span><br><span class="line">          如果不是，则更新失败。</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="十-Atomic原子性"><a href="#十-Atomic原子性" class="headerlink" title="十. Atomic原子性"></a>十. Atomic原子性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过 &#123;</span><br><span class="line">    unsafe CAS操作</span><br><span class="line">    Volitle 修饰属性，保证可见</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十一-多线程内存模型"><a href="#十一-多线程内存模型" class="headerlink" title="十一. 多线程内存模型"></a>十一. 多线程内存模型</h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一-进程process和线程thread的关系&quot;&gt;&lt;a href=&quot;#一-进程process和线程thread的关系&quot; class=&quot;headerlink&quot; title=&quot;一. 进程process和线程thread的关系&quot;&gt;&lt;/a&gt;一. 进程process和线程thread的关系&lt;/h4&gt;&lt;h5 id=&quot;两者的定义&quot;&gt;&lt;a href=&quot;#两者的定义&quot; class=&quot;headerlink&quot; title=&quot;两者的定义&quot;&gt;&lt;/a&gt;&lt;strong&gt;两者的定义&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;进程(process)是程序运行的基本单位。一个进程可以有多个线程。进程是及程序的一次执行过程，是正在运行的程序的抽象，代表了运行的CPU。系统资源（内存，文件等）都已进程为单位分配。操作系统为每个进程都分配了独立的地址空间，同时通过“调度”把控制权交给了进程。&lt;/p&gt;
&lt;p&gt;但是进程存在问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程切换的代价和开销大&lt;/li&gt;
&lt;li&gt;在一个进程内需要并行执行多个程序与实现不同功能&lt;/li&gt;
&lt;li&gt;有时性能低&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;线程(thread)是进程划分成更小的运行单位。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。多个线程【共享】进程的【堆和方法】区资源，但每个线程【独占】一个【程序计数器、虚拟机栈、本地方法栈】。&lt;/p&gt;
&lt;h5 id=&quot;区别：&quot;&gt;&lt;a href=&quot;#区别：&quot; class=&quot;headerlink&quot; title=&quot;区别：&quot;&gt;&lt;/a&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；&lt;/li&gt;
&lt;li&gt;一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线&lt;/li&gt;
&lt;li&gt;进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；&lt;/li&gt;
&lt;li&gt;调度和切换：线程上下文切换比进程上下文切换要快得多&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>java学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/01/18/java%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/01/18/java%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-18T10:28:47.000Z</published>
    <updated>2021-02-18T16:19:09.506Z</updated>
    
    <content type="html"><![CDATA[<font size =4 ><h4 id="一-Java-方法中-仅存在【值传递】"><a href="#一-Java-方法中-仅存在【值传递】" class="headerlink" title="一.Java 方法中 仅存在【值传递】"></a>一.Java 方法中 仅存在【值传递】</h4><p>方法得到 所有【参数值的拷贝】，<br>    因此，方法不能修改一个基本数据，<br>【对象引用作为参数】，则该参数和对象引用 指向同一个对象，  </p><hr><h4 id="！！二-和-equals-区别"><a href="#！！二-和-equals-区别" class="headerlink" title="！！二. == 和 equals 区别"></a>！！二. == 和 equals 区别</h4><h5 id="1"><a href="#1" class="headerlink" title="1. =="></a>1. ==</h5><p> == 判断两个对象的【<strong>地址</strong>】是否相同， 即是否【<strong>同一个对象</strong>】</p><h5 id="2-equals"><a href="#2-equals" class="headerlink" title="2. equals"></a>2. equals</h5><p>equals 分两种情况<br>(1) equals 【<strong>没有被类重写</strong>】，则equals方法等价==<br>(2) equals 【<strong>被类重写</strong>】， 则根据重写方法 判断两个对象内容是否相等  </p><a id="more"></a><hr><h4 id="！！三-为什么重写euqals-方法-必须重写-hashCode"><a href="#！！三-为什么重写euqals-方法-必须重写-hashCode" class="headerlink" title="！！三. 为什么重写euqals 方法 必须重写 hashCode()"></a>！！三. 为什么重写euqals 方法 必须重写 hashCode()</h4><ol><li><p>两个对象 hashCode() 所得hash值相等 ， 但equals()方法不一定返回true  </p></li><li><p>两个对象 equals() 返回true，那么对象调用hashCode()返回的hash值一定相等  </p></li><li><p> 如果 仅重写 equals(),而不重写hashcode(),则存在 equals方法会返回true，而hashcode()方法返回的hash值不相等  </p></li><li><p>HashMap中 两个key 重复  </p></li></ol><h4 id="3-1-为什么hash值相同，而两个对象不一定equals"><a href="#3-1-为什么hash值相同，而两个对象不一定equals" class="headerlink" title="3.1 为什么hash值相同，而两个对象不一定equals"></a>3.1 为什么hash值相同，而两个对象不一定equals</h4><ul><li>hashCode() 算法存在碰撞情况</li></ul><hr><h4 id="！！四-String-和-StringBuffer、StringBuilder-区别"><a href="#！！四-String-和-StringBuffer、StringBuilder-区别" class="headerlink" title="！！四. String 和 StringBuffer、StringBuilder 区别"></a>！！四. String 和 StringBuffer、StringBuilder 区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(1) String 【**字符串常量**】 ：  </span><br><span class="line">    内部的 char[] 是通过final修饰符修饰</span><br><span class="line">    因此String是不可变对象</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">(2) StringBuffer ： 线程安全  </span><br><span class="line">(3) StringBuilder ：</span><br><span class="line">    StringBuffer 和 StringBuilder 都 继承 AbstractStringBuilder</span><br><span class="line">    </span><br><span class="line">    该父类定义了append insert等公共方法  </span><br><span class="line">    StringBuffer 对实现的方法加上同步锁，线程安全</span><br><span class="line">    StringBuilder 对实现的方法没有上锁，所以线程非安全</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">String  ：  适用操作少量数据</span><br><span class="line">StringBuilder ： 适用于 【单线程】操作大量数据</span><br><span class="line">StringBuffer ：适用于 【多线程】操作大量数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="！！五-反射"><a href="#！！五-反射" class="headerlink" title="！！五. 反射"></a>！！五. 反射</h4><p>反射 ： 是把java类中各个成分 映射成一个个java对象</p><h5 id="1-获取class对象三种方式"><a href="#1-获取class对象三种方式" class="headerlink" title="(1) 获取class对象三种方式"></a>(1) 获取class对象三种方式</h5><ol><li>object.getClass()    // 通过【对象实例】获取class</li><li>Object.class;        // 通过【类的静态class属性】 获取class </li><li>Class.forName(String className) // 通过 【class名】获取 class</li></ol><h5 id="2-运行期间，一个类只能有一个Class对象产生"><a href="#2-运行期间，一个类只能有一个Class对象产生" class="headerlink" title="(2) 运行期间，一个类只能有一个Class对象产生"></a>(2) 运行期间，一个类只能有一个Class对象产生</h5><h5 id="3-反射的应用场景"><a href="#3-反射的应用场景" class="headerlink" title="!!(3) 反射的应用场景"></a>!!(3) 反射的应用场景</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.  JDBC 连接数据库时，反射加载 【驱动程序】</span><br><span class="line"></span><br><span class="line">Class.forNmae(&quot;com.mysql.jdbc.Driver&quot;); &#x2F;&#x2F; 加载驱动程序</span><br><span class="line"></span><br><span class="line">2. Spring中 IOC容器根据配置文件信息--&gt; 获取类文件信息--&gt;反射创建bean实例 ，并反射调用Set方法设置属性</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-反射-优缺点"><a href="#4-反射-优缺点" class="headerlink" title="!!(4) 反射 优缺点"></a>!!(4) 反射 优缺点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.  优点： 在【运行时】，动态加载类，使代码更灵活</span><br><span class="line">2. 缺点 ： 反射是一系列解释性操作，通过JVM实现。效率低于Java代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-反射定义"><a href="#5-反射定义" class="headerlink" title="(5) 反射定义"></a>(5) 反射定义</h5><h2 id="反射本质就是根据-类的字节码信息，将类的内部属性方法一一映射成Java对象"><a href="#反射本质就是根据-类的字节码信息，将类的内部属性方法一一映射成Java对象" class="headerlink" title="反射本质就是根据 类的字节码信息，将类的内部属性方法一一映射成Java对象"></a>反射本质就是根据 类的字节码信息，将类的内部属性方法一一映射成Java对象</h2><h4 id="六-接口和抽象类-的区别-1036"><a href="#六-接口和抽象类-的区别-1036" class="headerlink" title="!! 六. 接口和抽象类 的区别 1036"></a>!! 六. 接口和抽象类 的区别 1036</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 接口是对行为(方法)的抽象，是一种对行为的规范。抽象类是对类的抽象，提供设计模板。</span><br><span class="line">2. 一个类可实现多个接口，</span><br><span class="line">    一个类只能继承一个抽象类</span><br><span class="line">3. 类实现接口，则接口内抽象方法必须全部实现。 </span><br><span class="line">    类继承抽象类，则抽象类内抽象方法不一定全部实现</span><br><span class="line">4. 接口内实例变量默认final类型，方法默认public。而抽象类内没有限制。</span><br></pre></td></tr></table></figure><hr><h4 id="七-重写和重载的区别"><a href="#七-重写和重载的区别" class="headerlink" title="七. 重写和重载的区别"></a>七. 重写和重载的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    1. 重写 ： 【方法的外貌没有改变，方法提供的行为改变】</span><br><span class="line">            【返回值】【抛出异常类型】 都是其父类方法的子类 </span><br><span class="line">            【访问修饰符】 子类访问权限&gt;&#x3D;父类访问权限 </span><br><span class="line">    2. 重载 ： </span><br><span class="line">       【参数】 【返回值】 【访问修饰符范围】 都发生改变 </span><br><span class="line">&#96;&#96;&#96;     </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 八. 异常体系  1036-11</span><br></pre></td></tr></table></figure><pre><code>1. 所有异常继承公共祖先【throwable类】2. 异常分为两大类 ： Exception &amp; Error    (1) Error 是【程序无法处理】的错误，大部分是代码在JVM运行时出现问题。        如 程序申请内存时，内存资源不足。抛出OOM        Error发生时，JVM一般会【终止】线程    (2) Exception是【程序可以处理】的错误        常见Exception：             ArithmeticException 算数异常            NullPointException 空指针异常            ArrayIndexOutOfBoundsException 下标越界</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">#### 九. 深拷贝 &amp; 浅拷贝</span><br></pre></td></tr></table></figure><p>浅拷贝 ： 对基本数据类型【值传递】，对引用数据类型进行 引用地址拷贝<br>深拷贝 ： 对基本数据类型【值传递】，对引用数据类型，则创建新对象，并复制其内容到新对象中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####  十. 泛型 1404</span><br></pre></td></tr></table></figure><pre><code>1.  【泛型的作用】    泛型是 【编译期】的【类型确认】机制。在【编译期】确认【容器】内元素为正确类型。防止ClassCastException2. 【泛型擦除】    编译器在【编译期】，确认类型正确后，擦除【容器的类型信息】。所以在【运行时】，容器不存在【类型信息】。       如List&lt;String&gt; 在JVM中运行时 仅为List，不存在&lt;String&gt;信息3. 【】    List&lt;Object&gt; list 不能引用 List&lt;String&gt;对象    Lis&lt;?&gt;List 可以引用List&lt;String&gt;对象</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image](A1EF5B82F0EC445EBEA6702EECF32E02)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 十一. final</span><br></pre></td></tr></table></figure><pre><code>final 修饰 变量 、 方法 、 类     1. 修饰【变量】：        变量 = 基础数据类型 ， 则变量值不可变        变量 = 引用数据类型， 则引用对象不可变    2. 修饰【类】        类不能被继承    3. 修饰【方法】        方法不能被子类重写</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 十二. Java 三大特性: 封装 + 继承 + 多态 </span><br><span class="line"> </span><br><span class="line">##### 1. 封装 </span><br><span class="line">对象属性【私有化】 ， 提供外界【访问】属性的方法</span><br><span class="line"></span><br><span class="line">##### 2. 继承</span><br></pre></td></tr></table></figure><ol><li>子类 拥有父类的属性和方法 ， 但是父类privete属性和方法 子类无法调用</li><li>子类可【扩展】，拥有自己的属性和方法</li><li>子类 重写 父类的方法 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### 3. 多态</span><br></pre></td></tr></table></figure>对象引用 指向的实例类型未知<br>因此 ，【对象引用的方法调用 】，在【运行时】确定调用的是哪个方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 十三. Object 方法 </span><br><span class="line">##### equal hashcode</span><br></pre></td></tr></table></figure><pre><code>@Override    public boolean equals(Object obj) &#123;        if (obj != null &amp;&amp; obj.getClass() == this.getClass()) &#123;            Person person= (Person) obj;// 强转类型            return name.equals(person.getName())&amp;&amp;person.age==age;        &#125;        return false;&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##### getClass</span><br><span class="line">    获得类文件对象</span><br><span class="line">##### clone</span><br><span class="line">    深浅拷贝</span><br><span class="line">##### finalize</span><br></pre></td></tr></table></figure><pre><code>用于GC的垃圾回收1. 实例不可达，GC判断实例是否【重写】finalize方法，未重写则直接回收2. 否则，将实例加入F-Queue队列，由低优先级线程执行F-Queue中实例的finalize方法3. finalize方法执行完毕后，【再次】判断实例对象是否可达。可达则复活，否则回收</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 设计模式</span><br><span class="line"></span><br><span class="line">##### 创建模式： 工厂模式 、抽象工厂模式、单例模式</span><br><span class="line"></span><br><span class="line">##### 工厂模式</span><br><span class="line">意义： 为对象的创建提供接口，隔离具体的创建过程</span><br><span class="line">&#123;</span><br><span class="line">    1. 扩展性 ： 构造器修改</span><br><span class="line">    2. 降低代码量： 创建对象的过程有一定代码量，且在多处使用。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单工厂模式<br>    工厂类(唯一)、抽象产品类(唯一)、具体产品类<br>    每当添加具体产品，则需要在唯一工厂类中添加相应业务逻辑，这不符合 开放封闭原则</p><pre><code>适用于： 创建具体产品较少场景</code></pre><p>工厂方法模式<br>    抽象工厂类、具体工厂类、抽象产品、具体产品<br>    抽象工厂类提供创建接口，而其子类(具体工厂)确定要创建的对象<br>    每添加一个具体产品，对应添加一个具体工厂类</p><p>抽象工厂模式<br>    抽象工厂(一组) 、具体工厂、抽象产品、具体产品</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 单例模式</span><br><span class="line">饿汉式 + 懒汉式</span><br><span class="line"></span><br><span class="line">##### 结构模式：[装饰器模式、代理模式](https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;c06a686dae39) </span><br></pre></td></tr></table></figure><p>两者内部都持有 原对象属性</p><p>代理：<br>    注重 如何调用源对象某一个功能，<br>        不需要兼顾源对象的其他功能</p><p>装饰：<br>    注重 原对象【功能扩展】。<br>    装饰类实例需要【兼顾】原对象的其他方法。因为扩展后的对象仍是是对象本身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 十四. 静态内部类 和内部类</span><br></pre></td></tr></table></figure><ol><li><p> 静态内部类可以有静态成员(方法，属性)，而非静态内部类则不能有静态成员</p></li><li><p>静态内部类 访问 外部类的【静态】静态成员,<br>  而非静态内部类 访问 外部类的【所有成员】(方法，属性)</p></li><li><p>静态内部类【实例创建】 不依赖于外部类的实例，通过类名直接调用构造器<br>非静态内部类【实例创建】，依赖于外部类的实例，通过外部实例调用构造器</p></li></ol><p>```</p><h5 id="十五-线程池只是销毁了超出核心线程数目的空闲线程而已-没有标记表明线程是否核心"><a href="#十五-线程池只是销毁了超出核心线程数目的空闲线程而已-没有标记表明线程是否核心" class="headerlink" title="十五. 线程池只是销毁了超出核心线程数目的空闲线程而已,没有标记表明线程是否核心"></a>十五. 线程池只是销毁了超出核心线程数目的空闲线程而已,没有标记表明线程是否核心</h5>]]></content>
    
    
    <summary type="html">&lt;font size =4 &gt;

&lt;h4 id=&quot;一-Java-方法中-仅存在【值传递】&quot;&gt;&lt;a href=&quot;#一-Java-方法中-仅存在【值传递】&quot; class=&quot;headerlink&quot; title=&quot;一.Java 方法中 仅存在【值传递】&quot;&gt;&lt;/a&gt;一.Java 方法中 仅存在【值传递】&lt;/h4&gt;&lt;p&gt;方法得到 所有【参数值的拷贝】，&lt;br&gt;    因此，方法不能修改一个基本数据，&lt;br&gt;【对象引用作为参数】，则该参数和对象引用 指向同一个对象，  &lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;！！二-和-equals-区别&quot;&gt;&lt;a href=&quot;#！！二-和-equals-区别&quot; class=&quot;headerlink&quot; title=&quot;！！二. == 和 equals 区别&quot;&gt;&lt;/a&gt;！！二. == 和 equals 区别&lt;/h4&gt;&lt;h5 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1. ==&quot;&gt;&lt;/a&gt;1. ==&lt;/h5&gt;&lt;p&gt; == 判断两个对象的【&lt;strong&gt;地址&lt;/strong&gt;】是否相同， 即是否【&lt;strong&gt;同一个对象&lt;/strong&gt;】&lt;/p&gt;
&lt;h5 id=&quot;2-equals&quot;&gt;&lt;a href=&quot;#2-equals&quot; class=&quot;headerlink&quot; title=&quot;2. equals&quot;&gt;&lt;/a&gt;2. equals&lt;/h5&gt;&lt;p&gt;equals 分两种情况&lt;br&gt;(1) equals 【&lt;strong&gt;没有被类重写&lt;/strong&gt;】，则equals方法等价==&lt;br&gt;(2) equals 【&lt;strong&gt;被类重写&lt;/strong&gt;】， 则根据重写方法 判断两个对象内容是否相等  &lt;/p&gt;</summary>
    
    
    
    
    <category term="编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/01/18/SQL%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/01/18/SQL%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-18T10:26:41.000Z</published>
    <updated>2021-02-20T13:12:55.740Z</updated>
    
    <content type="html"><![CDATA[<font size =4 ><h4 id="！！一-mysql存储引擎-MyISAM-和-InnoDB的区别-1509"><a href="#！！一-mysql存储引擎-MyISAM-和-InnoDB的区别-1509" class="headerlink" title="！！一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}  1509"></a>！！一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}  1509</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1. 【是否支持行锁】</span><br><span class="line">    MyISAM 仅支持表锁， InnoDB支持表锁和行锁</span><br><span class="line">    </span><br><span class="line">2. 【是否支持事务】 </span><br><span class="line">    MyISAM不支持事务，且不具备【崩溃恢复能力】。</span><br><span class="line">    InnoDB 支持事务，提供回滚和崩溃恢复。</span><br><span class="line"></span><br><span class="line">3. 【是否支持外键】</span><br><span class="line">    仅InnoDB支持外键 </span><br><span class="line">4. 【是否支持MVCC】</span><br><span class="line">    仅InnoDB支持MVCC</span><br><span class="line"></span><br><span class="line">5. 【应用场景不同】</span><br><span class="line">    MyISAM 适用 【Select】频繁，并发少</span><br><span class="line">    InnoDB 适用 【Insert Delete Update】频繁，高并发</span><br><span class="line"></span><br><span class="line">    因为 </span><br><span class="line">    (1) MyISAM 仅缓存索引块，而InnoDB缓存 &#123;索引+数据&#125;</span><br><span class="line">    (2) InnoDB 回表需要映射块，而MyISAM 直接映射数据地址</span><br><span class="line">    (3) InnoDB 需要维护MVCC机制</span><br><span class="line">    </span><br><span class="line">6.  MyISAM索引 和 InnoDB 索引 区别</span><br><span class="line">    MyISAM 【索引】 叶子节点 &#x3D; &#123;key ， 行数据地址&#125;</span><br><span class="line">    </span><br><span class="line">    InnoDB 【主键索引】 叶子节点 &#x3D; &#123;主键ID ， data数据&#125;</span><br><span class="line">    因此 InnoDB根据【主键】索引查询，不需要二次寻址，效率更高</span><br><span class="line">    </span><br><span class="line">    InnoDB 【二级索引】 叶子节点 &#x3D; &#123;key, 主键ID&#125;</span><br><span class="line">    如果过实现索引覆盖，即 要查询列值 全部命中索引，则直接返回 非主键索引的内容</span><br><span class="line">    如果为实现索引覆盖，则需要根据【主键ID】做回表</span><br><span class="line"></span><br><span class="line">7.  【存储结构不同】</span><br><span class="line">    InnoDB 存储结构 &#x3D; 索引和数据 集中存储</span><br><span class="line">    MyISAM存储结构 &#x3D; &#123;表定义，MYD数据文件，MYI索引文件&#125;</span><br><span class="line"></span><br><span class="line">8.  不带WHERE条件时，【count(*)效率不同 】</span><br><span class="line">    MyISAM 自带计数器存储保存【总行数】，可直接返回结果</span><br><span class="line">    InnoDB 扫描全表计算总行数</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="二-事务特性"><a href="#二-事务特性" class="headerlink" title="二. 事务特性"></a>二. <a href="https://www.zhihu.com/search?type=content&q=%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4%E6%80%A7">事务特性</a></h4><p>事务符合 ACID原则的一组操作 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. Atomicity</span><br><span class="line">    事务是不可分割的最小单元，事务内所有操作要么全部执行成功，要么全部失败回滚</span><br><span class="line"></span><br><span class="line">2. Isolation</span><br><span class="line">    事务所作出的修改，在提交前，对于其他事务而言不可见</span><br><span class="line">    </span><br><span class="line">3. Durability</span><br><span class="line">    事务一旦提交，所作出的修改是永久的。</span><br><span class="line">    </span><br><span class="line">4. Consistency</span><br><span class="line">    系统从一个正确状态--&gt;另一个正确状态</span><br><span class="line">    AID是数据库的特征，通过AID手段保证C这个目的</span><br><span class="line">    </span><br><span class="line">   【数据库】约束列值 不能小于0，则事务执行失败</span><br><span class="line">   【应用层】约束 余额数据不能小于0，则应用层通过事务回滚保证约束</span><br><span class="line">   </span><br><span class="line">   没有约束，则事务执行成功，且保持了一致性。因为没有破坏约束。</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="三-并发事务带来的问题-1630-1700"><a href="#三-并发事务带来的问题-1630-1700" class="headerlink" title="三. 并发事务带来的问题 1630 - 1700"></a>三. 并发事务带来的问题 1630 - 1700</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 脏读 </span><br><span class="line">    事务A 修改数据，但并未commit。而事务B读取该数据。 </span><br><span class="line">2. 丢失修改</span><br><span class="line">    事务A 、B都读取同一个数据。事务A 、B先后修改数据，则 第一次修改操作丢失。</span><br><span class="line">3. 不可重复读</span><br><span class="line">    事务A 共读取两次数据，而在这两次读取之间。事务B修改了数据。则事务A两次读取到的数据不同。</span><br><span class="line">4. 幻读 </span><br><span class="line">    事务A 读取【n行数据】,事务B在n行数据间添加数据。则事务A第二次读取时，读取到n+1行。</span><br></pre></td></tr></table></figure><h4 id="！！四-事务隔离级别-1801"><a href="#！！四-事务隔离级别-1801" class="headerlink" title="！！四.  事务隔离级别 1801"></a>！！四.  事务隔离级别 1801</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. Read-Uncommitted 读取未提交</span><br><span class="line">    无论事务是否提交，直接【读取主记录】 </span><br><span class="line">    即并发问题 &#x3D;【脏读】+【不可重复读】+【幻影读】</span><br><span class="line">2. Read-committed 读取已提交</span><br><span class="line">    【读取最新版本的快照】，快照是事务提交后产生，但可能存在同一事务两次读取的快照不同。</span><br><span class="line">    即并发问题 &#x3D; 【不可重复读】+【幻影读】</span><br><span class="line">3. Repeatable 可重复读</span><br><span class="line">    【读取指定版本快照】，则事务多次读取某数据行的结果一致，但读取到的数据可能并非最新数据 。</span><br><span class="line">    即并发问题 &#x3D; 【幻影读】</span><br><span class="line">4. Serializable 可串行化 </span><br><span class="line">    上表锁，读写相互阻塞。效率低下。</span><br><span class="line">    无并发问题 </span><br><span class="line">    </span><br><span class="line">InnoDB引擎默认实现 可重复读隔离级别 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="！！五-MVCC-1655"><a href="#！！五-MVCC-1655" class="headerlink" title="！！五. MVCC 1655"></a>！！五. MVCC 1655</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">【目的】 ： </span><br><span class="line">    MVCC是行锁的变种，它想要尽可能地避免加锁操作，实现【非阻塞】读。从而提高处理并发事务的性能</span><br><span class="line"></span><br><span class="line">【MVCC 实现的隔离级别】</span><br><span class="line">    MVCC仅 Read Committed &amp; REPEATABLE READ 两种隔离级别</span><br><span class="line">    READ UNCOMMITTED 总是【读取最新】数据行 ，与MVCC的版本快照机制不符</span><br><span class="line">    SERIALIZABLE 则 对读取的【数据行】都加锁 ，与MVCC 尽可能避免加锁的原则不符</span><br><span class="line">    </span><br><span class="line">【undolog】 记录数据行的某个历史版本，undolog以链表形式存在</span><br><span class="line"></span><br><span class="line">RC 是读取 最新版本的 undolog</span><br><span class="line">RR 是读取 某一指定老版本的undolog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="！！-六-索引"><a href="#！！-六-索引" class="headerlink" title="！！ 六. 索引"></a>！！ 六. 索引</h4><p>索引的存储结构 = {<br>    1. Hash表<br>    2. B+树<br>}</p><h5 id="！6-1-hash索引"><a href="#！6-1-hash索引" class="headerlink" title="！6.1 hash索引"></a>！6.1 hash索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) hash 索引的实现 </span><br><span class="line">    底层数据结构 &#x3D; hash表</span><br><span class="line">    通过hash值定位数据行，产生碰撞则采用拉链法解决。</span><br><span class="line">(2) hash索引的缺点 </span><br><span class="line">    1. 适用于等值查询。</span><br><span class="line">       但hash索引无法排序，因此不适用于范围查询，不支持最左匹配原则。</span><br><span class="line">    2. 大量重复的键值，减低效率、</span><br></pre></td></tr></table></figure><h5 id="6-2-磁盘预读取"><a href="#6-2-磁盘预读取" class="headerlink" title="6.2 磁盘预读取"></a>6.2 磁盘预读取</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">磁盘读取以【磁盘块】为基本单位。</span><br><span class="line">【磁盘预读取】：每次读取多个【物理连续】的磁盘块</span><br><span class="line">B树利用磁盘预读取特性。在建立节点时，申请【物理连续】的一页空间。</span><br><span class="line">一页空间 &#x3D; 磁盘预读取的 多个磁盘块总和</span><br><span class="line">从而 【实现一次磁盘IO读取一个节点】，减少磁盘IO次数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="！！6-3-为什么使用B-树，而不是-B树"><a href="#！！6-3-为什么使用B-树，而不是-B树" class="headerlink" title="！！6.3 为什么使用B+树，而不是 B树 "></a>！！6.3 <a href="https://blog.csdn.net/qq_21993785/article/details/80580679">为什么使用B+树，而不是 B树 </a></h5><pre><code>1.  Mysql根据【磁盘IO次数】衡量查询效率，而【B+树磁盘IO次数更少】    因为 B+树中【 非叶节点 = &#123; 指针+key &#125; 】    而B树中 【非叶节点 = &#123; 指针+ key + data数据 &#125;】,    每个节点(即每一页) 存储空间有限，B树节点存储的key较少，出度较小    因此B树的节点较多(key总量固定)    导致B树深度较大，磁盘IO次数多。2.  B+树叶子节点通过指针连接，便于【区间访问】</code></pre><h6 id="B树结构"><a href="#B树结构" class="headerlink" title="B树结构"></a>B树结构</h6><p><img src="https://note.youdao.com/yws/res/43524/D9161B28D6904F0084613E7AE4A9FCEC" alt="image">   </p><h6 id="B-树结构"><a href="#B-树结构" class="headerlink" title="B+树结构"></a>B+树结构</h6><h2 id=""><a href="#" class="headerlink" title="  "></a><img src="https://note.youdao.com/yws/res/43527/E0C9A6F042AD4AE6BD92D94ADED4E6E4" alt="image">  </h2><h5 id="！！6-4-为什么使用-B-树，而不是红黑树"><a href="#！！6-4-为什么使用-B-树，而不是红黑树" class="headerlink" title="！！6.4 为什么使用 B+树，而不是红黑树"></a>！！6.4 为什么使用 B+树，而不是红黑树</h5><pre><code>【B+树磁盘IO次数更少】 1.  红黑树的深度往往较大，而磁盘IO次数是和树高度成正比。2.      B树利用磁盘预读取特性。在建立节点时，申请【物理连续】的一页空间。    一页空间 = 磁盘预读取的 多个磁盘块总和    从而 【实现一次磁盘IO读取一个节点】，减少磁盘IO次数    红黑树上逻辑较近的节点，其物理距离可能较远。无法利用磁盘预读特性</code></pre><hr><h5 id="6-5-聚簇索引和-非聚簇索引-主键索引和二级索引"><a href="#6-5-聚簇索引和-非聚簇索引-主键索引和二级索引" class="headerlink" title="!! 6.5 聚簇索引和 非聚簇索引  主键索引和二级索引"></a>!! 6.5 聚簇索引和 非聚簇索引  主键索引和二级索引</h5><h5 id="聚簇索引和非聚簇索引-【区别】"><a href="#聚簇索引和非聚簇索引-【区别】" class="headerlink" title="聚簇索引和非聚簇索引 【区别】"></a>聚簇索引和非聚簇索引 【区别】</h5><h6 id="聚簇索引-将索引结构和数据放在一起的索引"><a href="#聚簇索引-将索引结构和数据放在一起的索引" class="headerlink" title="聚簇索引 = 将索引结构和数据放在一起的索引"></a>聚簇索引 = 将索引结构和数据放在一起的索引</h6><pre><code>【优点】：查询效率高，定位到索引树叶节点，就直接找到数据【缺点】： 索引列更新时，维护代价大【主键索引】属于【聚簇索引】</code></pre><hr><h6 id="非聚簇索引-索引结构和数据分离的索引"><a href="#非聚簇索引-索引结构和数据分离的索引" class="headerlink" title="非聚簇索引 = 索引结构和数据分离的索引"></a>非聚簇索引 = 索引结构和数据分离的索引</h6><pre><code>【优点】： 更新代价小 【缺点】： 需要二次查询，        例如 二级索引需要在主键索引中再次回表查询【二级索引】属于【非聚簇索引】</code></pre><hr><h6 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h6><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主键索引 叶子节点 &#x3D; &#123;key,其他data数据&#125; </span><br><span class="line"></span><br><span class="line">InnoDB中如果没有指定表的主键，则检测表是否有唯一索引</span><br><span class="line">如果有，则该字段默认 &#x3D; 主键</span><br><span class="line">如果没有， 则InnoDB自动创建6B的自增主键</span><br></pre></td></tr></table></figure></code></pre><hr><h6 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h6><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">二级索引 叶子节点 &#x3D; &#123;key，主键ID&#125;</span><br><span class="line"></span><br><span class="line">二级索引查询【过程】</span><br><span class="line">    1. 【非聚集索引】中查询到主键ID</span><br><span class="line">    2. 【回表】 ： 根据主键ID在  【聚集索引】中查询整行记录</span><br></pre></td></tr></table></figure></code></pre><hr><h5 id="6-6-最左前缀"><a href="#6-6-最左前缀" class="headerlink" title="!! 6.6 最左前缀"></a>!! 6.6 最左前缀</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">联合索引 是由多个列组成。如(name,age)</span><br><span class="line">查询时，列值【从左到右】匹配索引。</span><br><span class="line">遇到【范围查询】(&gt; &lt; between like左匹配)后 ，不可进一步匹配。</span><br></pre></td></tr></table></figure><h5 id="6-7-覆盖索引"><a href="#6-7-覆盖索引" class="headerlink" title="6.7 覆盖索引"></a>6.7 覆盖索引</h5><pre><code>在非聚集索引的叶子节点中 所含的列值是要查询的列值，不用进行回表。直接返回即可</code></pre><h5 id="6-8-为什么不对每个列创建索引"><a href="#6-8-为什么不对每个列创建索引" class="headerlink" title="6.8 为什么不对每个列创建索引"></a>6.8 为什么不对每个列创建索引</h5><pre><code>1. 数据CRUD时， 索引需要动态维护2. 索引占据物理空间，尤其聚簇索引</code></pre><hr><h4 id="七-数据库三大范式"><a href="#七-数据库三大范式" class="headerlink" title="七.  数据库三大范式"></a>七.  数据库三大范式</h4><p>第一范式： 每个列不可分离<br>第二范式： 非主键<strong>完全依赖</strong>主键<br>第三范式： 非主键<strong>只依赖</strong>主键，不依赖非主键</p><h4 id="八-索引应用场景"><a href="#八-索引应用场景" class="headerlink" title="八. 索引应用场景"></a>八. 索引应用场景</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE add index(字段名) 创建索引</span><br><span class="line">    1. WHERE </span><br><span class="line">    WHERE 筛选字段进行查询时，</span><br><span class="line">    如果 该字段建立索引，则查询效率更高</span><br><span class="line">    </span><br><span class="line">    2. ORDER BY  </span><br><span class="line">   </span><br><span class="line">    使用order by将查询结果按照某个字段排序时，</span><br><span class="line">    </span><br><span class="line">    如果该字段没有建立索引，</span><br><span class="line">    查询出的所有数据使用外部排序，涉及磁盘IO，则效率底下</span><br><span class="line">    </span><br><span class="line">    ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br><span class="line">    由于索引有序，所以按照索引顺序逐条读出数据</span><br><span class="line">    </span><br><span class="line">    3. 索引覆盖</span><br><span class="line">    【查询的字段】都建立过索引，</span><br><span class="line">    引擎会直接在索引表中查询而【不访问原始数据】</span><br><span class="line">    尽可能在select后只写必要的查询字段，以增加索引覆盖的几率</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="九-创建索引的原则"><a href="#九-创建索引的原则" class="headerlink" title="九. 创建索引的原则"></a>九. 创建索引的原则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 字段 基数大</span><br><span class="line">2. 字段 重复值较少 </span><br><span class="line">3. 字段 频繁作为【查询条件】</span><br><span class="line">4. 字段 更新少 </span><br><span class="line">5. 最左匹配原则 ：  </span><br><span class="line">    MySQL对 索引中的列值 从左到右匹配，直到遇到范围查询就停止</span><br><span class="line">6. 尽量扩展索引，而非创建新索引</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十-大表优化"><a href="#十-大表优化" class="headerlink" title="十.  大表优化"></a>十.  大表优化</h4><h5 id="explain-查看执行计划-，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等"><a href="#explain-查看执行计划-，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等" class="headerlink" title="explain 查看执行计划 ，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等"></a>explain 查看执行计划 ，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等</h5><h5 id="1-大表优化"><a href="#1-大表优化" class="headerlink" title="1. 大表优化"></a>1. 大表优化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. 限定数据范围 </span><br><span class="line">    查询语句 通过查询条件限定数据范围</span><br><span class="line">2. 数据库主从同步，读写分离</span><br><span class="line">    多个服务器上部署mysql，</span><br><span class="line">    一台服务器为【主库】，负责【写数据】</span><br><span class="line">    其他服务器为【从库】，负责【读数据】</span><br><span class="line">    </span><br><span class="line">    一. 主从同步实现</span><br><span class="line">    【主库A】数据库事件存储在 日志系统A中，传输日志文件</span><br><span class="line">    【从库】 接收文件并写入本地日志系统，然后将【数据库事件】在从库MySQL中完成</span><br><span class="line"></span><br><span class="line">3. 垂直分区</span><br><span class="line">    </span><br><span class="line">    优点：一行记录 的数据量变少，在查询时IO次数减少</span><br><span class="line">    </span><br><span class="line">    缺点：</span><br><span class="line">        (1) 主键冗余，</span><br><span class="line">        (2) 引起join操作</span><br><span class="line">4. 水平分区</span><br><span class="line">    将 【行数据】分组存储到不同【库 ||表】， 【最好分库】</span><br><span class="line">    </span><br><span class="line">    【缺点】：</span><br><span class="line">        (1) 查询时，通常需要 【多个表名】 + 【UNION操作】</span><br><span class="line">        (2) 跨库 JOIN 性能很差 , </span><br><span class="line">        (3) 【跨库】的【事务支持】，逻辑复杂度和性能代价 都很大</span><br><span class="line"></span><br><span class="line">            </span><br></pre></td></tr></table></figure><hr><h5 id="2-分表-分库后的问题"><a href="#2-分表-分库后的问题" class="headerlink" title="2. 分表 分库后的问题"></a>2. 分表 分库后的问题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        (1). 【跨节点】的 count，order by ， group by 等【聚合函数】逻辑复杂</span><br><span class="line">        (2). 【跨库】的join 性能代价大</span><br><span class="line">        (3). 【主键ID问题】 ：MySQL原先主键自增机制，跨库情况下，存在主键重复的问题</span><br><span class="line">           1)  若采用 UUID作为主键， 则UUID主键占用内存过大</span><br><span class="line">           2)  多个数据库采用 跨步自增</span><br><span class="line">           3) ...</span><br><span class="line">        (4) 【事务支持】</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">---</span><br><span class="line">##### 3. 主从分布，读写分离</span><br></pre></td></tr></table></figure><pre><code>    作用 = &#123; 负载均衡 + 数据备份 + 高可用&#125;    流程 =&#123;        1. 主库的【数据库事件】记录在二进制的binlog，binlog传输给从库        2. 从库读取binlog内容到本地日志系统的relaylog        3. 从库 执行relay log中的SQL语句，实现主从同步    &#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 十一. SQL生命周期 </span><br></pre></td></tr></table></figure><ol><li><p>应用服务器与数据库服务器建立一个连接，应用服务器发送SQL请求</p></li><li><p>数据库进程拿到【sql请求】，通过【连接器】验证SQL语句是否具有【权限】</p></li><li><p>【分析器】进行 词法分析和语法分析。<br> 词法分析 提取SQL语句关键元素 ： SELECT 、 表名 、 查询条件等<br> 语法分析 判断SQL语句是否正确 ：判断关键词是否正确</p></li><li><p>【优化器】生成SQL【执行计划】</p></li><li><p>【执行器】按照执行计划， 将数据读取到内存并进行逻辑处理</p></li><li><p>通过连接，将数据传输给应用服务器 </p></li><li><p>断开连接</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 十二. MySQL锁</span><br><span class="line">##### 1. 表锁</span><br><span class="line">##### 2. 行锁</span><br></pre></td></tr></table></figure><pre><code>1. Record Lock :  单个数据行的锁2. Gap Lock ： 锁定范围，不包括记录本身3. Next-key lock : record + gap 结合，锁定一个范围，并且锁定记本身</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#### 十三. count* count1 count(col)区别  1050 - 1110</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#####  count(expression) &#x3D; 聚合函数</span><br><span class="line"></span><br><span class="line">    逐行检测expression是否&#x3D;null, </span><br><span class="line">    expression！&#x3D;null则计数器加1</span><br><span class="line">    </span><br><span class="line">#####  count(1)和count(*)作用相同:</span><br><span class="line"></span><br><span class="line">    count(1) 每行expression&#x3D;1 ，NOT NULL，count(1)作用&#x3D;统计总行数</span><br><span class="line">    count(*) 并非 统计每行所有列值是否为null，列值全为null的数据行不存在.</span><br><span class="line">    因此 count(*) &#x3D; 统计总行数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#####  count(1) count(*) 经过优化器指定的执行计划相同 ，两者效率相同    </span><br><span class="line"></span><br><span class="line">    在没有二级索引情况下， 通过主键索引统计总行数</span><br><span class="line">    如果有二级索引， 则优先选择 【最窄】二级索引统计总行数 </span><br><span class="line">    主键索引 叶节点 &#x3D; &#123;主键ID, 其他所有列值&#125;</span><br><span class="line">    二级索引 叶节点 &#x3D; &#123;key+主键ID&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### count(col) 逐行检测col是否&#x3D;null</span><br><span class="line"></span><br><span class="line">    因此 count(col)统计 非null列的总行数</span><br><span class="line">    对col建立非聚集索引，可以优化查询效率</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 十四. [explain 返回的结果](https:&#x2F;&#x2F;blog.csdn.net&#x2F;zhuxineli&#x2F;article&#x2F;details&#x2F;14455029)</span><br><span class="line"></span><br><span class="line">##### type 【引擎查找表】的方式</span><br><span class="line"></span><br><span class="line">    all,index,range,ref,eq_ref，const</span><br><span class="line">    从左到右，它们的效率依次是增强的</span><br><span class="line">        </span><br><span class="line">    all     全表扫描</span><br><span class="line">    index   全索引扫描</span><br><span class="line">    range   范围扫描 ：     【索引】+【范围查询】</span><br><span class="line">    ref     小范围扫描：    【可能重复】的【普通索引】+【表联结情况】</span><br><span class="line">    eq_ref  单条数据扫描 ： 【主键 || 唯一】索引+【表联结情况】</span><br><span class="line">    const   单条数据扫描 ： 【主键 || 唯一】索引 </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">##### key</span><br><span class="line"></span><br><span class="line">    MySQL 使用的索引</span><br><span class="line">##### rows</span><br><span class="line"></span><br><span class="line">    MYSQL 执行查询的行数，数值越大性能越差 </span><br><span class="line"></span><br><span class="line">##### extra  </span><br><span class="line"></span><br><span class="line">    Using index 使用覆盖索引</span><br><span class="line">    Using Where 使用WHERE过滤</span><br><span class="line">    Using temporary ： 使用临时表 ，建议优化</span><br><span class="line">    Using filesort ： 对查询结果【外部排序】，而非根据索引有序读取。建议优化 </span><br><span class="line">    </span><br><span class="line">---</span><br><span class="line">#### 十五. SQL优化 1020</span><br><span class="line">#### (一). WHERE的优化</span><br><span class="line">##### 1.全表扫描 </span><br><span class="line">WHERE,ORDER BY涉及的列上 建立索引 </span><br><span class="line"></span><br><span class="line">##### 2.WHERE条件中避免使用的判断</span><br></pre></td></tr></table></figure><pre><code>&#123;    is null ,    !=  ,    OR  ,    in  ,   //  慎重使用，非连续 in集合会放弃索引，全表扫描&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这些判断，会使得引擎【放弃索引】，进行【全表扫描】</span><br><span class="line"></span><br><span class="line">##### 3. WHERE条件中 避免【运行时解析】的变量</span><br><span class="line">原因： 执行计划在【**编译期**】制定，【**运行时解析**】的变量不能作为索引输入项  </span><br><span class="line">因此采用全表扫描  </span><br></pre></td></tr></table></figure><pre><code>&#123;    1. 参数          WHERE num = @num    2. WHERE条件左侧 避免 函数调用+算术计算         WHERE num = 100+2        WHERE substring(num,1,3) = &#39;abc&#39;&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 十六. 超大分页</span><br></pre></td></tr></table></figure><pre><code>超大分页 = Limit 10000，10 MySQL并非跳过= offset行，而是取offset+N行，然后返回放弃前offset行，返回N行那当offset特别大的时候，效率低下【优化方法】： 先快速定位 主键，然后再关联</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  十七. SQL优化</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    1. 慢查询日志 ，查看开销大的SQL        set GLOBAL slow_query_log = on    2.  开销大原因 = &#123;        1.              【原因一】：SQL语句 是否加载额外的数据             【例子】： 未使用WHERE范围限制、 Limit分页过大、 使用&#123;is NULL，!= ，OR&#125; 触发全表扫描            【优化】 ： 修改SQL语句        2.             【原因二】： 未命中索引、使用的索引有待优化            【例子】： SELECT A,B,C FROM t WHERE A=? AND B= ?                         或者 ORDER BY 、ON的列上是否建立索引             【优化】：explain查询执行计划，创建||选择其他索引，使得SQL语句尽可能地命中索引        3.             【原因三】： SQL语句无法优化，【大表情况】                (1) 分库分表                (2) 主从同步，读写分离    &#125; </code></pre><pre><code></code></pre>]]></content>
    
    
    <summary type="html">&lt;font size =4 &gt;

&lt;h4 id=&quot;！！一-mysql存储引擎-MyISAM-和-InnoDB的区别-1509&quot;&gt;&lt;a href=&quot;#！！一-mysql存储引擎-MyISAM-和-InnoDB的区别-1509&quot; class=&quot;headerlink&quot; title=&quot;！！一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}  1509&quot;&gt;&lt;/a&gt;！！一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}  1509&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 【是否支持行锁】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyISAM 仅支持表锁， InnoDB支持表锁和行锁&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 【是否支持事务】 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyISAM不支持事务，且不具备【崩溃恢复能力】。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InnoDB 支持事务，提供回滚和崩溃恢复。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 【是否支持外键】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    仅InnoDB支持外键 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 【是否支持MVCC】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    仅InnoDB支持MVCC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. 【应用场景不同】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyISAM 适用 【Select】频繁，并发少&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InnoDB 适用 【Insert Delete Update】频繁，高并发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    因为 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (1) MyISAM 仅缓存索引块，而InnoDB缓存 &amp;#123;索引+数据&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (2) InnoDB 回表需要映射块，而MyISAM 直接映射数据地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (3) InnoDB 需要维护MVCC机制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.  MyISAM索引 和 InnoDB 索引 区别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyISAM 【索引】 叶子节点 &amp;#x3D; &amp;#123;key ， 行数据地址&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InnoDB 【主键索引】 叶子节点 &amp;#x3D; &amp;#123;主键ID ， data数据&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    因此 InnoDB根据【主键】索引查询，不需要二次寻址，效率更高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InnoDB 【二级索引】 叶子节点 &amp;#x3D; &amp;#123;key, 主键ID&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    如果过实现索引覆盖，即 要查询列值 全部命中索引，则直接返回 非主键索引的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    如果为实现索引覆盖，则需要根据【主键ID】做回表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.  【存储结构不同】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InnoDB 存储结构 &amp;#x3D; 索引和数据 集中存储&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyISAM存储结构 &amp;#x3D; &amp;#123;表定义，MYD数据文件，MYI索引文件&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8.  不带WHERE条件时，【count(*)效率不同 】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyISAM 自带计数器存储保存【总行数】，可直接返回结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    InnoDB 扫描全表计算总行数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>firstblog</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2020/11/12/firstblog/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2020/11/12/firstblog/</id>
    <published>2020-11-12T11:43:38.000Z</published>
    <updated>2021-02-18T16:18:43.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的博客文章"><a href="#我的博客文章" class="headerlink" title="我的博客文章"></a>我的博客文章</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><h3 id="这是一个三级标记（-后面一定要加空格）"><a href="#这是一个三级标记（-后面一定要加空格）" class="headerlink" title="这是一个三级标记（#后面一定要加空格）"></a>这是一个三级标记（#后面一定要加空格）</h3><p><em>这一句话会是斜体</em></p><p><strong>这一句话会被加粗</strong></p><p><strong><em>这一句话会被斜体加粗</em></strong></p><p><del>这一句话会有删除线</del></p><blockquote><p>这里是引用的内容</p><blockquote><p>还能接着引用</p><blockquote><p>还能再往里引用</p></blockquote></blockquote></blockquote><a id="more"></a><p>接下来是分割线</p><hr><hr><h3 id="这里是超链接"><a href="#这里是超链接" class="headerlink" title="这里是超链接"></a>这里是超链接</h3><p><a href="http://baidu.com/">百度</a></p><h3 id="这里是无序列表"><a href="#这里是无序列表" class="headerlink" title="这里是无序列表"></a>这里是无序列表</h3><ul><li>列表1</li></ul><ul><li>列表2</li></ul><ul><li>列表3<ul><li>列表嵌套（前加三个空格）</li></ul></li></ul><h3 id="这里是有序列表"><a href="#这里是有序列表" class="headerlink" title="这里是有序列表"></a>这里是有序列表</h3><ol><li>列表1</li><li>列表2</li><li>列表3</li></ol><h3 id="这里是表格"><a href="#这里是表格" class="headerlink" title="这里是表格"></a>这里是表格</h3><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h3 id="这里是代码"><a href="#这里是代码" class="headerlink" title="这里是代码"></a>这里是代码</h3><p><code>printf(&#39;hello,world);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     System.out.println(&quot;hello,world&quot;);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;我的博客文章&quot;&gt;&lt;a href=&quot;#我的博客文章&quot; class=&quot;headerlink&quot; title=&quot;我的博客文章&quot;&gt;&lt;/a&gt;我的博客文章&lt;/h1&gt;&lt;h2 id=&quot;这是一个二级标题&quot;&gt;&lt;a href=&quot;#这是一个二级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一个二级标题&quot;&gt;&lt;/a&gt;这是一个二级标题&lt;/h2&gt;&lt;h3 id=&quot;这是一个三级标记（-后面一定要加空格）&quot;&gt;&lt;a href=&quot;#这是一个三级标记（-后面一定要加空格）&quot; class=&quot;headerlink&quot; title=&quot;这是一个三级标记（#后面一定要加空格）&quot;&gt;&lt;/a&gt;这是一个三级标记（#后面一定要加空格）&lt;/h3&gt;&lt;p&gt;&lt;em&gt;这一句话会是斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这一句话会被加粗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;这一句话会被斜体加粗&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这一句话会有删除线&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里是引用的内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还能接着引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还能再往里引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2020/11/12/hello-world/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2020/11/12/hello-world/</id>
    <published>2020-11-12T08:42:59.216Z</published>
    <updated>2020-11-12T08:42:59.216Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
