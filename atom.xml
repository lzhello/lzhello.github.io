<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lzhello&#39;s blog</title>
  
  <subtitle>我的头发不是烫坏了只是天生自然卷</subtitle>
  <link href="https://github.com/lzhello/lzhello.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/lzhello/lzhello.github.io.git/"/>
  <updated>2021-05-31T16:41:33.161Z</updated>
  <id>https://github.com/lzhello/lzhello.github.io.git/</id>
  
  <author>
    <name>lzhello</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021实习面试记录</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/06/01/2021%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/06/01/2021%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</id>
    <published>2021-05-31T16:16:58.000Z</published>
    <updated>2021-05-31T16:41:33.161Z</updated>
    
    <content type="html"><![CDATA[<p>投的都是前端开发，目前为止还一个都没过……流泪了，记录一下</p><a id="more"></a><h1 id="5-24-好未来-学而思"><a href="#5-24-好未来-学而思" class="headerlink" title="5.24 好未来 学而思"></a>5.24 好未来 学而思</h1><p>下午17:00开始</p><p>自我介绍</p><p>HTML语义化标签</p><p>CSS盒模型</p><p>CSS的position，有哪些值，分别是什么</p><p>CSS的display属性，display none 和  visible hidden的区别（displaynone元素不占空间，visiblehidden只是看不见）</p><p>CSS样式有哪些（标签内，头部style，外部引用）</p><p>选择器有哪些，优先级怎么样</p><p>js的变量类型，基本数据类型和引用类型介绍</p><p>ES6了解什么</p><p>HTTP协议，了解哪些（HTTP，HTTP2.0，3.0，HTTPS）</p><p>反问：</p><p>没数据结构算法题吗？ 嗯没有</p><p>您觉得我表现咋样，有哪块知识明显薄弱吗？嗯没有，但是你接触前段才半年，时间有点短</p><p>贵公司现在还缺人吗？嗯，缺的，我们现在和实习生双向选择，大家都是很有机会的。</p><p>好的，再见</p><p>然后第二天收到感谢信，我。。。不知道说啥。。。</p><h1 id="5-31-搜狗-网页搜索"><a href="#5-31-搜狗-网页搜索" class="headerlink" title="5.31 搜狗 网页搜索"></a>5.31 搜狗 网页搜索</h1><p>晚上19:30开始</p><p>自我介绍</p><p>怎么用JS获取页面内所有的HTML标签（递归调用，不断获取node.childNodes，再获取node.nodeName）</p><p>Ajax了解吗（不了解）</p><p>数组的方法知道哪些？（答了一堆）</p><p>学了网络的相关的东西吗？学了，各种互联网协议</p><p>200,304状态码有什么区别？（不太会，只说了304是什么）</p><p>事件获取知道什么？（addeventListener，参数各是什么）</p><p>最近的项目里面用js干过什么？（我：没干什么js的。。我用js爬了个托福考位算吗）</p><p>“你跟我们的岗位可能不太匹配，回去看一下红宝书吧”</p><p>“好的感谢您”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;投的都是前端开发，目前为止还一个都没过……流泪了，记录一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="打工" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%89%93%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/05/11/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/05/11/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-05-11T15:02:08.000Z</published>
    <updated>2021-06-01T16:45:57.265Z</updated>
    
    <content type="html"><![CDATA[<p>刷题！</p><a id="more"></a><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="剑指-Offer-50-第一个只出现一次的字符-easy"><a href="#剑指-Offer-50-第一个只出现一次的字符-easy" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符 easy"></a>剑指 Offer 50. 第一个只出现一次的字符 easy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;character&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> firstUniqChar = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i ++</span>)</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">map[s[i]] === <span class="literal">undefined</span></span>)</span> &#123;</span><br><span class="line">            map[s[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map[s[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i <span class="keyword">in</span> map</span>)</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">map[i] === <span class="number">1</span></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h3><h2 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h2><h3 id="剑指-Offer-55-I-二叉树的深度-easy"><a href="#剑指-Offer-55-I-二叉树的深度-easy" class="headerlink" title="剑指 Offer 55 - I. 二叉树的深度    easy"></a>剑指 Offer 55 - I. 二叉树的深度    easy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> leftTree = maxDepth(root.left);</span><br><span class="line">    <span class="keyword">const</span> rightTree = maxDepth(root.right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftTree, rightTree) +<span class="number">1</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</h3><p>判断奇偶数：</p><p>常用：<code>(a%2 = 0)</code></p><p>位运算：任何偶数二进制第一位数必定0，而奇数必定是1，而1的二进制就是1，所以可以用这个判断</p><p><code>a&amp;1=0</code> 偶数</p><p><code>a&amp;1=1</code> 奇数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">A</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArrayByParity = <span class="function"><span class="keyword">function</span> (<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> odd = [];</span><br><span class="line">    <span class="keyword">let</span> even = [];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i=<span class="number">0</span>;i&lt;A.length;i++</span>)</span>&#123;</span><br><span class="line">        A[i]%<span class="number">2</span>==<span class="number">0</span>?even.push(A[i]):odd.push(A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    A=[];</span><br><span class="line">    A=A.concat(odd,even)</span><br><span class="line">    <span class="keyword">return</span> A </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-29-顺时针打印矩阵"><a href="#剑指-Offer-29-顺时针打印矩阵" class="headerlink" title="剑指 Offer 29. 顺时针打印矩阵"></a>剑指 Offer 29. 顺时针打印矩阵</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!matrix.length) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">const</span> firstRow = matrix.shift();</span><br><span class="line">    result = result.concat(firstRow);</span><br><span class="line"><span class="comment">//输出并删除第一行</span></span><br><span class="line">   <span class="keyword">while</span> (matrix.length) &#123;</span><br><span class="line"><span class="comment">//当matrix没有全部被删除</span></span><br><span class="line">    matrix = rotateMatrix(matrix);</span><br><span class="line">    result = result.concat(matrix.shift());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rotateMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix[<span class="number">0</span>].length===<span class="literal">undefined</span>) <span class="keyword">return</span> matrix;</span><br><span class="line">    <span class="comment">//如果不是多维数组，直接返回</span></span><br><span class="line">    <span class="keyword">const</span> rows = matrix.length;</span><br><span class="line">    <span class="keyword">const</span> columns = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">const</span> newMatrix = [];</span><br><span class="line">    <span class="comment">//进行逆时针旋转</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = columns-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> tempMatrix=[];</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j = <span class="number">0</span>;j&lt;rows;j++</span>)</span>&#123;</span><br><span class="line">            tempMatrix.push(matrix[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        newMatrix.push(tempMatrix);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newMatrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行用时：148 ms, 在所有 JavaScript 提交中击败了5.89%的用户（？）</span></span><br><span class="line"><span class="comment">//内存消耗：44.6 MB, 在所有 JavaScript 提交中击败了6.18%的用户（？）</span></span><br></pre></td></tr></table></figure><p>太水了。。换个写法。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">matrix</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        [</span></span><br><span class="line"><span class="comment">            [1, 2, 3],</span></span><br><span class="line"><span class="comment">            [4, 5, 6],</span></span><br><span class="line"><span class="comment">            [7, 8, 9]</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">        几个关键位置 四个拐弯角 top 、right、bottom、left</span></span><br><span class="line"><span class="comment">        顺时针 [left, right] -&gt; [top, bottom] -&gt; [right, left] -&gt; [bottom, top]</span></span><br><span class="line"><span class="comment">        一次性遍历完 当res的长度等于row * col 即所有元素遍历完成 终止while循环</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!matrix.length) <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = [], row = matrix.length, col = matrix[<span class="number">0</span>].length, size = row * col</span><br><span class="line">    <span class="keyword">let</span> t = <span class="number">0</span>, r = col - <span class="number">1</span>, b = row - <span class="number">1</span>, l = <span class="number">0</span> <span class="comment">// 遍历顺序的边 分为为 上、右、下、左</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (res.length !== size) &#123;</span><br><span class="line">        <span class="comment">// 从左往右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = l; i &lt;= r; i++) res.push( matrix[t][i] )</span><br><span class="line">        t++</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从上往下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = t; i &lt;= b; i++) res.push( matrix[i][r] )</span><br><span class="line">        r--</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查一次是否遍历完</span></span><br><span class="line">        <span class="keyword">if</span> (res.length === size) <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从右往左</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = r; i &gt;= l; i--) res.push( matrix[b][i] )</span><br><span class="line">        b--</span><br><span class="line">        <span class="comment">// 从下往上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = b; i &gt;= t; i--) res.push( matrix[i][l] )</span><br><span class="line">        l++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-05-替换空格-easy"><a href="#剑指-Offer-05-替换空格-easy" class="headerlink" title="剑指 Offer 05. 替换空格      easy"></a>剑指 Offer 05. 替换空格      easy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/ /g</span>,<span class="string">&#x27;%20&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最直观的方法是先将数组2放到数组1的尾部再排序</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m, nums1.length - m, ...nums2);</span><br><span class="line">    nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>nums1</code> 、 <code>nums2</code> 有序，若把 <code>nums2</code> 全部合并到 <code>nums1</code> ，则合并后的 <code>nums1</code> 长度为 <code>m+n</code></li><li>我们可以从下标 <code>m+n-1</code> 的位置填充 <code>nums1</code> ，比较 <code>nums1[len1]</code> 与 <code>nums2[len2]</code> 的大小，将最大值写入 <code>nums1[len]</code>，即</li><li><ul><li><code>nums1[len1]&gt;=nums2[len2]</code> ，<code>nums1[len--] = nums1[len1--]</code> ,这里 <code>--</code> 是因为写入成功后，下标自动减1，继续往前比较</li><li>否则 <code>nums1[len--] = nums2[len2--]</code></li></ul></li><li>边界条件：</li><li><ul><li>若 <code>len1 &lt; 0</code>，即 <code>len2 &gt;= 0</code> ，此时 <code>nums1</code> 已重写入， <code>nums2</code> 还未合并完，仅仅需要将 <code>nums2</code> 的剩余元素（0…len）写入 <code>nums2</code> 即可，写入后，合并完成</li><li>若 <code>len2 &lt; 0</code>，此时 <code>nums2</code> 已全部合并到 <code>nums1</code> ，合并完成</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len1 = m - <span class="number">1</span>,</span><br><span class="line">        len2 = n - <span class="number">1</span>,</span><br><span class="line">        len = m + n - <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">len2 &gt;= <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">len1 &lt; <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">            nums1[len--] = nums2[len2--]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        nums1[len--] = nums1[len1] &gt;= nums2[len2] ? nums1[len1--]: nums2[len2--]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h3><h3 id="43-字符串相乘"><a href="#43-字符串相乘" class="headerlink" title="43. 字符串相乘"></a><a href="https://leetcode-cn.com/problems/multiply-strings/">43. 字符串相乘</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">num1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">num2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num1==<span class="number">0</span> || num2==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">const</span> res=[];<span class="comment">// 结果集</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i=<span class="number">0</span>;i&lt;num1.length;i++</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> tmp1=num1[num1.length-<span class="number">1</span>-i]; <span class="comment">// num1尾元素</span></span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> j=<span class="number">0</span>;j&lt;num2.length;j++</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> tmp2 = num2[num2.length-<span class="number">1</span>-j]; <span class="comment">// num2尾元素</span></span><br><span class="line">            <span class="keyword">let</span> pos = res[i+j] ? res[i+j]+tmp1*tmp2 : tmp1*tmp2;<span class="comment">// 目标值 ==》三元表达式，判断结果集索引位置是否有值</span></span><br><span class="line">            res[i+j]=pos%<span class="number">10</span>; <span class="comment">// 赋值给当前索引位置</span></span><br><span class="line">            <span class="comment">// 目标值是否大于10 ==》是否进位 这样简化res去除不必要的&quot;0&quot;</span></span><br><span class="line">            pos &gt;=<span class="number">10</span> &amp;&amp; (res[i+j+<span class="number">1</span>]=res[i+j+<span class="number">1</span>] ? res[i+j+<span class="number">1</span>]+<span class="built_in">Math</span>.floor(pos/<span class="number">10</span>) : <span class="built_in">Math</span>.floor(pos/<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// dp[i] 表示前i个连续子数组的最大和</span></span><br><span class="line">    <span class="keyword">let</span> dp=[]</span><br><span class="line">    dp[<span class="number">0</span>]=nums[<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i=<span class="number">1</span>;i&lt;nums.length;i++</span>)</span>&#123;</span><br><span class="line">        dp[i]=<span class="built_in">Math</span>.max(dp[i-<span class="number">1</span>]+nums[i],nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...dp)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><h3 id="剑指-Offer-24-反转链表-easy"><a href="#剑指-Offer-24-反转链表-easy" class="headerlink" title="剑指 Offer 24. 反转链表 easy"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a> easy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组shift和reverse谁的复杂度高</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 空链表输出的还是空链表</span></span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> valArr = []</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        valArr.push(cur.val)</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重新指向头节点</span></span><br><span class="line">    cur = head</span><br><span class="line">    <span class="keyword">while</span> (valArr.length) &#123;</span><br><span class="line">        cur.val = valArr.pop()</span><br><span class="line">        cur = cur.next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseBetween = <span class="function"><span class="keyword">function</span>(<span class="params">head, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论</span></span><br><span class="line">    <span class="keyword">const</span> dummyNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    dummyNode.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pre = dummyNode;</span><br><span class="line">    <span class="comment">// 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点</span></span><br><span class="line">    <span class="comment">// 建议写在 for 循环里，语义清晰</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点</span></span><br><span class="line">    <span class="keyword">let</span> rightNode = pre;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        rightNode = rightNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第 3 步：切断出一个子链表（截取链表）</span></span><br><span class="line">    <span class="keyword">let</span> leftNode = pre.next;</span><br><span class="line">    <span class="keyword">let</span> curr = rightNode.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：切断链接</span></span><br><span class="line">    pre.next = <span class="literal">null</span>;</span><br><span class="line">    rightNode.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第 4 步：同第 206 题，反转链表的子区间</span></span><br><span class="line">    reverseLinkedList(leftNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第 5 步：接回到原来的链表中</span></span><br><span class="line">    pre.next = rightNode;</span><br><span class="line">    leftNode.next = curr;</span><br><span class="line">    <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverseLinkedList = <span class="function">(<span class="params">head</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> cur = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        <span class="keyword">const</span> next = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="剑指-Offer-64-求1-2-…-n"><a href="#剑指-Offer-64-求1-2-…-n" class="headerlink" title="剑指 Offer 64. 求1+2+…+n"></a><a href="https://leetcode-cn.com/problems/qiu-12n-lcof/">剑指 Offer 64. 求1+2+…+n</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sumNums = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &amp;&amp; n+sumNums(n-<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Array-Using-Note"><a href="#Array-Using-Note" class="headerlink" title="Array Using Note"></a>Array Using Note</h2><p><strong>创建数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits.length);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>通过索引访问数组元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = fruits[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> last = fruits[fruits.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// Banana</span></span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Apple 0</span></span><br><span class="line"><span class="comment">// Banana 1</span></span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加元素到数组的末尾</span></span><br><span class="line"><span class="keyword">var</span> newLength = fruits.push(<span class="string">&#x27;Orange&#x27;</span>);</span><br><span class="line"><span class="comment">// newLength:3; fruits: [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除数组末尾的元素</span></span><br><span class="line"><span class="keyword">var</span> last = fruits.pop(); <span class="comment">// remove Orange (from the end)</span></span><br><span class="line"><span class="comment">// last: &quot;Orange&quot;; fruits: [&quot;Apple&quot;, &quot;Banana&quot;];</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除数组最前面（头部）的元素</span></span><br><span class="line"><span class="keyword">var</span> first = fruits.shift(); <span class="comment">// remove Apple from the front</span></span><br><span class="line"><span class="comment">// first: &quot;Apple&quot;; fruits: [&quot;Banana&quot;];</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加元素到数组的头部</span></span><br><span class="line"><span class="keyword">var</span> newLength = fruits.unshift(<span class="string">&#x27;Strawberry&#x27;</span>) <span class="comment">// add to the front</span></span><br><span class="line"><span class="comment">// [&quot;Strawberry&quot;, &quot;Banana&quot;];</span></span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找出某个元素在数组中的索引</span></span><br><span class="line">fruits.push(<span class="string">&#x27;Mango&#x27;</span>);</span><br><span class="line"><span class="comment">// [&quot;Strawberry&quot;, &quot;Banana&quot;, &quot;Mango&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pos = fruits.indexOf(<span class="string">&#x27;Banana&#x27;</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="splice-pos-1"><a href="#splice-pos-1" class="headerlink" title="splice(pos,1)"></a>splice(pos,1)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过索引删除某个元素</span></span><br><span class="line"><span class="keyword">var</span> removedItem = fruits.splice(pos, <span class="number">1</span>); <span class="comment">// this is how to remove an item</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [&quot;Strawberry&quot;, &quot;Mango&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="splice-pos-n"><a href="#splice-pos-n" class="headerlink" title="splice(pos,n)"></a>splice(pos,n)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从一个索引位置删除多个元素</span></span><br><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">&#x27;Cabbage&#x27;</span>, <span class="string">&#x27;Turnip&#x27;</span>, <span class="string">&#x27;Radish&#x27;</span>, <span class="string">&#x27;Carrot&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(vegetables);</span><br><span class="line"><span class="comment">// [&quot;Cabbage&quot;, &quot;Turnip&quot;, &quot;Radish&quot;, &quot;Carrot&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pos = <span class="number">1</span>, n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removedItems = vegetables.splice(pos, n);</span><br><span class="line"><span class="comment">// this is how to remove items, n defines the number of items to be removed,</span></span><br><span class="line"><span class="comment">// from that position(pos) onward to the end of array.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vegetables);</span><br><span class="line"><span class="comment">// [&quot;Cabbage&quot;, &quot;Carrot&quot;] (the original array is changed)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(removedItems);</span><br><span class="line"><span class="comment">// [&quot;Turnip&quot;, &quot;Radish&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="splice-pos-n-addItem"><a href="#splice-pos-n-addItem" class="headerlink" title="splice(pos, n , addItem)"></a>splice(pos, n , addItem)</h4><p>addItem: 要添加进数组的元素,从start位置开始。如果不指定，则 <code>splice()</code> 将只删除数组元素。</p><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复制一个数组</span></span><br><span class="line"><span class="keyword">var</span> shallowCopy = fruits.slice(); <span class="comment">// this is how to make a copy</span></span><br><span class="line"><span class="comment">// [&quot;Strawberry&quot;, &quot;Mango&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array filter()"></a>Array filter()</h4><p>获取两个数组的交集/并集/补集/差集</p><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p><code>array.filter(function(currentValue,index,arr), thisValue)</code></p><p><em>function(currentValue, index,arr)</em> :必须。函数，数组中的每个元素都会执行这个函数</p><p><em>thisValue</em>: 可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">      arr2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersection = arr1.filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> arr2.indexOf(val) &gt; -<span class="number">1</span> &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = arr1.concat(arr2.filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> !(arr1.indexOf(val) &gt; -<span class="number">1</span>) &#125;))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 补集 两个数组各自没有的集合</span></span><br><span class="line"><span class="keyword">let</span> complement = arr1.filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> !(arr2.indexOf(val) &gt; -<span class="number">1</span>) &#125;)</span><br><span class="line">.concat(arr2.filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> !(arr1.indexOf(val) &gt; -<span class="number">1</span>) &#125;))</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 差集 数组arr1相对于arr2所没有的</span></span><br><span class="line"><span class="keyword">let</span> diff = arr1.filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> arr2.indexOf(val) === -<span class="number">1</span> &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1: &#x27;</span>, arr1);<span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2: &#x27;</span>, arr2);<span class="comment">//[5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;交集&#x27;</span>, intersection);<span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;并集&#x27;</span>, union);<span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;补集&#x27;</span>, complement);<span class="comment">//[1, 2, 3, 4, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;差集&#x27;</span>, diff);<span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from()</a></p><p>语法：<code>Array.from(arrayLike[, mapFn[, thisArg]])</code></p><p>arrayLike:想要转换成数组的<em>伪数组对象</em>或<em>可迭代对象</em>。(String , Set , Map, arguments)</p><p>mapFn: 如果指定了该参数，新数组中的每个元素会执行该回调函数。(箭头函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组去重+合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [].concat.apply([], <span class="built_in">arguments</span>);  <span class="comment">//没有去重复的新数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], n = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(combine(m,n));                     <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="Array-sort"><a href="#Array-sort" class="headerlink" title="Array.sort()"></a>Array.sort()</h4><p><code>arrayObject.sort(sortby)</code>    <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.sort()</a></p><p>语法：<code>arr.sort([compareFunction])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h4><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p><p>可以用来做属性转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组扁平化</span></span><br><span class="line"><span class="comment">//数组拆解: flat: [1,[2,3]] --&gt; [1, 2, 3]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.flat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toString().split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> +item )<span class="comment">//不map的话是字符串，不是数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Learning-Sorting-Algorithm"><a href="#Learning-Sorting-Algorithm" class="headerlink" title="Learning Sorting Algorithm"></a>Learning Sorting Algorithm</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>最普通的排序算法， 从数组下标1开始每增1项排序一次，越往后遍历次数越多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort1</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = array.length;</span><br><span class="line">    <span class="keyword">var</span> i, j, tmp, result;</span><br><span class="line">    </span><br><span class="line">    result = array.slice(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params">i = <span class="number">1</span>; i &lt;len ;i++</span>)</span>&#123;</span><br><span class="line">        tmp = result[i];</span><br><span class="line">        j = i-<span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="title">while</span>(<span class="params">j&gt;=<span class="number">0</span>&amp;&amp;tmp&lt;result[j]</span>)</span>&#123;</span><br><span class="line">            result[j+<span class="number">1</span>] = result[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        result[j+<span class="number">1</span>] = tmp;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h3><p><strong>插入排序</strong>的一种优化实现， 通过<strong>二分法</strong>减少遍历时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先在有序区通过二分查找的方法找到移动元素的起始位置，</span></span><br><span class="line"><span class="comment">// 然后通过这个起始位置将后面所有的元素后移</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort2</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = array.length,</span><br><span class="line">      i, j, tmp, low, high, mid, result;</span><br><span class="line">  <span class="comment">// 赋予数组副本</span></span><br><span class="line">  result = array.slice(<span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params">i = <span class="number">1</span>; i &lt; len; i++</span>)</span>&#123;</span><br><span class="line">    tmp = result[i];</span><br><span class="line">    low = <span class="number">0</span>;</span><br><span class="line">    high = i - <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">while</span>(<span class="params">low &lt;= high</span>)</span>&#123;</span><br><span class="line">      mid = <span class="built_in">parseInt</span>((low + high)/<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span>(tmp &lt; result[mid]) high = mid - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="comment">//比普通插入排序多个检测low mid high</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params">j = i - <span class="number">1</span>; j &gt;= high+<span class="number">1</span>; j--</span>)</span>&#123;</span><br><span class="line">      result[j+<span class="number">1</span>] = result[j];            </span><br><span class="line">    &#125;</span><br><span class="line">    result[j+<span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序 每次将最小元素推至最前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort4</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = array.length,</span><br><span class="line">  i, j, tmp, result;</span><br><span class="line">  result = array.slice(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (result[j] &lt; result[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        tmp = result[j - <span class="number">1</span>];</span><br><span class="line">        result[j - <span class="number">1</span>] = result[j];</span><br><span class="line">        result[j] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Quicksort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;刷题！&lt;/p&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="打工" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%89%93%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>大学期间的一些PS作品小合集</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/04/01/%E5%A4%A7%E5%AD%A6%E6%9C%9F%E9%97%B4%E7%9A%84%E4%B8%80%E4%BA%9BPS%E4%BD%9C%E5%93%81%E5%B0%8F%E5%90%88%E9%9B%86/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/04/01/%E5%A4%A7%E5%AD%A6%E6%9C%9F%E9%97%B4%E7%9A%84%E4%B8%80%E4%BA%9BPS%E4%BD%9C%E5%93%81%E5%B0%8F%E5%90%88%E9%9B%86/</id>
    <published>2021-04-01T11:53:05.000Z</published>
    <updated>2021-04-01T12:14:43.989Z</updated>
    
    <content type="html"><![CDATA[<p>大学期间在各个奇怪的小组织都待过一段小时间，不知不觉也帮各种小组织做过一些海报易拉宝之类的东西，<del>因为电脑存储空间过小</del>，现在整理一下搞到线上来~</p><a id="more"></a><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;大学期间在各个奇怪的小组织都待过一段小时间，不知不觉也帮各种小组织做过一些海报易拉宝之类的东西，&lt;del&gt;因为电脑存储空间过小&lt;/del&gt;，现在整理一下搞到线上来~&lt;/p&gt;</summary>
    
    
    
    
    <category term="我的项目" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="日常生活" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>2020突发奇想--Hexo+github+NexT个人博客搭建</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/03/30/2020%E7%AA%81%E5%8F%91%E5%A5%87%E6%83%B3-Hexo-github-NexT%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/03/30/2020%E7%AA%81%E5%8F%91%E5%A5%87%E6%83%B3-Hexo-github-NexT%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2021-03-30T14:24:18.000Z</published>
    <updated>2021-03-30T14:25:56.721Z</updated>
    
    <content type="html"><![CDATA[<p>开坑，记录我的博客是怎样<del>从入门到放弃</del>一步步搭建起来的~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开坑，记录我的博客是怎样&lt;del&gt;从入门到放弃&lt;/del&gt;一步步搭建起来的~&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="我的项目" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来看我的碎碎念!</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/03/26/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E7%9C%8B%E6%88%91%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/03/26/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E7%9C%8B%E6%88%91%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2021-03-26T01:44:44.000Z</published>
    <updated>2021-03-28T02:17:48.373Z</updated>
    
    <content type="html"><![CDATA[<p>你好！这里是一个普普通通的大学生的个人博客！我来自<del>明光村职业技术学校</del>，是一个只会说襄阳方言的武汉人，本博客内可能含有：</p><ul><li>我的大学课程与各类网课的学习笔记</li><li>我的各类项目经历</li><li>我的外语学习笔记</li><li>我的生活琐碎杂事杂记</li><li>一切我可能感兴趣的或者可能帮助到我的东西</li><li><del>二次元含量和一些发在公共平台上会被封号的小说</del></li></ul><p>本人高中时期最向往的两个专业第一个是外语（理科生想学法语有错吗！），第二个是建筑，结果最后两个都没学成，来到了北邮，当个了半吊子程序员，但误打误撞还蛮喜欢的。大学四年摸鱼过去了两年半，我发现自己是个喜欢创造胜过喜欢原理的人，比起去思考某个工具的运作原理，我可能更倾向于去思考这个工具能做出什么，实现什么，能优化或者解决什么问题。再加上自认审美和品味还不错（除了衣品和谈恋爱的品味），现在在向着成为一名能派上用场的前端程序员的目标而努力~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你好！这里是一个普普通通的大学生的个人博客！我来自&lt;del&gt;明光村职业技术学校&lt;/del&gt;，是一个只会说襄阳方言的武汉人，本博客内可能含有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的大学课程与各类网课的学习笔记&lt;/li&gt;
&lt;li&gt;我的各类项目经历&lt;/li&gt;
&lt;li&gt;我的外语学习笔记&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020暑假的虎牙小程序开发大赛--Emojito.live的诞生</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/03/17/2020%E6%9A%91%E5%81%87%E7%9A%84%E8%99%8E%E7%89%99%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%A4%A7%E8%B5%9B-Emojito-live%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/03/17/2020%E6%9A%91%E5%81%87%E7%9A%84%E8%99%8E%E7%89%99%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%A4%A7%E8%B5%9B-Emojito-live%E7%9A%84%E8%AF%9E%E7%94%9F/</id>
    <published>2021-03-16T16:19:11.000Z</published>
    <updated>2021-03-16T16:28:10.581Z</updated>
    
    <content type="html"><![CDATA[<p>开坑+1，不开坑的话我觉得我肯定就懒得写了。</p><p>很有趣的一个项目，因为抱上了编程大佬诺神的大腿，还稀里糊涂地让特别贴心和温暖的央语学妹当了队长，包揽了所有除编程外的各类比赛事项，所以整个项目过程中我基本就是从开头划水划到最后，真是愧为学姐。不过这个项目是我第一个得以上线试验过的项目（虽然没有得到投入使用的机会），在这点上，比起以前的纸上谈兵项目（比如大作业那个只能在自己本地电脑上运行起来的电商购物网站），这个项目值得一提的程度就变得非常高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开坑+1，不开坑的话我觉得我肯定就懒得写了。&lt;/p&gt;
&lt;p&gt;很有趣的一个项目，因为抱上了编程大佬诺神的大腿，还稀里糊涂地让特别贴心和温暖的央语学妹当了队长，包揽了所有除编程外的各类比赛事项，所以整个项目过程中我基本就是从开头划水划到最后，真是愧为学姐。不过这个项目是我第一个</summary>
      
    
    
    
    
    <category term="我的项目" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2020小学期--由古老的servlet+jsp+HTML技术构成的购物网站</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/03/17/2020%E5%B0%8F%E5%AD%A6%E6%9C%9F-%E7%94%B1%E5%8F%A4%E8%80%81%E7%9A%84servlet-jsp-HTML%E6%8A%80%E6%9C%AF%E6%9E%84%E6%88%90%E7%9A%84%E8%B4%AD%E7%89%A9%E7%BD%91%E7%AB%99/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/03/17/2020%E5%B0%8F%E5%AD%A6%E6%9C%9F-%E7%94%B1%E5%8F%A4%E8%80%81%E7%9A%84servlet-jsp-HTML%E6%8A%80%E6%9C%AF%E6%9E%84%E6%88%90%E7%9A%84%E8%B4%AD%E7%89%A9%E7%BD%91%E7%AB%99/</id>
    <published>2021-03-16T16:06:16.000Z</published>
    <updated>2021-04-24T10:40:58.843Z</updated>
    
    <content type="html"><![CDATA[<p>开个坑，等托福考完再回来写，隔壁北科的高中同学这学期有个作业也要写购物网站，为了帮他写作业（我真是带好人）所以这几天把工程文件都翻了出来，刚好这学期把博客开起来了，那就来记录记录我的第一个充斥着血汗泪水和菜鸡技术的编程项目。</p><hr><p>总算是考完了托福首考……考完感觉人都升华了……那么现在开始写博客。</p><p>2020年是很不平凡的一年，因为新冠的原因，我的整个大二下学期都是在家里度过的，在自己房间里上学校的网课是什么效果懂的都懂，所以我名正言顺地摸了一个学期的鱼，连最后的期末都是线上考试，让我的期末周也过得像摸鱼，如果说要在这摸鱼的半年里选一件最累的事，可能就是这个小学期吧。期末刚考完没几天，我们被拉进一个叫做”design and building”的群聊，开始在李晶老师的指导下零基础学习Javaweb网页开发以及标题提到的java pages, servlet, JavaScript, HTML和CSS等等技术。</p><a id="more"></a><hr><h2 id="开头：胡乱摸索的一个星期"><a href="#开头：胡乱摸索的一个星期" class="headerlink" title="开头：胡乱摸索的一个星期"></a>开头：胡乱摸索的一个星期</h2><p>第一节课是熟悉的装环境搞配置，在大二的时候我们只开了java编程课，大部分人电脑里用的编译器都是eclipse（我发现自己依然不记得这个词怎么拼，醉了），但是老师说，如果要开发，用IDEA是个更好的选择，于是开始上课的第一天，我们组的三个小白花了半个上午去下载盗版IDEA。事实证明这是个很值得的事，因为<strong>用了IDEA才知道IDEA多好用</strong>，当用eclipse的同学在为集成数据库捣鼓的时候，在IDEA里只需要点一下右边的一小排，使用体验非常良好。</p><p>除了编译器，第一节还教了<strong>Tomcat</strong>的下载和使用，啊，localhost8080，我命运般的8080，你不知道我开始那几天为你受了多少苦.jpg。老师在群里放了两个网页开发的小例子，大概就是输入用户名，输入密码，点击登录，跳转界面，很简单的几个步骤，我捣鼓了两天硬是没跑起来，IDEA的properties的设置没调好，jdbc的密码没改等等现在看起来很弱智的问题当时每一个都让人很头大，对着各种CSDN和博客园调整了很久，最后终于成功能在输入用户名和密码时跳转到另外一个界面。很难形容当时的欣喜心情，这个要是写起来就有点长了，在此略过。</p><p>配完环境的第一步工作是确认需要做些什么网页。老师给的官方建议是仨人分俩去写后端，还有一个去写（套）前（模）端（板），我是俩后端之一，主要负责三个大的页面的后台逻辑：<strong>商品的列表展示、详细信息查看和添加购物车；购物车的生成和内容删改；以及订单的生成、管理、列表展示和详细信息查看</strong>。三个页面的关系非常紧密，于是我从商品的列表展示，购物网站最基本的功能之一开始做起了。我们的整体架构完全是照着老师给的那个登陆的例子抄的（没有一丝更高端一点的东西），分了三层和一个工具包：</p><p><strong>dao层用来放各种操作的函数，entity层用来放各种实体，servlet层用来根据页面传回来的method值判断需要实现的功能，util里存了各个层都能用的用来连接和关闭数据库的方法。</strong>（你以为我的util层里会有md5之类的加密手段别的高端操作吗，并没有，只有单纯的连接和关闭数据库，够纯）</p><p><img src="http://i2.tiimg.com/734918/de54d7d5ba1383f3.png"></p><p>小学期的作业是分两次验收的，第一次就是这一周“速成”后马上验收一次，第二次是下个学期开学时整体作品验收。在“速成”阶段验收的时候，上图所列出来的各大.java文件我有五分之四都是空的，写了东西并且能用的只有<strong>ProductDao, Product, ProductServlet和ConnectDB</strong>，是的，手忙脚乱的一个星期过后，我实现的功能只有商品展示，商品详细信息展示，商品的模糊搜索，商品的排序。</p><p><img src="http://i1.fuimg.com/734918/64b765f0146bf3eb.png" alt="中期验收的报告"></p><p>（现在看当时的实验报告真是公开处刑）</p><p>我（没几步的）工作步骤是：</p><ol><li>按老师给的要求（顺便砍掉几个不好写的）建立数据库的表，随便编几个数据；</li><li>在entity里写product，把数据库表里的东西都一一对应进去；</li><li>在dao里写需要用到的函数，把需要的商品信息装进ArrayList（几个函数不一样的地方只有那句executeQuery里的MySQL语句）;</li><li>让servlet得到ArrayList，然后在response里传入新建的product.jsp页面；</li><li>在jsp页面里用for循环逐个打印。</li></ol><p><img src="http://i2.tiimg.com/734918/1f52248c3aa955ab.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开个坑，等托福考完再回来写，隔壁北科的高中同学这学期有个作业也要写购物网站，为了帮他写作业（我真是带好人）所以这几天把工程文件都翻了出来，刚好这学期把博客开起来了，那就来记录记录我的第一个充斥着血汗泪水和菜鸡技术的编程项目。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总算是考完了托福首考……考完感觉人都升华了……那么现在开始写博客。&lt;/p&gt;
&lt;p&gt;2020年是很不平凡的一年，因为新冠的原因，我的整个大二下学期都是在家里度过的，在自己房间里上学校的网课是什么效果懂的都懂，所以我名正言顺地摸了一个学期的鱼，连最后的期末都是线上考试，让我的期末周也过得像摸鱼，如果说要在这摸鱼的半年里选一件最累的事，可能就是这个小学期吧。期末刚考完没几天，我们被拉进一个叫做”design and building”的群聊，开始在李晶老师的指导下零基础学习Javaweb网页开发以及标题提到的java pages, servlet, JavaScript, HTML和CSS等等技术。&lt;/p&gt;</summary>
    
    
    
    
    <category term="我的项目" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Web前端基础学习————大三上高级网络程序设计笔记</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/03/10/Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/03/10/Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-10T09:04:35.000Z</published>
    <updated>2021-04-28T16:02:05.087Z</updated>
    
    <content type="html"><![CDATA[<p>一个网页：结构+表现+行为</p><p>HTML=结构</p><p>CSS=表现</p><p>JavaScript=行为</p><a id="more"></a><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p style="font-size: 20px;font-weight: bold; ">HTML——语义化标签</p><p>&lt;h1&gt;到&lt;h6&gt;： 标题，重要程度由高到低</p><p>&lt;p&gt;：段落</p><p>&lt;em&gt;：语调加重</p><p>&lt;strong&gt;：强调</p><p>&lt;blockquote&gt;：长引用</p><p>&lt;q&gt;：短引用</p><br><p><strong>块元素    block element</strong></p><p>在网页中一般通过块元素来对页面进行布局 </p><p><strong>行内元素    inline element</strong></p><p>主要用来包裹文字</p><br><ul><li>一般会在块元素中放行内元素，不会在行内元素中放块元素</li><li>块元素中基本什么都能放</li><li>p元素中不能放任何块元素</li></ul><br><p>浏览器在解析网页时，会自动对网页中不合规范的内容进行修正：标签写在根元素外部；p元素中嵌套了块元素；根元素中出现了除head和body以外的子元素</p><br><p><strong>布局标签</strong></p><p>head 网页头部；main 网页主题（一个页面中只有一个main）；footer 网页底部；nav 网页导航；aside 和主体相关的其他内容（侧边栏）；article 独立文章；section 独立区块，以上标签都不能用时使用section</p><p>div 没有语义，用来表示区块，主要布局元素</p><p>span 没有语义，行内元素，一般用于在网页中选中文字</p><p>并不带样式，只是代表区块，样式由CSS提供</p><p><strong>超链接</strong></p><p>&lt;a href=” “ target=” “&gt;    &lt;/a&gt;</p><ul><li>target的值：<ul><li>_self默认值，在当前界面打开超链接；</li><li>_blank在一个新的页面中打开超链接</li></ul></li></ul><p> &lt;a href=”#bottom”&gt;跳到底部&lt;/a&gt;</p><p>&lt;a id=”bottom” href=”#”&gt;底部；回到顶部&lt;/a&gt;</p><p>&lt;a href=”javascript:;”&gt;什么也不会发生&lt;/a&gt;</p><p><strong>图片标签</strong></p><p>向当前页面中引入一个外部图片，</p><p>&lt;img src=”” alt=””&gt;    自结束标签，替换元素</p><p>src: 路径，路径规则和超链接相同（./和../）</p><p>alt: 图片的描述，默认情况下不显示，有些浏览器会在图片无法加载时显示，搜索引擎会根据alt中的内容来识别图片</p><p>width: 图片的宽度（单位为像素）</p><p>height: 图片的高度（如果宽度和高度只修改了一个，则另一个会等比例缩放）</p><p><strong>内联框架</strong></p><p>向当前界面引入一个其他页面</p><p>&lt;iframe src=”要引入的网页的路径” width=”” height=”” frameborder=””&gt;</p><p>&lt;/iframe&gt;</p><p><strong>音视频</strong></p><p>&lt;audio src=”” controls autoplay loop &gt;</p><p>&lt;video src=”” controls autoplay loop &gt;</p><p>不支持audio和video标签的：ie8及往前的浏览器，可以用&lt;embed&gt;，但会自动播放且需要设置width和height</p><hr><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p style="font-size: 20px;font-weight: bold; ">CSS--层叠式样式</p><p>CSS用来设置网页中元素的样式</p><ol><li><p>内联样式，行内样式： 在标签内部通过style属性来设置元素的样式</p><p>&lt;p style=”color:red; font-size:60px; “&gt; XXXX &lt;/p&gt;</p><p>样式只能对一个标签生效，如果希望影响多个元素就需要每个都复制一遍，且样式发生变化时需要逐个修改，开发时不使用</p></li><li><p>内部样式表：将样式编写在head的style中</p><p>&lt;style&gt;</p><p>​    p{</p><p>​            color:red; </p><p>​            font-size:60px;</p><p>​        }</p><p>&lt;/style&gt;</p><p>可以同时对多个标签设置样式，只能对一个网页起作用，样式不能跨页面复用</p></li><li><p>外部样式表：写在外部CSS文件中，通过link标签引入</p><p>&lt;link rel=”stylesheet” href=”./style.css”&gt;</p><p>style.css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同页面中都可以实现复用</p><p>可以使用浏览器的缓存机制，加快加载速度，提高用户体验</p></li></ol><h3 id="CSS基本语法"><a href="#CSS基本语法" class="headerlink" title="CSS基本语法"></a>CSS基本语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CSS中的注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选择器+生成块：</p><ul><li>选择器：选中页面中的指定元素</li><li>生成块：为元素设定的样式，名值对结构，一个样式名对应一个样式值，名和值用:连接，用;结尾</li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ol><li><p>元素选择器</p><p>作用：根据标签名来选中指定元素</p><p>语法：标签名{}</p><p>例子：p{}, h1{}, div{}</p></li><li><p>id选择器</p><p>作用：根据元素的id属性值选中一个元素</p><p>语法：#id属性值{}</p><p>例子：#box{}， #red{}</p></li><li><p>类选择器/class选择器</p><p>作用：根据元素的class属性选中一组元素，可以为一个元素指定多个class，中间用空格隔开</p><p>语法：.class属性值</p></li><li><p>通配选择器</p><p>作用：选中页面中的所有元素</p><p>语法：*{}</p></li><li><p>交集选择器</p><p>作用：选中同时符合多个条件的元素</p><p>语法：选择器1选择器2选择器3{}</p><p>例子：div.red{}（是div标签且是red的class）</p><p>注意：交集选择器中如果有元素选择器，必须用元素选择器开头</p></li><li><p>并集选择器</p><p>作用：同时选择多个选择器对应的元素</p><p>语法：选择器1,选择器2,选择器3{}</p></li><li><p>关系选择器</p><p>父元素：直接包含子元素的元素</p><p>子元素：直接被父元素包含的元素</p><p>祖先元素：直接或间接包含后代的元素（包括父元素）</p><p>后代元素：直接或间接被祖先包含的元素（包括子元素）</p><p>兄弟元素：拥有相同父元素的元素</p><p>子元素选择器</p><p>​    作用：选择指定父元素的指定子元素</p><p>​    语法：父元素 ＞ 子元素{}</p><p>​    例子：div&gt;span{}（div标签里的子元素span标签）</p><p>后代元素选择器</p><p>​    作用：选择指定元素内的指定后代元素</p><p>​    语法：祖先 后代</p><p>​    例子：div span{}（div标签里的后代span标签）</p><p>选择下一个兄弟</p><p>​    作用：找最近的下一个兄弟元素</p><p>​    语法：前一个 + 下一个</p><p>​    例子：p + span{}（紧挨着p的一个兄弟元素span）</p><p>选择下面所有的兄弟元素</p><p>​    作用：选择下面所有的兄弟元素</p><p>​    语法：前一个~下一个</p><p>​    例子：p~span{}（p后面所有的兄弟元素span）</p></li><li><p>属性选择器</p><p>作用：选择含有指定属性的元素</p><p>语法：[属性名]    </p><p>​            [属性名-属性值]（指定属性和属性值）</p><p>​            [属性名^=属性值] （指定属性，且属性值以指定值开头）</p><p>​            [属性名$=属性值] （指定属性，且属性值以指定值结尾）</p><p>​            [属性名*=属性值] （指定属性，且属性值含有指定值）</p></li><li><p>伪类</p><p>不存在的类，用来描述一个元素的特殊状态</p><p>例如：第一个子元素，被点击的元素，鼠标移入的元素</p><p>一般情况下都是使用:开头</p><p>:first-child 第一个子元素（父元素中的第一个子元素）</p><p>:last-child 最后一个子元素</p><p>:nth-child() 选中第n个子元素</p><p>​    nth-child(2)指第二个子元素，nth-child(n)指0到正无穷个，nth-child(2n)选中偶数位，nth-child(odd)选中奇数位</p><p>:first-of-type  第一个子元素（同类型）（父元素中的第一个X类型元素→X:first-of-type）</p><p>:last-of-type</p><p>:nth-of-type()</p><p>:not() 否定伪类，将符合条件的元素从选择器中去除（:not(:nth-of-type(2))</p></li><li><p>超链接伪类</p><p>a:link 没有访问过的链接（正常的链接）</p><p>a:visited 访问过的链接（由于隐私原因，只能修改颜色）</p><p>a:hover 鼠标移入的状态</p><p>a:active鼠标点击</p></li><li><p>伪元素选择器</p><p>并不真实存在的元素（特殊的位置）</p><p>使用::开头</p><p>::first-letter 第一个字母</p><p>::first-line 第一行</p><p>::selection 选中的内容</p><p>::before 元素的开始位置</p><p>::after 元素的最后（before和after必须结合content属性）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在div标签的内容前面用css添加红色的abc文字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（短引用的标签&lt;q&gt;使用的也是伪元素原则器before和after)</p></li><li><p>继承inherited</p><p>样式的继承发生在祖先后代之间，利用集成可以把通用样式设置到共同的祖先元素上，这样所有元素都会具有该样式。并非所有样式都会被继承，比如背景相关的或者布局相关的</p></li><li><p>选择器的权重</p><p>样式有冲突时，由选择器权重决定</p><p>内联样式，id选择器，类和伪类选择器，元素选择器，通配选择器，继承的样式</p><p>比较优先级时，需要将所有选择器的优先级进行相加计算，最后优先值越高越优先显示。</p><p>选择器累加不会超过最大数量级</p><p>如果优先级计算后相同，优先使用靠下的样式</p><p>可以在某一个样式后面添加!important， 则该样式获得最高的优先级，超过内联样式</p></li></ol><h3 id="像素与百分比"><a href="#像素与百分比" class="headerlink" title="像素与百分比"></a>像素与百分比</h3><p>长度单位：</p><p>像素（同样的200px在不同设备下显示效果不一样）</p><p>百分比：将属性值设置为相对于父元素属性的百分比，设置百分比可以使子元素跟随父元素的改变而改变</p><p>em：相对于元素的字体大小来计算，1em=1font-size，em会根据字体的大小的改变而改变</p><p>rem：相对于根元素的字体大小来计算（移动端适配用到多）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            html&#123;</span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">                width: 10rem;</span><br><span class="line">                height: 10rem;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/*此时，像素为300px x 300px的红色box被画出 → rem*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:10em</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span><span class="selector-pseudo">:10em</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*此时，像素为200px x 200px的蓝色box被画出 → em*/</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>在CSS中可以直接使用颜色名来设置各种颜色，如red，blue，yellow，green等</p><ul><li><p>RGB值：通过三种颜色的不同浓度来调配出不同的颜色，每种颜色的范围在0-255之间</p><p>语法：RGB(红色,绿色,蓝色)         </p><p>background-color: rgb(255,0,0) </p><p>三个值都是0=白色，三个值都是255=黑色</p></li><li><p>RGBA(红色,绿色,蓝色,不透明度)，1表示完全不透明，0表示完全透明</p></li><li><p>十六进制RGB值：#红色绿色蓝色</p><p>范围00-ff</p><p>如果颜色两位两位重复可以进行简写：#ffff00 = #ff0</p></li><li><p>HSL值</p><p>H 色相（0-360），S 饱和度（0%-100%）， L 亮度（0%-100%）</p></li></ul><hr><h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><h3 id="文档流normal-flow"><a href="#文档流normal-flow" class="headerlink" title="文档流normal flow"></a>文档流normal flow</h3><p>网页是多层结构，通过css可以分别为每一层来设置样式，作为用户来讲只能看到最顶上一层</p><p><strong>最底下一层为文档流，是网页的基础</strong>，我们所创建的元素默认都是在文档流中进行排列</p><p>元素主要有两个状态：在文档流中；不在文档流中（脱离文档流）</p><p>元素在文档流中有什么特点</p><ul><li>块元素<ul><li>块元素会在页面中独占一行（自伤向下垂直排列）</li><li>默认宽度是父元素的全部（把父元素撑满）</li><li>默认高度是被内容撑开（子元素）</li></ul></li><li>行内元素<ul><li>不会占页面一行，只占自身大小</li><li>从左到右水平排列，如果一行之中不能容纳所有行内元素，则元素会换行继续从左向右排列</li><li>默认宽度和高度都是被内容撑开</li></ul></li></ul><h3 id="盒模型-box-model"><a href="#盒模型-box-model" class="headerlink" title="盒模型 box model"></a>盒模型 box model</h3><p>CSS将页面中的所有元素都设置成了一个矩形的盒子</p><p>将元素设置为矩形的盒子后，对页面的布局就变成了将不同的盒子摆放到不同的位置</p><p>每一个盒子都由以下几个部分组成：</p><ul><li>内容区（content）</li><li>内边距（padding）</li><li>边框（border）</li><li>外边距（margin）</li></ul><h4 id="内容区content"><a href="#内容区content" class="headerlink" title="内容区content"></a>内容区content</h4><p>元素中的所有子元素和文本内容都在内容区中排列</p><p>大小由width和height两个属性来设置</p><h4 id="内边距padding"><a href="#内边距padding" class="headerlink" title="内边距padding"></a>内边距padding</h4><p>内容区与边框之间的距离是内边距</p><p>一共四个方向</p><p>padding-top</p><p>padding-right</p><p>padding-bottom</p><p>padding-left</p><p>也可以用padding: Xpx, Xpx, Xpx, Xpx来指定四个方向</p><p>内边距的设置会影响到盒子的大小</p><p>背景颜色会延伸到内边距上</p><p>一个盒子的可见框的大小，由内容区，内边距和边框共同决定，计算盒子大小时，需要三个区域加到一起计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">padding-top</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span>......<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这里是黄色的内容区，inner充满了内容区（因为100%）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h4><p>属于盒子边缘，边框里面属于盒子内部，出了边框就是盒子外部</p><p>要至少设置三个样式：宽度border-width， 颜色border-color，样式border-style</p><p>边框的大小会影响整个盒子的大小</p><p><strong>border-width</strong></p><ul><li>默认值一般为3px</li><li>可以用来指定四个方向的边框的宽度</li><li>值的情况：<ul><li>四个值：上 右 下 左</li><li>三个值：上 左右 下</li><li>两个值：上下 左右</li><li>一个值：上下左右</li></ul></li><li>除了border-width，还可以用border-XXX-width，XXX：top,right,bottom,left，可以单独指定某一个边的宽度</li></ul><p><strong>border-color</strong></p><ul><li>也可以分别指定四个边的颜色，顺序和width一样</li><li>也可以省略不写，如果省略则自动使用color的颜色</li></ul><p><strong>border-style</strong></p><ul><li>solid表示实线</li><li>dotted 点状虚线</li><li>dashed 虚线</li><li>double 双线</li><li>可分别四个，一样</li><li>默认值是none，表示没有边框</li></ul><p><strong>border简写属性</strong></p><p>border: 10px orange solid;</p><p>border-right: none;（其他三个边都是10px的橙色实线，右边是none）</p><p>除了border还有border-xxx（xxx=top，right，bottom，left）</p><h4 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距 margin"></a>外边距 margin</h4><p>不会影响盒子可见框的大小，但是外边距会影响盒子的位置</p><p>一共有四个方向的外边距</p><p>margin-top：上外边距，设置一个正值，元素会向下移动</p><p>margin-right：默认情况下不会产生任何效果</p><p>margin-bottom：其下面的元素回向下移动</p><p>margin-left：…………元素会向右移动</p><p>简写属性：可以同时设置四个方向的外边距（margin:100px)</p><p>元素在页面中是按照从左向右的顺序排序的，所以默认情况下如果我们设置的<strong>左和上</strong>外边距会移动<strong>元素自身</strong>，而设置<strong>下和右</strong>外边距会移动<strong>其他元素</strong></p><p>margin可以设置为负值，元素会向相反的方向移动</p><p>margin会影响盒子的实际占用空间</p><h3 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h3><p>元素水平方向的布局：</p><p>元素在其父元素中水平方向的位置由以下几个属性共同决定</p><ul><li>margin-left</li><li>border-left</li><li>padding-left</li><li>width</li><li>padding-right</li><li>border-right</li><li>margin-right</li></ul><p>一个元素在其父元素中，水平布局必须要满足以下的等式</p><p>margin-left+border-left+padding-left+width+padding-right+border-right+margin-right=父元素内容区的宽度</p><p>如果相加结果使等式不成立，则成为过度约束，等式会自动调整</p><p>如果所有值没有为auto的情况，则浏览器会自动调整margin-right值以使等式成立</p><p>这7个值中有三个的值可以设置为auto：width，margin-left，margin-right</p><ul><li><p>如果某个值为auto，则会自动调整auto的值使等式成立（width的值默认就是auto）</p></li><li><p>如果将一个宽度和一个外边距设置为auto，则宽度会调节到最大，外边距=0</p></li><li><p>如果三个值都设置为auto，则外边距都是0，宽度调节到最大</p></li><li><p>如果将两个外边距设置为auto，宽度设置为固定值，则两边外边距会设置成相同的值，所以经常利用这个特点来让一个元素在其父元素中<strong>水平居中</strong></p><p>例：</p><p>​    width: xxxpx</p><p>​    margin:0, auto（上下，左右）</p></li></ul><h3 id="盒子的垂直布局"><a href="#盒子的垂直布局" class="headerlink" title="盒子的垂直布局"></a>盒子的垂直布局</h3><p>margin-bottom</p><p>垂直方向没有等式</p><p>子元素是在复原的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出</p><p>使用overflow属性来设置父元素如何处理溢出的子元素</p><p>overflow可选值：</p><ul><li>visible，默认值，子元素会从父元素中溢出，在父元素外部的位置显示</li><li>hidden，溢出内容将会被裁剪，不会显示</li><li>scroll，生成<em>两个</em>滚动条，通过滚动条来查看完整的内容</li><li>auto，根据需要生成滚动条</li></ul><p>overflow-x:单独处理水平方向</p><p>overflow-y:单独处理垂直方向</p><h3 id="外边距的折叠"><a href="#外边距的折叠" class="headerlink" title="外边距的折叠"></a>外边距的折叠</h3><p>相邻的垂直方向外边距会发生重叠现象</p><ul><li>兄弟元素<ul><li>兄弟元素之间的相邻垂直外边距会取两者之间较大值（两者都是正值）</li><li>特殊情况：如果相邻外边距一正一负，则取两者的和；如果相邻外边距都是负值，则取绝对值较大的</li><li>兄弟元素之间的外边距的重叠，对开发是有利的，所以不需要处理</li></ul></li><li>父子元素<ul><li>父子元素之间相邻外边距，子元素的会传递给父元素（margin-top）</li><li>父子外边距的折叠会影响到页面的布局，要进行处理（1.别用margin，2.两个外边距隔开，用border隔）</li></ul></li></ul><h3 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h3><p>行内元素不支持设置width和height，不能通过宽高来设置内容区的大小，只由内容决定</p><p>行内元素可以设置padding，但是垂直方向padding不会影响页面布局</p><p>行内元素可以设置border，但垂直方向border不会影响页面布局</p><p>行内元素可以设置margin，但垂直方向margin不会影响页面布局</p><p>display属性，用来设置元素显示的类型</p><p>可选值：</p><ul><li>inline将元素设置为行内元素</li><li>block将元素设置为块元素</li><li>inline-block 将元素设置为<strong>行内块</strong>元素，又可以设置宽高，又不会独占一行</li><li>table 将元素设置为表格</li><li>none 元素不在页面中显示（不占位置）</li></ul><p>visibility属性，用来设置元素的显示状态</p><p>可选值：</p><ul><li>visible默认值，元素在页面中正常显示</li><li>hidden元素在页面中隐藏，不显示，但是依然占据页面的位置</li></ul><h3 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h3><p>通常情况下，浏览器会为元素设置一些默认样式。默认样式的存在会影响到页面的布局，通常情况下编写网页时要去除浏览器的默认样式（PC端的页面）</p><p>用line-style:none可以解除ul的点样式</p><p>因为通常都是margin和padding影响布局，故可以：</p><p>*{</p><p>​    margin:0;</p><p>​    padding:0;</p><p>}</p><p>但这样会不全面</p><p>故可以引入别的.css文件重置样式表（reset.css、normalize.css），专门对浏览器的样式进行重置</p><p>放在style标签之前，以让style标签里写的其他的样式生效</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="京东图片列表"><a href="#京东图片列表" class="headerlink" title="京东图片列表"></a>京东图片列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;reset.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置body的背景颜色 */</span></span></span><br><span class="line">            body&#123;</span><br><span class="line">                background-color: antiquewhite;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置外部ul的样式 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.img-list</span>&#123;</span></span><br><span class="line"><span class="css">                 <span class="comment">/* ul的宽高 */</span></span></span><br><span class="line">                width: 250px;</span><br><span class="line">                height: 600px;</span><br><span class="line"><span class="css">               <span class="comment">/* 裁剪溢出的内容 */</span></span></span><br><span class="line">                overflow: hidden;</span><br><span class="line">                margin: 50px auto;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#f4f4f4</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置标签位置 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.img-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span>&#123;</span></span><br><span class="line">                margin-bottom: 10px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置图片大小 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.img-list</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">img-list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片-练习1/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片-练习1/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片-练习1/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><h4 id="京东左侧导航栏"><a href="#京东左侧导航栏" class="headerlink" title="京东左侧导航栏"></a>京东左侧导航栏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;reset.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置body */</span></span></span><br><span class="line">            body&#123;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.left-menu</span>&#123;</span></span><br><span class="line">                width: 190px;</span><br><span class="line">                height: 450px;</span><br><span class="line">                padding: 10px 0;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="comment">/* 设置菜单内部的item */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.left-menu</span> <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">                height: 25px;</span><br><span class="line">                /*</span><br><span class="line">                要让文字在父元素中垂直居中，只需要将</span><br><span class="line">                父元素的line-height设置为一个跟父元素 </span><br><span class="line">                height相等的值 */</span><br><span class="line">                line-height: 25px;</span><br><span class="line"><span class="css">                <span class="comment">/* 设置item的左内边距，将文字向内移动 */</span></span></span><br><span class="line">                padding-left: 18px ;</span><br><span class="line"><span class="css">                <span class="comment">/* 设置字体大小 */</span></span></span><br><span class="line">                font-size: 12px;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">                <span class="comment">/* 为item设置一个鼠标移入的状态 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#d9d9d9</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/* 设置超链接的样式 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.item</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/*12px的/，14px的字*/</span></span></span><br><span class="line">                font-size: 14px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>:<span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">                <span class="comment">/* 去除下划线 */</span></span></span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">                color: red;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;left-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                家用电器</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>运营商<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>数码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>办公<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>母婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>玩具乐器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213311_f4xqqz.png"></p><h4 id="网易新闻列表"><a href="#网易新闻列表" class="headerlink" title="网易新闻列表"></a>网易新闻列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;reset.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            a&#123;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.news-wrapper</span>&#123;</span></span><br><span class="line">                width: 300px;</span><br><span class="line">                height: 358px;</span><br><span class="line">                background-color: aliceblue;</span><br><span class="line">                margin: 50px auto;</span><br><span class="line"><span class="css">                <span class="selector-tag">border-top</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.news-title</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/*为了边框和文字宽度一致，需要将h2转换为行内块元素*/</span></span></span><br><span class="line">                display: inline-block;</span><br><span class="line">                height: 40px;</span><br><span class="line">                line-height: 40px;</span><br><span class="line">                border-top: 1px solid red;</span><br><span class="line"><span class="css">                <span class="comment">/*通过margin-top将h2上移，盖住上边框*/</span></span></span><br><span class="line">                margin-top: -1px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.news-title</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>:<span class="selector-id">#40406B</span>;</span></span><br><span class="line">                font-weight: bold;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/* 图片容器的高度 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.news-img</span>&#123;</span></span><br><span class="line">                height: 150px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="comment">/* 图片里的文字效果 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.news-img</span> <span class="selector-class">.img-title</span>&#123;</span></span><br><span class="line">                margin-top: -30px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">                font-weight: bold;</span><br><span class="line">                padding-left: 20px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.news-list</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/*设置上外边距和左侧padding*/</span></span></span><br><span class="line"><span class="css">                <span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">                padding-left: 14px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.news-list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">                margin-bottom: 17px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.news-list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">                font-size: 14px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>:<span class="selector-id">#666</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*为每一个li添加项目符号*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.news-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line">                content:&#x27;■&#x27;;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">                font-size: 12px;</span><br><span class="line">                margin-right: 6px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.news-list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--创建一个标题标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;news-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>体育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--创建一个图片的容器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./图片-练习3/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;img-title&quot;</span>&gt;</span>费德勒首负地米 扶额头不满发挥<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新闻列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;news-list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>XXXXXXXX1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>XXXXXXXX2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>XXXXXXXX3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>XXXXXXXX4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213436_ozfxjc.png" alt="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213436_ozfxjc.png"></p><h3 id="盒子模型大小"><a href="#盒子模型大小" class="headerlink" title="盒子模型大小"></a>盒子模型大小</h3><p>box-sizing: 用来设置盒子模型尺寸的计算方式（设置width和height的作用）</p><p>可选值：</p><p>content-box 默认值，宽和高用来设置内容区的大小</p><p>border-box 宽和搞用来设置整个盒子可见框的大小，width和height指的是content+border+padding的总大小</p><h3 id="轮廓和棱角"><a href="#轮廓和棱角" class="headerlink" title="轮廓和棱角"></a>轮廓和棱角</h3><p><strong>outline</strong> 用来设置元素的轮廓线，用法和border一模一样，但不会影响可见框的大小，不影响布局，大多时候用来设置鼠标移到盒子上的时候的效果</p><p><strong>box-shadow</strong> 用来设置元素的阴影效果，阴影不会影响页面布局</p><p>第一个值设置水平偏移量，设置阴影的水平位置，正值向右移动，负值向左移动</p><p>第二个值设置垂直偏移量，设置阴影的垂直位置，正值向下，负值向上</p><p>第三个值阴影的模糊半径</p><p>第四个值设置阴影的颜色（大多时候用rgba(0,0,0,.5)等来表示透明）</p><p>box-shadow: 10px 10px 50px rgba(0,0,0,.3)</p><p><strong>border-radius</strong></p><p>用来设置圆角</p><p>border-top-left-radius</p><p>border-top-right-radius</p><p>border-bottom-left-radius</p><p>border-bottom-right-radius</p><p>格式：</p><p>border-top-left-radius: 10px    半径为10px画圆与壁相切</p><p>border-top-left-radius: 10px / 20px 椭圆，先水平后垂直</p><p>border-radius: 10px 20px 30px 40px 分别指定四个角的圆角，左上，右上，右下，左下</p><p>border-radius: 10px 20px 30px 左上，右上/左下，右下</p><p>border-radius: 10px 20px 左上/右下，右上/左下</p><p>将元素设置为圆形：border-radius: 50%</p><hr><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>通过浮动可以使一个元素向其父元素的左侧或者右侧移动，使用float属性来设置元素的浮动</p><p>可选值：</p><p>none 默认值，不浮动</p><p>left 向左浮动</p><p>right 向右浮动</p><p>元素设置浮动后，水平布局的等式不需要强制成立，且会完全从文档流中脱离，不再占用文档流的位置</p><p>所以元素下面的还在文档流中的元素会自动向上移动</p><p>浮动的特点：</p><ol><li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li><li>设置浮动以后，元素会向父元素的左侧或者右侧移动</li><li>浮动元素默认不会从父元素中移出</li><li>浮动元素向左或向右移动时，不会超过它前面的浮动元素，不会盖住其他的浮动元素（水平方向）</li><li>如果浮动元素上面是一个没有浮动的块元素，则浮动元素无法上移</li><li>浮动元素不会超过它上面的浮动兄弟元素，最多一样高（垂直方向）</li></ol><p>主要作用：让页面中的元素可以水平排列，通过浮动可以制作<strong>水平方向布局</strong></p><p>浮动元素不会盖住<strong>文字</strong>，文字会自动环绕在浮动元素的周围，所以可以利用浮动来设置文字环绕图片的效果</p><p>元素设置浮动以后，将会从文档流中脱离，从文档流中脱离或，元素的一些特点也会发生一些变化</p><p>脱离文档流的特点：</p><ul><li><p>块元素</p><ol><li>块元素不再独占页面的一行</li><li>脱离文档流以后，块元素的宽度和高度默认都会被内容撑开</li></ol></li><li><p>行内元素</p><p>行内元素脱离文档流之后会变成块元素，特点和块元素一样</p></li></ul><p>即脱离文档流后，<strong>不需要区分块和行内</strong></p><h3 id="练习-导航条"><a href="#练习-导航条" class="headerlink" title="练习 导航条"></a>练习 导航条</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;reset.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span>&#123;</span></span><br><span class="line">            width: 1200px;</span><br><span class="line">            height: 48px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#E8E7E3</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">            line-height: 48px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*将a转换为块元素，这样可以点击一整块作为点击超链接的效果*/</span></span></span><br><span class="line">            display: block;</span><br><span class="line">            text-decoration: none;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#777</span>;</span></span><br><span class="line">            font-size: 18px;</span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span> 41<span class="selector-tag">px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3f3f3f</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#e8e7e3</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML/CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Browser Side<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Server Side<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Programming<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>XML<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Web Building<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Reference<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213543_c01oss.png" alt="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213543_c01oss.png"></p><h3 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h3><p>在浮动布局中，父元素<strong>高度</strong>默认被子元素撑开。当子元素<strong>浮动</strong>后，脱离文档流，将无法撑起父元素的高度，导致父元素高度丢失。父元素高度丢失后，其下的元素会自动上移，导致页面的布局混乱。</p><p>高度塌陷是浮动布局中的常见问题：解决方案：BFC+clear</p><h3 id="BFC-Block-Formatting-Context-块级格式化环境"><a href="#BFC-Block-Formatting-Context-块级格式化环境" class="headerlink" title="BFC=Block Formatting Context 块级格式化环境"></a><strong>BFC=Block Formatting Context</strong> 块级格式化环境</h3><p>css中的隐含属性，可以为一个元素开启BFC，开启后该元素会变成一个<strong>独立的布局区域</strong></p><p>元素开启BFC后的特点：</p><ol><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素子元素和父元素外边距margin不会重叠</li><li>开启BFC的元素可以包含浮动的子元素</li></ol><p>可以通过特殊方式开启元素的BFC（非直接方式）</p><ol><li>设置元素的浮动</li><li>将元素设置为行内块元素display: inline-block</li><li>将元素的overflow设置为一个非visible的值（常用hidden 开启BFC，以使其可以包含浮动元素）</li></ol><p><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">BFC介绍与作用</a></p><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>如果我们不希望某个元素因为其他元素浮动的影响而改变位置，可以通过<strong>clear</strong>属性<strong>清除浮动元素对当前元素所产生的影响</strong></p><p>可选值：</p><ul><li>left 清除左侧浮动元素对当前元素的影响</li><li>right 清除右侧浮动元素对当前元素的影响</li><li>both 清除两侧中最大的影响的那侧</li></ul><p>原理：设置清除浮动后，浏览器会自动为元素添加一个上外边距margin-top，使其位置不收其他元素影响</p><h3 id="解决高度塌陷—使用-after选择器"><a href="#解决高度塌陷—使用-after选择器" class="headerlink" title="解决高度塌陷—使用::after选择器"></a>解决高度塌陷—使用::after选择器</h3><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213630_io0zrb.png" alt="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/QQ%E6%88%AA%E5%9B%BE20210407213630_io0zrb.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            border: 10px solid red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            display: block;</span><br><span class="line"><span class="css">            <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为伪类选择器::after默认为行内元素，所以用<strong>display:block</strong>来转换为块元素，content为空，目的是撑起父元素，clear为content添加内边距border以达到clear效果</p><p>可以在box2后面添加一个没有大小的box3，但这样就是在用HTML设置样式。HTML–结构，CSS–样式，所以使用伪类选择器来让box2后面有个虚假的没有脱离文档流的content </p><h3 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时解决高度塌陷和外边距重叠问题，要使用时直接在标签的class里写class=”XXX clearfix”</p><hr><h3 id="圣杯布局和双飞翼布局"><a href="#圣杯布局和双飞翼布局" class="headerlink" title="圣杯布局和双飞翼布局"></a>圣杯布局和双飞翼布局</h3><p>三栏布局，中间一栏最先加载和渲染（内容最重要）；两侧内容固定，中间内容随着宽度自适应；一般用于PC网页</p><p>圣杯布局：</p><p>优点（1）兼容性好，兼容若有主流浏览器，包括万恶的IE6（2）可以实现主要内容的优先加载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            min-width: 550px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#header</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            padding-left: 200px;</span><br><span class="line">            padding-right: 150px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            width: 200px;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            right: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">         <span class="comment">/*margin-left=-100%（left的父元素的宽度值），让left和center横向重合，然后再设成relative position后（相对自身位置移动）向左移动整个自己的width*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            width: 150px;</span><br><span class="line">            margin-right: -150px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*margin-right=width 让right元素在外部看起来没有宽度，所以不用浮动，*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 手写 clearfix */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            display: table;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>this is footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            min-width: 550px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.col</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#main</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line">            margin: 0 190px 0 190px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            width: 190px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#0000FF</span>;</span></span><br><span class="line">            margin-left: -100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            width: 190px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#FF0000</span>;</span></span><br><span class="line">            margin-left: -190px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*使用margin-left来让right浮上去*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span></span><br><span class="line">            this is main</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">        this is left</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">        this is right</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>一种更加高级的布局手段。可以通过定位将元素摆放在页面的任何位置</p><p>可选值：</p><ul><li>static 默认值，元素是静止的，没有开启定位</li><li>relativa 开启元素的相对定位</li><li>absolute 开启元素的绝对定位</li><li>fixed 开启元素的固定定位</li><li>sticky 开启元素的粘滞定位</li></ul><h3 id="相对定位relative："><a href="#相对定位relative：" class="headerlink" title="相对定位relative："></a>相对定位relative：</h3><ol><li><p>元素<strong>开启相对定位</strong>后，如果不设置偏移量元素不会发生任何变化</p><p>偏移量offset：当元素开启了定位后，可以通过偏移量来设置元素的位置</p><p>top: 定位元素和定位位置上边的距离</p><p>bottom: 定位元素和定位位置下边的距离（垂直方向位置由top和bottom两个属性来控制，通常情况只用一个）</p><p>left: 定位元素和定位位置左侧的距离</p><p>right: 定位元素和定位位置右侧的距离（水平方向）</p></li><li><p>相对定位是相对于元素自身原本在<strong>文档流中的位置</strong>来进行定位的</p></li><li><p>相对定位会提升元素的层级</p></li><li><p>相对定位不会让元素脱离文档流</p></li><li><p>相对定位不会改变元素的性质，块还是块，行内还是行内</p></li></ol><h3 id="绝对定位absolute："><a href="#绝对定位absolute：" class="headerlink" title="绝对定位absolute："></a>绝对定位absolute：</h3><ol><li><p>开启绝对定位后，如果不设置偏移量元素就不会发生变化</p></li><li><p>开启绝对定位后，元素会从文档流中脱离</p></li><li><p>绝对定位会改变元素的性质，行内元素变为块元素，块的宽高被内容撑开</p></li><li><p>绝对定位会使元素提升一个层级</p></li><li><p>绝对定位元素是相对于其<strong>包含块</strong>进行定位的</p><p>包含块（containing block）：</p><p>​    正常情况下：离当前元素最近的祖先<strong>块元素</strong></p><p>​    绝对定位的包含块：离他最近的<strong>开启了定位</strong>的祖先元素，如果所有祖先元素都没开启定位，根元素为包含块</p><p>​    html=根元素，初始包含块</p></li></ol><p>开启绝对定位后，<strong>水平方向的布局等式</strong>就需要添加left和right两个值，此时规则和之前一样，只是多添加了两个值(left+right)</p><p>当发生过度约束，如果9个值中没有auto则自动调整right值以使等式满足，如果有auto就调整auto</p><p>可设为auto的值： margin, width, left, right</p><p>因为left和right的值默认是auto，所以不知道left和right，则等式不满足时，会自动调整这两个值</p><p>垂直方向布局的等式也必须满足：</p><p>top/bottom + margin-top/bottom + padding-top/bottom + border-top/bottom + height =包含块的高度</p><p>让margin的四个值都为auto，可以让定位的元素在<strong>包含块</strong>里完全<strong>居中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">            bottom: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617809113/dc2619721c773478_blkw5q.png"></p><h3 id="固定定位fixed："><a href="#固定定位fixed：" class="headerlink" title="固定定位fixed："></a>固定定位fixed：</h3><p>固定定位也是一种绝对定位，所以固定定位大部分特点都和绝对定位一样</p><p>唯一不同的是，固定定位永远参照于浏览器的视口进行定位</p><h3 id="粘滞定位sticky："><a href="#粘滞定位sticky：" class="headerlink" title="粘滞定位sticky："></a>粘滞定位sticky：</h3><p>和相对定位特点基本一致，不同的是粘滞定位可以在元素到达某个位置时将其固定</p><hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol><li><p>可以把行为写在body里的HTML语义化标签中</p></li><li><p>写在head的script中（内部标签）</p><p>&lt;script type=”text/javascript”&gt;   &lt;/script&gt;</p></li><li><p>可以将js代码编写到外部js文件中，然后通过</p><p>&lt;script type=”text/javascript” src=””&gt;&lt;/script&gt;来引入</p><p>script标签一旦用于引入外部文件了，就不能再编写代码了，即使写了也会被浏览器忽略，如果需要可以再创建新的js标签来写内部代码</p></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>字符串，要用引号引起来，引号不能嵌套，双引号里不能放双引号，单引号里不能放单引号</p><p>在字符串中可以使用\作为转义字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">&quot;hello,&#x27;world&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;hello,\&quot;world\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//输出&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="comment">//输出&quot;hello,&#x27;world&#x27;&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="comment">//输出&quot;hello,&quot;world&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\&quot; 表示 &quot;</span></span><br><span class="line"><span class="comment">\&#x27;表示&#x27;</span></span><br><span class="line"><span class="comment">\n 表示换行</span></span><br><span class="line"><span class="comment">\t 制表符</span></span><br><span class="line"><span class="comment">\\ 表示\</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><p>在JS中所有的数值都是number类型，包括整数和浮点数</p><p>可以用【typeof 变量】来检查一个变量的类型</p><p>【Number.MAX_VALUE】，JS中可以表示数字的最大值，实际值1.79······e+308</p><p>【Infinity】如果使用Number表示的数字超过了最大值，则会返回Infinity，表示正无穷。用typeof检查会返回number</p><p>【NaN】一个特殊的数字，表示Not A Number，类型也是number</p><p>【Number.MIN_VALUE】，大于零的最小值，5e-324</p><p>JS在整数运算中基本可以保持精确，如果进行浮点元素运算，可能得到不精确结果，不要在页面中</p><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><p>true/false</p><h4 id="null-amp-undefined"><a href="#null-amp-undefined" class="headerlink" title="null&amp;undefined"></a>null&amp;undefined</h4><p>var a = null; 表示为空的对象，用typeof检查，会返回object</p><p>当声明一个变量，但是不给变量赋值的时候，值为undefined，用typeof检查，也会返回undefined</p><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>一个数据类型强制转换为其他的数据类型，主要指String, boolean, number之间转换</p><ul><li><p>将其他的数据类型转换为<strong>String</strong>：</p><ol><li>调用被转换数据类型的toString()方法。不会影响原变量，将转换的结果返回。但是null和undefined没有toString()方法，调用会报错</li><li>调用String()函数，把要转换的值作为参数传递给函数，对于Number和Boolean，实际上只是调用toString()方法，但是对于null和undefined，不会调用toString()，函数会把null转换为”null”，把undefined转换为”undefined”</li></ol></li><li><p>将其他数据类型转换为<strong>Number</strong>：</p><ol><li><p>使用Number()函数</p><ul><li>字符串→数字<ul><li>如果是纯数字的字符串，则会直接转换为数字</li><li>如果字符串中有非数字的内容，则转换为NaN</li><li>如果字符串为空，或者全是空格的字符串，转换为0</li></ul></li><li>布尔→数字<ul><li>true转为1</li><li>false转为0</li></ul></li><li>null→数字：0</li><li>undefined→数字：NaN</li></ul></li><li><p>parseInt()把一个字符串转换为一个整数，可以取出string中的有效整数内容</p><p>parseFloat()把一个字符串转换为一个浮点数，取出有效的小数</p><p>如果对非String使用parseInt或者parseFloat，会先转换为String然后再操作</p></li></ol></li><li><p>十六进制，以0x开头；八进制，以0开头；二进制，0b开头。有的浏览器会把”080”这种字符串当做八进制解析，有的会当成十进制。</p><p>可以在parseInt中传递第二个参数，用来指定数字的进制。parseInt(a, 8)</p></li><li><p>将其他类型转换为<strong>Boolean</strong></p><p>调用Boolean()：</p><p>​    数字：除了0和NaN，其余都是true</p><p>​    字符串：除了空字符串和空格，其他都是true</p><p>​    null和undefined：false</p><p>​    对象：true</p></li></ul><h4 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h4><ul><li><p>算数运算符</p><p>当对非Number类型的值进行运算时，会将这些值转换为Number，然后再进行计算</p><p>任何值与NaN做运算，结果都是NaN</p><p>如果对两个字符串进行加法计算，则会做拼串</p><p>任何的值和字符串做加法运算，都会先转换为字符串，再拼串</p><p>可以将任意数据类型+一个””即可转换为String，隐式类型转换，浏览器自动完成，其实也是调用String()</p><p>除了<strong>字符串的加法</strong>，剩下都是转换成number再计算</p><p>可以将任意数据类型-0，*1，/2来将其转换为Number，原理和Number()函数一样</p><p>%取模运算（取余数）</p></li><li><p>一元运算符</p><p>+，-        正号，负号</p><p>正号不会对数字产生任何影响，负号可以对数字取反，可以对其他数据类型使用—+，来将其转换为number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>+<span class="string">&quot;2&quot;</span>+<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">//输出123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>+ +<span class="string">&quot;2&quot;</span> +<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">//输出6</span></span><br></pre></td></tr></table></figure></li><li><p>自增</p><p>对于一个变量自增后，原变量的值会立即自增1</p><p>无论是a++还是++a，都会立刻使原变量的值自增1，不同的是a++和++a的值不同</p><p>a++的值等于原变量的值（自增前的值）</p><p>++a的值等于原变量新值（自增后的值）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = d++ + ++d +d;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;result=&quot;</span> +result);</span><br><span class="line"><span class="comment">//20 + 22 +22 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">20</span>;</span><br><span class="line">c = c++;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="comment">//20（先变21，又被赋值20）</span></span><br></pre></td></tr></table></figure></li><li><p>自减</p><p>a–的值是原值</p><p>–a的值是新值</p></li><li><p>逻辑运算符</p><p>! 非（可以为任意数据类型取两次反，就可以转换为布尔值 ）</p><p>&amp;&amp; 与（与运算）（短路的与——第一个值为true，会检查&amp;&amp;后的第二个值；第一个值为false，不会检查第二个值）</p><p>|| 或（短路的或——如果第一个值为true，不会检查第二个；第一个值为false，会检查第二个值）</p></li><li><p>非布尔值的情况，使用 || 和 &amp;&amp; 计算：</p><p>会将其转化为布尔值，然后再运算，并且返回原值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">2</span>&amp;&amp;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 与运算中，如果两个值都为true（true&amp;&amp;true），则返回后面的值</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">0</span> &amp;&amp; <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">result = <span class="literal">NaN</span> &amp;&amp; <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 与运算中，如果两个值中有false，则返回靠前的false</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">1</span> || <span class="literal">NaN</span>;<span class="comment">//1</span></span><br><span class="line">result = <span class="number">2</span> || <span class="number">0</span> ;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">NaN</span> || <span class="number">1</span>; <span class="comment">//1</span></span><br><span class="line">result = <span class="literal">NaN</span> || <span class="number">0</span>;<span class="comment">//0</span></span><br></pre></td></tr></table></figure><p><strong>与运算&amp;&amp;</strong></p><p>如果第一个值为true，则必然返回第二个值</p><p>如果第一个值为false，则直接返回第一个值</p><p><strong>或运算||</strong></p><p>如果第一个值为true，则直接返回第一个值</p><p>如果第一个值为false，则直接返回第二个值</p></li><li><p>赋值运算符</p><p>= 可以将符号右侧的值赋值给符号左侧的变量</p><p>+=：a+=5相当于a=a+5 </p><p>-=：a-=5相当于a=a-5</p><p>*=：a *=5相当于a = a * 5</p><p>/= ： a/=5相当于 a= a/5</p><p>%= : a%=5 相当于 a = a%5</p></li><li><p>关系运算符</p><p>关系成立返回true，关系不成立返回false</p><p>&gt;，&gt;=，&lt; ，&lt;=</p><p>非数值的情况</p><p>先转换为数字，再进行比较</p><p>任何值和NaN做任何比较，结果都是false</p><p>如果符号两侧的值都是<strong>字符串</strong>，不会将其转换为数字进行比较，而是比较ASCII字符编码</p><p>比较字符编码时，是一位一位进行比较的；如果两位一样，就比较下一位</p><p>在比较两个字符串型的数字时，要转型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="literal">true</span> );<span class="comment">//false, true转换为数字为1，所以相等，大于不成立，返回false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="string">&quot;0&quot;</span>);<span class="comment">//true, &quot;0&quot;转换为数字0，大于成立</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>&gt;<span class="literal">null</span>); <span class="comment">//true, null转换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>&lt;<span class="string">&quot;hello&quot;</span>);<span class="comment">//false,&quot;hello&quot;里有非数字字符，转换为NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>&lt;<span class="string">&quot;5&quot;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;11&quot;</span>&lt;<span class="string">&quot;5&quot;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>&lt;<span class="string">&quot;b&quot;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;abc&quot;</span>&lt;<span class="string">&quot;bcd&quot;</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>相等运算符</p><p>用来比较两个值是否相当，相等返回true，不然返回false</p><p>==</p><p>如果值的类型不同，自动类型转换为相同的类型，再比较</p><p>undefined衍生于null，所以做相等判断时，会返回true</p><p>NaN不和任何值相等，包括自己本身（a==NaN无法判断，那如何判断一个值是否是NaN：isNaN()函数）</p><p>!=</p><p>不相等也会对变量进行自动的类型转换，如果转换后相等，它也会返回false</p><p>===</p><p>全等，用来判断两个值是否全等，不会做类型转换，如果类型不同直接返回false</p><p>!==</p><p>不全等，和不等类似，但不做类型转换， 如果两个值的类型不同，则直接返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> != <span class="string">&quot;1&quot;</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> !== <span class="string">&quot;1&quot;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>三元运算符</p><p>语法： 条件表达式?语句1:语句2;</p><p>执行流程：先对条件表达式进行求值，如果值为true，执行语句1，值为false，执行语句2</p><p>​                    如果条件表达式的求值结果是一个非布尔值，会把其转换为布尔值然后再进行计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取a和b中的最大值</span></span><br><span class="line"><span class="keyword">var</span> max = a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取a,b,c中的最大值</span></span><br><span class="line">max = max &gt;c ?max : c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一行写</span></span><br><span class="line"><span class="keyword">var</span> max = a &gt; b ? (a &gt; c ? a : c ) : (b &gt; c ? b : c);</span><br></pre></td></tr></table></figure></li><li><p>运算符的优先级</p><p>, 运算符，可以分割多个语句，一般可以在声明多个变量时使用</p><p>先乘除再加减</p><p>JS有运算符优先级表，在表中越靠上优先级越高，越优先计算，如果一样就从左往右计算</p><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1617811318/2675a8e1f1ebfaf8_epea4c.png"></p></li></ul><h4 id="Unicode编码表"><a href="#Unicode编码表" class="headerlink" title="Unicode编码表"></a>Unicode编码表</h4><p>在字符串中使用转义字符输入Unicode编码</p><p>\u四位编码</p><p>console.log(“\uXXXX”)（十六进制）</p><p>在网页中使用Unicode编码：&amp;#编码，这里是10进制</p><h2 id="语句与代码块"><a href="#语句与代码块" class="headerlink" title="语句与代码块"></a>语句与代码块</h2><p>{</p><p>}</p><p>只有分组的作用，没有其他用途，代码块内部的内容，在外部完全可见</p><ul><li>prompt()函数的返回值为String类型，要把返回值直接转换为number： var num = +prompt(“输入第一个数”);</li><li>console.time(“计时器的名字”);</li><li>console.timeEnd(“计时器的名字”);</li><li>Math.sqrt() 开方</li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>JS语句是从上到下一行行执行，通过流程控制语句可以控制程序执行流程，让程序可以根据一定的条件来选择执行</p><p>语句的分类：</p><ol><li>条件判断语句</li><li>条件分支语句</li><li>循环语句</li></ol><h4 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h4><p>if语句</p><p>语法1： </p><p>​    if(条件表达式)</p><p>​        {语句}</p><p>​    条件表达式：true，执行语句；false，不执行</p><p>语法2：</p><p>​    if(条件表达式)</p><p>​        {语句}</p><p>​    else</p><p>​        {语句}</p><p>语法3：</p><p>​    if(条件表达式)</p><p>​        {语句}</p><p>​    else if(条件表达式)</p><p>​        {语句}</p><p>​    else</p><p>​        {语句}</p><h4 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h4><p>switch(条件表达式){</p><p>​    case 表达式: </p><p>​                语句;</p><p>​                break;</p><p>​    case 表达式: </p><p>​                语句;</p><p>​                break;</p><p>​    default 表达式: </p><p>​                语句;</p><p>​                break;</p><p>}</p><p>表达式和switch中间的条件进行全等比较：</p><p>​    如果为true，则从当前case处开始执行代码，当前case后的所有代码都会被执行，可以在后面加break以退出；如果false，继续向下比较</p><p>如果所有都为false，执行default后的语句</p><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>while(条件表达式){</p><p>​    语句;</p><p>}</p><p>可以用break退出</p><p>do{</p><p>}while(条件表达式)</p><p>先执行循环体，循环体执行完毕后在，再对while里的条件表达式进行判断，如果true就继续执行，false就停止。</p><p>dowhile可以保证循环体至少执行一次，while不能</p><p>for(初始化表达式;条件表达式;更新表达式){</p><p>语句….</p><p>}</p><p>三个部分都可以省略，也可以写在外部，如果在（）里放两个分号就是死循环</p><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>break只对最近的循环起作用</p><p>可以为循环语句创建label，来标识当前的循环。使用break时可以在后面跟一个label，这样break会结束指定的循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span> ; i++</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;外层循环&quot;</span>+i);</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">break</span> outer;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;内层循环&quot;</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 外层循环0</span></span><br></pre></td></tr></table></figure><p>continue关键字可以用来跳过当次循环，也可以加label</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">i==<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;<span class="comment">//输出0134</span></span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>除了String，Number，Boolean，null，undefined之外都是对象</p><p>对象分类</p><ol><li><p>内建对象</p><p>由ES标准中定义的对象，在任何的ES的实现中都可以使用</p><p>比如Math, String, Number, Boolean, Function, Object</p></li><li><p>宿主对象</p><p>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</p><p>比如BOM，DOM</p></li><li><p>自定义对象</p><p>由开发人员自己创建的对象</p></li></ol><p>使用new关键字调用的函数，是构造函数constructor，构造函数是专门用来创建对象的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">obj.name=<span class="string">&quot;名字1&quot;</span>;</span><br><span class="line">obj.gender=<span class="string">&quot;男&quot;</span>;</span><br><span class="line">obj.age=<span class="string">&quot;18&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//输出 名字1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">obj.name=<span class="string">&quot;名字2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">delete</span> obj.name;</span><br></pre></td></tr></table></figure><p>对象的属性名不强制要求遵守标识符的规范，比如obj.var=”hello”;（尽量遵守</p><p>如果要使用特殊的属性名，不能用.的方式，要写成 <strong>对象[“属性名”]=属性值</strong>;  读取时也需要采用这种方式。</p><p>灵活，在[]中可以直接传递一个变量，这样变量是多少就会读取那个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">&quot;123&quot;</span>]=<span class="number">999</span>;</span><br><span class="line">obj[<span class="string">&quot;hello&quot;</span>]=<span class="string">&quot;你好&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//输出999</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//输出你好</span></span><br></pre></td></tr></table></figure><p>属性值可以是任意数据类型</p><p>in 运算符：检查一个对象中是否有指定的属性，有则返回true，没有返回false，语法：  “属性名” in 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>JS中的变量都是保存在栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在的，修改一个变量不会影响其他的变量</p><p>对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟一个新空间，变量保存的是<strong>对象的内存地址（对象的引用）</strong>，如果两个变量保存的同一个对象引用，当一个通过变量修改属性时，另一个也会受影响。</p><p>比较基本数据类型，比较值；比较引用数据类型时，比较的是对象的内存地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">&quot;name1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line"></span><br><span class="line">obj.name=<span class="string">&quot;name2&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//name2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);<span class="comment">//name2</span></span><br><span class="line"></span><br><span class="line">obj2=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);<span class="comment">//null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用对象字面量来创建一个对象</p><p>var obj = {};</p><p>通过对象自变量可以在创建对象时直接指定对象中的属性</p><p>语法：</p><p>var obj = {</p><p>属性名:属性值, </p><p>属性名:属性值,</p><p>“特殊属性名”:属性值</p><p>….}</p><p>对象字面量的属性值可以加引号也可以不加，如果使用特殊的名字就必须加引号</p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数也是一种对象，用typeof检查，返回function</p><p>可以将要封装的代码以字符串的形式传递给构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;console.log(&quot;</span>hello<span class="string">&quot;);&quot;</span>);<span class="comment">//太烂了，很少用</span></span><br></pre></td></tr></table></figure><p>调用函数的语法： 函数对象()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun2();<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><p>使用<strong>函数声明</strong>来创建函数</p><p>语法： </p><p>​    function 函数名([形参1,形参2,形参3…形参n]){</p><p>​            语句…</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;第二个hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun3());<span class="comment">//第二个hello</span></span><br><span class="line">fun3();<span class="comment">//第二个hello</span></span><br></pre></td></tr></table></figure><p>用<strong>函数表达式</strong>来创建函数</p><p>语法：</p><p>​    var 函数名 = function([形参1, 形参2….形参n]){</p><p>​            语句…</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun4=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;如果没有前面的var fun4= ,我就是匿名函数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用函数时，不会检查实参的类型，要注意是否接收到非法参数，如果有可能就要对参数进行类型的检查</p><p>也不会检查实参的数量，多余的实参不会被赋值</p><p>如果实参数量少于形参，没有对应实参的形参为undefined</p><p>返回值：最后加return</p><p>return后面的语句都不会执行</p><p>如果return后面不跟值，相当于返回undefined；如果函数不写return也会返回undefined</p><p>实参可以是任何值，可以是对象或函数</p><p>当传入函数时，xxx()是调用函数，相当于使用函数的返回值；xxx是函数对象，相当于直接使用函数对象</p><p>立即执行函数：函数定义完，立即被调用，往往只会执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;我是匿名函数，立即调用&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//我是匿名函数，立即调用</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line"><span class="comment">//a = 123</span></span><br><span class="line"><span class="comment">//b = 456 </span></span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><p>函数也可以作为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数时这个对象的<strong>方法</strong>，调用这个函数就是调用对象的方法</p><p>枚举对象中的属性：使用for…in 语句，对象中有几个属性，循环体就执行几次，每次执行时，会将对象中的一个属性的名字赋值给变量</p><p>语法：</p><p>​    for(var 变量 in 对象){</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;haha&quot;</span>,</span><br><span class="line">    age:<span class="number">9</span>,</span><br><span class="line">    gender:<span class="string">&quot;female&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> n <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;<span class="comment">// name, age, gender</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> n <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[n]);</span><br><span class="line">&#125;<span class="comment">//haha, 9, female</span></span><br></pre></td></tr></table></figure><p><strong>作用域</strong></p><ol><li><p>全局作用域</p><p>直接编写在script标签里的js代码都在全局作用域</p><p>在页面打开时创建，页面关闭时销毁</p><p>在全局作用域中有一个全局对象window，代表浏览器的窗口，由浏览器创建，可以直接使用</p><p>在全局作用域中，创建的变量都会作为window对象的属性保存，创建的函数都会作为window对象的方法保存</p><p>全局作用域中的变量都是全局变量，在页面中的任意部分都可以访问到</p></li><li><p>函数作用域</p><p>调用函数时创建函数作用域，函数执行完毕后函数作用域销毁</p><p>每调用一次函数就回创建一个新的函数作用域，彼此之间互相独立</p><p>在函数作用域中可以访问全局作用域中的变量</p><p>在全局中无法访问函数作用域里的变量</p><p>在函数内部操作一个变量，会先在自身作用域中寻找，如果有就直接用，没有则向上一级作用域中寻找，直到全局作用域。如果全局也没有就error</p><p>要在函数中使用全局的变量，加window.</p><p>在函数作用域中声明提前：使用var关键字声明的变量会在函数的所有代码执行之前被声明；函数声明也会在使用前被创建</p><p>在函数中，<strong>不使用var声明</strong>的变量，都会成为全局变量</p><p>定义形参相当于在函数作用域中声明了变量</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//error</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">    a = <span class="number">35</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//35</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    alert(e);</span><br><span class="line">&#125;</span><br><span class="line">fun2();<span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//相当于function fun2(c)&#123;</span></span><br><span class="line"><span class="comment">//   var e;</span></span><br><span class="line"><span class="comment">//   alert(e);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p><strong>变量的声明提前</strong></p><p>使用var关键字声明的变量，会在所有的代码执行之前被声明（但不会被赋值），如果变量声明时不使用var关键字，则变量不会被声明提前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line"><span class="keyword">var</span> a =<span class="number">123</span>;</span><br><span class="line"><span class="comment">//a = undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">b = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><p><strong>函数的声明提前</strong></p><p>使用<strong>函数声明</strong>形式创建的函数function funName(){}，会在所有代码执行之前就被创建，所以可以在函数声明前调用函数</p><p>使用<strong>函数表达式</strong>形式创建的函数var funName = function(){}，不会被声明提前，不能在声明前调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    a = <span class="number">456</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">//123</span></span><br><span class="line">alert(a);<span class="comment">//456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//相当于这里有个var b，因为有形参</span></span><br><span class="line">    alert(b);</span><br><span class="line">    b = <span class="number">456</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun1();<span class="comment">//undefined   因为形参未传实参</span></span><br><span class="line">alert(b); <span class="comment">//123  因为函数内部也定义了var b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    alert(c);</span><br><span class="line">    c = <span class="number">456</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun2(<span class="number">123</span>);<span class="comment">//123</span></span><br><span class="line">alert(c);<span class="comment">//123 </span></span><br></pre></td></tr></table></figure><p>解析器在调用函数的时候每次都会向这个函数内部传递一个隐含的参数，即this，指向对象，即函数执行的上下文对象。根据函数的调用方式的不同，this会指向不同的函数.</p><ol><li>以函数的形式调用的(fun())，this永远都是window</li><li>以方法的形式调用时，this指向调用的方法的那个对象</li></ol><p>使用<strong>工厂方法</strong>通过该方法可以创建大批量的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.gender = gender;</span><br><span class="line">    obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = createPerson(<span class="string">&quot;1号&quot;</span>, <span class="number">10</span>, <span class="string">&quot;female&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用工厂方法创建的对象，使用的构造函数都是Object，所以创建的对象都是Object这个类型，导致无法区分多种类型的对象</p><p>创建<strong>构造函数</strong>，习惯上首字母大写，创建方式和普通函数没有区别，调用方式和普通函数不同</p><p>普通函数直接调用，构造函数需要用new关键字</p><p>构造函数的执行流程：</p><ol><li>立刻创建一个新的对象</li><li>将新建的对象设置为函数中的this，在构造函数中可以使用this来引用新建的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ol><p>使用同一个构造函数创建的对象是一类对象，也把一个构造函数称为一个类。通过一个，称为该类的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;1号&quot;</span>, <span class="number">10</span> , <span class="string">&quot;female&quot;</span>);</span><br><span class="line">alert(p1.age);<span class="comment">//10</span></span><br><span class="line">p1.sayName();<span class="comment">//1号</span></span><br></pre></td></tr></table></figure><p>使用instanceof可以检查一个对象是否是一个类的实例：</p><p> 对象 instanceof 构造函数</p><p>是返回true，否返回false（Object全true）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>this的情况</p><ol><li>当以函数的形式调用时，this是window</li><li>当以方法的形式调用时，谁调方法this就是谁 </li><li>当以构造函数的形式调用时，this是新创建的对象</li></ol><p>问题：</p><p>如上例，每执行一次构造函数就回创建一次新的方法sayName方法，也就是所有实例的sayName是唯一的，构造函数执行多少次就创建多少次新方法，占用内存，要让所有对象共享一个方法，可以将sayName方法在<strong>全局作用域</strong>中定义.（问题：污染全局作用域中的命名空间，也不安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.sayName =fun</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原型对象</strong></p><p>每次创建一个函数，解析器都会在向函数中添加一个属性prototype，这个属性对应着一个对象（原型对象）</p><p>当函数作为普通函数，调用prototype没有任何作用；当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，可以通过下划线proto下划线来访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">var</span> mc2 = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(mc.__proto__ == MyClass.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>原型对象相当一个公共区域，所有同一个类的实例都可以访问到这个原型对象，可以将对象中共有的内容统一设置到原型对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MyClass.prototype.a = <span class="number">123</span>;</span><br><span class="line">MyClass.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mc.a = <span class="string">&quot;我是mc里的a&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mc.a); <span class="comment">//我是mc里的a</span></span><br><span class="line"><span class="built_in">console</span>.log(mc2.a); <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line">mc.sayHello();<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><p>当我们访问对象的一个属性或方法时，会优先在对象自身中寻找，如果有则直接使用，如果没有则会去<strong>原型对象</strong>中寻找。</p><p>所以在上面的sayName定义在全局作用域中污染命名问题中，可写成(在全局作用域中)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后创建构造函数时，可以将这些对象共有的属性和方法统一添加到<strong>构造函数的原型对象</strong>中，这样不用分别为每个对象添加，也不会影响全局作用域，可以让每个对象都具有这些属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">MyClass.prototype.name=<span class="string">&quot;我是原型中的名字&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> mc3 = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用in检查对象中是否含有某个属性的时候，如果对象中没有但是原型有，也会返回true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性，只有在自身含有时才会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(mc3.hasOwnProperty(<span class="string">&quot;age&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc3.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(mc3.__proto__.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(mc3.__proto__.__proto__.hasOwnProperty(<span class="string">&quot;hasOwnProperty&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(mc3.__proto__.__proto__.__proto__);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当我们直接在页面中打印一个对象时，实际上是输出的对象的toString()方法的返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(mc3);</span><br><span class="line"><span class="built_in">console</span>.log(mc3.__proto__.__proto__.hasOwnProperty(<span class="string">&quot;toString&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;1hao&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = per.toString();</span><br><span class="line">    alert(per);<span class="comment">//[object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法</span></span><br><span class="line">    per.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i like it&quot;</span>;</span><br><span class="line">  <span class="comment">//一般return格式化输出，return &quot;Person[name=&quot; +this.name + &quot;,age=&quot;+ this.age + &quot;,gender=&quot;+ this.gender+ &quot;]&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    alert(per);<span class="comment">//i like it</span></span><br></pre></td></tr></table></figure><p>原型对象也是对象，也有原型，当使用一个对象的属性或方法时，会在自身中寻找，自身如果有则直接使用，如果没有则去原型中找，如果没有再去原型的原型找，直到找到Object对象的原型，Object的原型没有原型，如果在Object原型中依然没有找到，则返回undefined</p><p><strong>垃圾回收</strong></p><p>当一个对象没有任何变量和属性对它进行引用，此时我们将永远无法操作该对象，这种对象即为垃圾，会占用内存空间，使程序运行变慢，在JS中有自动的垃圾回收机制，会自动把这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作。我们需要做的只是把不再使用的对象设置为<strong>null</strong>即可。</p><p><strong>函数的方法</strong></p><ol><li><p>call()</p><p>可以将实参在对象之后依次传递</p></li><li><p>apply()</p><p>需要将实参封装到<strong>数组</strong>中统一传递</p><p>函数调用call和apply都会调用函数执行，在调用时可以将一个<strong>对象</strong>指定为第一个<strong>参数</strong>，此时这个对象将会成为函数执行时的<strong>this</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span> ,</span><br><span class="line">            sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;&#125;;</span><br><span class="line">     <span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span> &#125;;</span><br><span class="line">    fun.call(obj1);<span class="comment">//obj1</span></span><br><span class="line">    fun.apply(obj2);<span class="comment">//obj2</span></span><br><span class="line">    fun();<span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">obj1.sayName();</span><br><span class="line">  obj1.sayName.apply(obj2);<span class="comment">//obj2说明指定了this是obj2</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">    fun2.call(obj1, <span class="number">1</span>,<span class="number">2</span>);<span class="comment">//a=1 b=2</span></span><br><span class="line">    fun2.apply(obj2,[<span class="number">3</span>,<span class="number">4</span>]);<span class="comment">//a=3, b=4</span></span><br></pre></td></tr></table></figure><p>总结this的用法</p><ol><li>以函数的方式调用，this永远是window</li><li>以方法的方式调用，this是调用方法的对象</li><li>以构造函数的方式调用，this是新创建的对象</li><li>使用call apply调用，this是指定的对象</li></ol><p><strong>arguments</strong></p><p>在调用函数时，浏览器每次都会传递进两个隐含的参数</p><ol><li>函数的上下文对象this</li><li>封装实参的对象arguments</li></ol><p>arguments是一个类数组对象，可以通过索引操作数据，也可以获取长度。在调用函数的时候，传递的实参都会在arguments中保存。</p><p>arguments.length为实参长度。</p><p>即使不定义形参，也可以通过arguments来使用实参。arguments[0]表示第一个实参，arguments[1]表示第二个实参</p><p>arguments.callee 对应一个函数对象，即为当前正在执行的函数的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">fun2();<span class="comment">//ƒ fun2()&#123;</span></span><br><span class="line">     <span class="comment">//console.log(arguments.callee);</span></span><br><span class="line"> <span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>数组Array也是一个对象，与普通对象相似，用来储存值，不同的是，普通对象用字符串作为属性名，数组使用<strong>数字</strong>作为<strong>索引</strong>（从0开始的整数）操作元素。</p><ul><li><p>用typeof来检查数组会返回Object</p></li><li><p>向数组中添加元素，语法：数组[索引] = 值</p></li><li><p>从数组中读取元素，语法： 数组[索引] （读取不存在的，undefined）</p></li><li><p>获取数组的长度，语法： 数组.length（对于连续的，使用length会获取数组的长度；对于不连续的，使用length会获取数组的最大索引+1）</p></li><li><p>修改数组的长度，如果修改的length大于原长度，则多余部分会空出来，如果小于，就删掉多出的元素</p></li><li><p>向数组的最后一个位置添加元素，语法：数组[数组.length] = 值;</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">//Object</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//10,20</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]) ; <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]) ; <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length) ; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">arr.length = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr) ; <span class="comment">//10,20,,,,,,,,</span></span><br><span class="line"></span><br><span class="line">arr[arr.length] = <span class="number">90</span>;</span><br></pre></td></tr></table></figure><p>使用<strong>字面量</strong>创建数组，语法： var arr = [];</p><p>可以在创建时就指定数组中的元素，语法： var arr = [1,2,3,4,5];</p><p>使用<strong>构造函数</strong>创建数组时，也可以同时添加元素，将要添加的元素作为构造函数的参数传递，元素之间使用逗号隔开</p><p>var arr = new Array(1,2,3,4);</p><p>区别：</p><p>var arr = [10]; //创建一个数组，只有一个元素10</p><p>var arr2 = new Array(10); //创建一个数组，长度为10</p><p>数组中的元素可以是任意数据类型，也可以是对象，也可以是函数，也可以放数组（二维数组）</p><p><strong>数组的重要方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = a.push(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">console.log(a); <span class="comment">//1,2,3,4,5,6</span></span><br><span class="line">console.log(result); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">a.pop();</span><br><span class="line">result = a.pop();</span><br><span class="line">console.log(result);<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">result = a.unshift(<span class="number">0</span>);</span><br><span class="line">console.log(result);<span class="comment">//0,1,2,3,4</span></span><br></pre></td></tr></table></figure><ol><li><p>push()</p><p>向数组的末尾添加一个或多个元素，并返回数组新的长度，可以将要添加的元素作为方法的参数传递，这样这些元素将会自动添加到数组的末尾</p></li><li><p>pop()</p><p>删除数组的最后一个元素，并返回被删除的元素 </p></li><li><p>unshift()</p><p>向数组开头添加一个或多个元素，并返回新的数组长度。在前面插入元素后，其他元素索引会依次调整</p></li><li><p>shift()</p><p>可以删除数组的第一个元素，并返回被删除的元素    </p></li></ol><p><strong>数组的遍历</strong></p><p>将数组中的所有元素都取出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span> ;i &lt;arr.length ;i++</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用forEach()，需要一个函数作为参数。数组中有几个元素就会执行几次，每次执行时，浏览器会把遍历到的元素以实参的形式传递进来，我们可以定义形参来读取这些内容。浏览器会在回调函数中传递三个参数。（IE8以下不能用）</p><p>第一个参数，是当前正在遍历的元素；第二个参数，当前正在遍历的元素的索引；第三个参数，是正在遍历的数组</p><p>像这种函数，由我们创建但是不由我们调用的，为回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;1hao&quot;</span>, <span class="string">&quot;2hao&quot;</span>, <span class="string">&quot;3hao&quot;</span>, <span class="string">&quot;4hao&quot;</span>];</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, object</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;value = &quot;</span> + value + <span class="string">&quot; index =&quot;</span> + index + <span class="string">&quot; object = &quot;</span> + object);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1618661090/DW4SPIL5_FKVAVFLBB_9BVT_zlp8c2.png" alt="运行结果"></p><p><strong>数组的其他方法</strong></p><ol><li><p>slice()</p><p>可以用来从数组提取指定元素</p><p>参数：1. 截取开始的位置的索引（包括开始索引）；2. 截取结束的位置的索引（不包括结束索引）。</p><p>第二个参数可以省略不写，会截取从开始位置往后的所有元素。</p><p>索引可以传递一个负值，表示从后往前，-1倒数第一个，-2倒数第二个</p><p>不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p></li><li><p>splice()</p><p>可以用于删除数组中的指定元素</p><p>会影响原数组，将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p><p>参数：1. 开始位置的索引； 2. 删除的数量；3. 可传递新的元素，会自动插入开始位置索引前面</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> arr = [<span class="string">&quot;1hao&quot;</span>, <span class="string">&quot;2hao&quot;</span>, <span class="string">&quot;3hao&quot;</span>, <span class="string">&quot;4hao&quot;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> result = arr.slice(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(result);<span class="comment">//[&quot;1hao&quot;, &quot;2hao&quot;]</span></span><br><span class="line"></span><br><span class="line">result = arr.splice(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [&quot;3hao&quot;, &quot;4hao&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//[&quot;1hao&quot;, &quot;2hao&quot;]</span></span><br><span class="line"></span><br><span class="line">result = arr.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;6hao&quot;</span>,<span class="string">&quot;7hao&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [&quot;6hao&quot;, &quot;7hao&quot;, &quot;3hao&quot;, &quot;4hao&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure><p>数组去重 练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.length ;j++</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">arr[i]==arr[j]</span>)</span>&#123;</span><br><span class="line">            arr.splice(j,<span class="number">1</span>);</span><br><span class="line">            j--;<span class="comment">//当删除了j位置的元素后，后面的元素自动补位，此时不会再比较j位置的元素，会漏，要再比较一次j所在位置的元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>concat()</p><p>可以连接两个或多个数组，并将新的数组返回。不会对原数组产生影响</p></li><li><p>join()</p><p>将数组转换为一个字符串，不会对原数组产生影响</p><p>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符。如果不指定连接符就默认使用逗号</p></li><li><p>reverse()</p><p>该方法用来反转数组，会直接修改原数组</p></li><li><p>sort()</p><p>对数组中的元素进行排序，会直接修改原数组，按Unicode编码排序。对纯数字数组，排序时，也按照Unicode编码排序，可能得到错误结果。</p><p>可以自己指定排序的规则，在sort()中添加一个回调函数，来指定排序规则，回调函数中定义两个形参，浏览器会分别使用数组中的元素作为实参去调用回调函数。</p><p>使用哪个元素不确定，但数组a一定在b前面。浏览器会根据回调函数的返回值来决定元素的顺序，如果返回一个大于零的值，则元素会交换位置，如果小于0，元素位置不变，如果0，则认为相等，也不交换。</p><p>要升序，a-b，要降序，b-a</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;1hao&quot;</span>,<span class="string">&quot;2hao&quot;</span>,<span class="string">&quot;3hao&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;4hao&quot;</span>,<span class="string">&quot;5hao&quot;</span>,<span class="string">&quot;6hao&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//[&quot;1hao&quot;, &quot;2hao&quot;, &quot;3hao&quot;, &quot;4hao&quot;, &quot;5hao&quot;, &quot;6hao&quot;]</span></span><br><span class="line"></span><br><span class="line">result = arr1.join();<span class="comment">//现在result是String类型</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//1hao,2hao,3hao</span></span><br><span class="line"></span><br><span class="line">result = arr1.join(<span class="string">&quot;+&quot;</span>);<span class="comment">//1hao+2hao+3hao</span></span><br><span class="line"></span><br><span class="line">result = arr1.reverse();<span class="comment">//[&quot;3hao&quot;, &quot;2hao&quot;, &quot;1hao&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line">result = arr.sort();<span class="comment">//[11, 2, 3, 4, 5, 7]</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a-b; <span class="comment">//如果想要升序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1, 2, 4, 5, 6, 9]</span></span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>表示时间</p><ol><li><p>创建一个Date对象：var d = new Date();</p><p>如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间</p></li><li><p>创建一个指定的时间对象</p><p>需要在构造函数中传递一个表示时间的字符串作为参数，格式：月/日/年 时:分:秒</p><p>var d2 = new Date(“12/04/2022 10:39:20”);</p></li><li><p>getDate()，获取当前日期对象是几日</p></li><li><p>getDay()，获取当前日期对象是周几（会返回0-6，0表示周日）</p></li><li><p>getMonth()，当前时间对象的月份（会返回0-11， 0表示1月，1表示2月，11表示12月）</p></li><li><p>getFullYear(), 当前年份</p></li><li><p>getTime()，获取当前日期对象的时间戳（从格林威治标准时间的1970年1月1日，0时0分0秒到当前日期缩花费的毫秒数）</p><p>计算机底层在保存时间时使用的都是时间戳</p><p>获取当前时间戳：var time = Date.now(); </p></li></ol><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math与其他对象不同，不是一个构造函数，是一个工具类，不用创建对象，封装了数学方法</p><ol><li><p>Math.PI    圆周率</p></li><li><p>abs()   计算绝对值 例： console.log(Math.abs(-1));//1</p></li><li><p>ceil() 向上取整    例： console.log(Math.ceil(1.2));//2</p></li><li><p>floor()  向下取整    例：console.log(Math.floor(1.2)); //1</p></li><li><p>round() 四舍五入取整  例： Math.round(1.4)//1    Math.round(1.5)//2</p></li><li><p>random() 生成0-1之间的随机数   </p><p>如果要生成0-x的随机数 Math.round(Math.random()*x)，</p><p>生成x-y之间的随机数 Math.round(Math.random*(y-x)+x)</p></li><li><p>max() 取多个数的最大值（Math.max(10,20,30)</p></li><li><p>min() 取多个数的最小值</p></li><li><p>pow(x,y) 返回x的y次方</p></li><li><p>sqrt(x) 返回x开方</p></li></ol><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>通过包装类可以将基本数据类型的数据转换为对象</p><ol><li>String()    将基本数据类型的字符串转化为String对象</li><li>Number() 将基本数据类型的数字转换为Number对象</li><li>Boolean() 将基本数据类型的布尔值转换为Boolean对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">//Object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">//Object</span></span><br></pre></td></tr></table></figure><p>在实际运用中不会使用基本数据类型的对象，比较的时候可能返回值不对</p><p>方法和属性只能添加给对象，不能添加给基本数据类型。</p><p>当我们对基本数据类型的值调用方法和属性时，浏览器会临时使用包装类将其转换为对象，然后调用对象的属性和方法。调用完之后再转换为基本数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="number">123</span>;</span><br><span class="line">s = s.toString();<span class="comment">//临时转换为对象（第一个），使用对象的toString方法，然后销毁对象（第一个）</span></span><br><span class="line">s.hello = <span class="string">&quot;hi&quot;</span>;<span class="comment">//临时转换为对象（第二个），然后销毁对象（第二个）</span></span><br><span class="line"><span class="built_in">console</span>.log(s.hello);<span class="comment">//undefined 临时转换为对象（第三个），第三个对象中没有第二个对象中的hello属性，然后销毁对象（第三个）</span></span><br></pre></td></tr></table></figure><p><strong>字符串的方法</strong></p><p>在底层，字符串是以字符数组的方式存储的</p><ol><li><p>length属性</p><p>获取字符串的长度</p></li><li><p>charAt()</p><p>返回字符串中指定位置的字符，根据索引获取指定位置的字符，不会影响原字符串</p><p>效果跟str[]一样</p></li><li><p>charCodeAt()</p><p>获取指定位置字符的字符编码Unicode编码</p><p>result = str.charCodeAt(0);</p></li><li><p>String.fromCharCode()</p><p>根据字符编码去获取字符</p></li><li><p>concat()</p><p>连接两个或多个字符串，作用和加号一样</p></li><li><p>indexOf()</p><p>检索一个字符串中是否含有指定内容</p><p>如果字符串中含有该内容，则返回第一次出现的索引，如果没有指定内容，则返回-1</p><p>可以指定一个第二个参数，指定开始查找的位置</p></li><li><p>lastIndexOf()</p><p>从后向前，可以指定第二个参数，作为开始查找的位置</p></li><li><p>slice()</p><p>从字符串中截取指定内容，不会影响原字符串，返回截取到的内容</p><p>参数：1.开始位置的索引（包括开始位置）2. 结束位置的索引（不包括结束位置）</p><p>如果省略第二个参数，则截取后面所有</p><p>也可以传递一个负数作为参数，负数的话从后面开始计算</p></li><li><p>substring()</p><p>从字符串中截取一个字符串，和slice相似</p><p>参数：1. 开始位置的索引（包括开始位置）2. 结束位置的索引（不包括结束位置）</p><p>不同的是，这个方法不能接收负值作为参数，如果传递了一个负值，则默认使用0，且会自动调整参数位置，如果第二个参数小于第一个，则会自动交换两个参数的位置</p></li><li><p>substr()</p><p>截取字符串</p><p>参数：1. 截取开始位置的索引，2.截取的长度</p></li><li><p>split()</p><p>将字符串拆分为数组</p><p>参数：字符串，根据该字符串去拆数组</p><p>如果传递一个””空串，则每个字符都拆分为数组中的一个元素</p></li><li><p>toUpperCase()</p><p>将一个字符串转换为大写，并返回</p></li><li><p>toLowerCase()</p><p>转换为小写</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">result = str.charAt(<span class="number">0</span>);<span class="comment">//h</span></span><br><span class="line">result = str.charCodeAt(<span class="number">0</span>);<span class="comment">//104</span></span><br><span class="line">result = <span class="built_in">String</span>.fromCharCode(<span class="number">104</span>);<span class="comment">//h</span></span><br><span class="line">result = str.concat(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//helloabc</span></span><br><span class="line">result = indexOf(<span class="string">&quot;j&quot;</span>);<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;hellohp&quot;</span>;</span><br><span class="line">result = indexOf(<span class="string">&quot;h&quot;</span>);<span class="comment">//0</span></span><br><span class="line">result = indexOf(<span class="string">&quot;h&quot;</span>,<span class="number">1</span>)<span class="comment">//5从1开始找</span></span><br><span class="line">result = str2.lastIndexOf(<span class="string">&quot;h&quot;</span>);<span class="comment">//5</span></span><br><span class="line">result = str2.lastIndexOf(<span class="string">&quot;h&quot;</span>, <span class="number">1</span>)<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">result = str.slice(<span class="number">2</span>,<span class="number">0</span>);<span class="comment">// （空</span></span><br><span class="line">result = str.substring(<span class="number">2</span>,<span class="number">0</span>);<span class="comment">//he</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;abc,def,ghi&quot;</span>;</span><br><span class="line">result = str3.split(<span class="string">&quot;,&quot;</span>);<span class="comment">// [&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;]</span></span><br><span class="line">result = result[<span class="number">0</span>]<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">result = str4.toUpperCase();<span class="comment">//ABCDE</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>使用<strong>构造函数</strong>创建（灵活，可传变量）：</p><p>var reg = new RegExp(“正则表达式”,”匹配模式”);</p><p>用typeof检查，会返回object</p><p>匹配模式：i 忽略大小写； g 全局匹配模式，可以同时设置多个，且顺序无所谓</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;a&quot;</span>);<span class="comment">//检查一个字符串中是否含有a，区分大小写</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;ahsv&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;jfnA&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<strong>字面量</strong>的方式创建更简单</p><p>var 变量 = /正则表达式/匹配模式</p><p>使用 | 表示或者</p><p>[ ]里的内容也是或的关系   [ab] ==a|b    [a-z] 任意的小写字母 [A-Z]任意的大写字母    [A-z]任意字母</p><p>（检查一个字符串中是否含有abc或adc或aec：reg=/a[bde]c/</p><p>[^ab] 除了ab有没有其他字符</p><p>正则表达式的方法：</p><ul><li><p><strong>test()</strong></p><p>使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，符合则返回true，不符合返回false</p></li><li><p><strong>split()</strong></p><p>方法中可以传递一个正则表达式作为参数，这样方法会根据正则表达式去拆分字符串</p><p>默认全局匹配</p></li><li><p><strong>search()</strong></p><p>搜索字符串中是否含有指定内容</p><p>如果搜索到了指定内容，则会返回第一次出现的索引，如果没有搜索到就返回-1</p><p>可以接受一个正则表达式作为参数，然后根据正则表达式去搜索字符串</p><p>只会查找第一个，即使设置全局匹配也没用</p></li><li><p><strong>match()</strong></p><p>可以根据正则表达式，将符合条件的内容提取出来</p><p>默认情况下match只会找到第一个符合要求的内容，找到后就停止检索，可以设置正则表达式为全局匹配模式（g），就可以匹配到全部内容</p><p>match会将匹配到的内容封装到一个<strong>数组</strong>中返回，即使只查询到一个结果</p></li><li><p><strong>replace()</strong></p><p>将字符串中指定内容替换为新的内容</p><p>参数：1. 被替换的内容，可以接受正则表达式作为参数；2. 新的内容</p><p>默认只会替换第一个</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>);    <span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;]</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;hello abc heals adc jkc&quot;</span>;</span><br><span class="line">result = str.search(<span class="regexp">/a[bef]c/</span>); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span><br><span class="line">result = str.match(<span class="regexp">/[A-z]/g</span>);<span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line">result = str.replace(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;@&quot;</span>);   <span class="comment">//1@2b3c4d5e6f7</span></span><br><span class="line"></span><br><span class="line"> str = <span class="string">&quot;1a2a3a4a5e6f7&quot;</span>;</span><br><span class="line">result = str.replace(<span class="regexp">/a/g</span>, <span class="string">&quot;@&quot;</span>);<span class="comment">//1@2@3@4@5e6f7</span></span><br></pre></td></tr></table></figure><p><strong>量词：</strong></p><p>可以设置一个内容出现的次数{n}</p><p>var reg = /a{3}/; 出现三个连续a</p><p>量词只对它前面的一个内容起作用，如果要多个就括起来</p><p>var reg = /(ab){3}/;  出现连续的三个ab</p><ul><li>{n}:正好出现n次</li><li>{m,n} 出现m到n次   </li><li>{m , } m次以上  </li><li>+至少一个，相当于{1, }</li><li>*0个或多个，相当于{0, }</li><li>? 0个或1个，相当于{0,1}</li></ul><p>检查一个字符串是否以a开头：reg = /^a/;    ^表示开头</p><p>检查一个字符串是否以a结尾：reg = /a$/;    $表示结尾</p><p>如果同时使用^和%，则要求字符串必须完全符合正则表达式（/^a$/就只能是一个”a”）</p><p>​    手机号的规则：</p><ol><li>以1开头  ^1</li><li>第二位是3-9任意数字  [3-9]</li><li>9个任意数字 [0-9]{9}$</li></ol><p>var phoneReg = /^1 [3-9] [0-9]{9}$/;</p><p>. 表示任意字符，要表示.需要转义\</p><p>在正则表达式中使用\作为转义字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\./</span> ;<span class="comment">//表示.</span></span><br><span class="line">reg = <span class="regexp">/ \\ /</span>; <span class="comment">//表示\</span></span><br></pre></td></tr></table></figure><p>使用构造函数时（new RegExp），由于参数是一个字符串，而\是字符串中转义字符，如果需要使用\则需要使用\</p><p>\w  任意字母和数字和_  [A-z0-9_]</p><p>\W  除了字母数字和_    [  ^A-z0-9_]</p><p>\d  任意的数字[0-9]</p><p>\D  除了数字 [ ^0-9]</p><p>\s  空格</p><p>\S    除了空格</p><p>\b  单词边界（检查一个字符串中是否含有单词child ：reg = / \bchild\b /;  “hello children “X   “hello child” √</p><p>\B  除了单词边界</p><p>去除字符串中的空格：用空串替换空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除字符串中的空格：用空串替换空格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;    hello    &quot;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除字符串开头的空格</span></span><br><span class="line">str = <span class="string">&quot;     he   llo     &quot;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/^\s/g</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//    he   llo   //只会去除开头的一个，全局也没用</span></span><br><span class="line">str = str.replace(<span class="regexp">/^\s*/</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//he   llo(    )    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除结尾的空格</span></span><br><span class="line">str = str.replace(<span class="regexp">/\s*$/</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//he   llo()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除开头和结尾的空格</span></span><br><span class="line">str = <span class="string">&quot;     he   llo     &quot;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/^\s* | \s*$/g</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>邮件的规则：</p><p>任意字母数字下划线 . 任意字母数字下划线 @ 任意字母数字 . 任意字母（2-5位）. 任意字母（2-5位）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> email = <span class="string">&quot;xxx123_.yyy456_@zzz.skdak.jod&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> emailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(email));<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>Document Object Model文档对象模型</p><p>文档：整个HTML网页文档； 对象：将网页中的每一个部分都转换成一个对象； 模型：表示对象之间的关系</p><p>JS中通过DOM来对HTML文档进行操作</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>节点，构成网页的最基本组成部分，网页中的每一个部分都可以称为一个节点</p><ol><li>文档节点：整个HTML文档</li><li>元素节点：HTML文档中的HTML标签</li><li>属性节点：元素的属性</li><li>文本节点：HTML标签中的文本内容</li></ol><p><strong>节点的属性</strong></p><p>nodeName nodeType nodeValue</p><p><strong>事件</strong></p><p>文档和浏览器窗口发生的一些特定的交互瞬间</p><p>js和HTML之间的交互是通过事件实现的</p><p>可以在事件的属性中设置js代码，这样当事件被触发的时候，代码执行。这种写法结构和方法耦合，不推荐使用</p><p>可以给标签的对应事件绑定处理函数的形式来响应事件，这样当事件被触发时，对应的函数被调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">        我是一个按钮</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">       <span class="comment">//绑定一个单击事件，单击响应函数</span></span></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;已点击&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器在加载页面时，是自上向下加载的，如果script标签写在页面的上边，在代码执行时，页面还没有加载。把js代码写在页面下面是为了等页面加载完毕后再执行js代码</p><p>onload事件会在整个页面或图象加载完成之后立刻发生。为window绑定onload事件</p><p>如果要把js代码写在head标签里，写在window.onload() = function(){}里，可以在页面加载完之后执行，确保执行时所有DOM对象都已经加载完毕。</p><p>最好写在body里。</p><p><strong>文档节点</strong></p><p>浏览器提供文档节点这个对象，是window属性，可以在页面中直接使用，文档节点代表的是整个网页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>); <span class="comment">//[object HTMLDocument]</span></span><br></pre></td></tr></table></figure><p><strong>元素节点</strong></p><p>元素==标签</p><p>通过document对象调用</p><ol><li>getElementById(): 通过id属性获取一个元素节点对象</li><li>getElementsByTagName(): 通过标签名获取一组元素节点对象（返回一个类数组对象，即使查询到的元素只有一个，也会封装到数组里）</li><li>getElementsByName(): 通过name属性获取一组元素节点对象</li></ol><p>innerHTML 通过这个属性可以获取元素内部HTML代码，对于自结束标签，这个属性没有意义</p><p>innerText 通过这个属性可以直接获取元素内部的文本内容，比innerHTML少标签名字，会自动把HTML去除</p><p>如果需要读取元素节点的属性，直接使用元素.属性名。 元素.id，元素.name，元素.value都可以，但是class属性不能采用这个方式。读取class，需要使用元素.className</p><p>获取元素节点的子节点</p><ol><li>getElementsByTagName(): 返回当前节点指定标签名后代节点（city.getElementsByTagName()</li><li>childNode 当前节点的所有子节点，会获取包括文本节点在内的所有节点（根据DOM标准，标签之间的空白也会被当成文本节点（IE8以及以下不会把空白文本当成子节点</li><li>children 当前节点的所有子元素（不会把空白文本算进去</li><li>firstChild 当前节点的第一个子节点（包括空白文本节点</li><li>firstElementChild 当前元素的第一个子元素，不支持IE8以及以下</li><li>lastChild 当前节点的最后一个子节点</li></ol><p>通过具体的节点调用</p><ol><li>parentNode 当前节点的父节点 返回一个节点（因为每个节点只有一个父节点）</li><li>previousSibling 当前节点的前一个兄弟节点（也可能获取空白文本）</li><li>previousElementSibling  前一个兄弟元素（不会获得空白文本，IE8以下不支持</li><li>nextSibling 当前节点的后一个兄弟节点</li></ol><p>input 标签的value属性就是文本框里所填写的内容</p><p>文本节点里的nodeValue就是字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params">str, fun</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(str);</span></span><br><span class="line">            btn.onclick = fun;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            myClick(<span class="string">&quot;btn1&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> tx = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line">                alert(tx.value);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span></span><br><span class="line">            我是一个按钮</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hahahahah&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1618849481/IVUL_LGW_O_8XYM_Z_W6WYK_hpkmdm.png"></p><p><strong>获取body标签</strong></p><p>var body = document.getElementsByTagName(“body”)[0];</p><p>var body = document.body;</p><p><strong>获取HTML根标签</strong></p><p>var html = document.documentElement;</p><p><strong>获取页面中的所有元素</strong></p><p>var all = document.all;</p><p>var all = document.getElementsByTagName(“*”);</p><p><strong>根据元素的class属性去查询一组元素节点对象</strong></p><p>getElementsByClassName(), 根据class属性值获取一组元素节点，不支持IE8及以下</p><p><strong>CSS选择器查询</strong></p><p>document.querySelector()</p><p>以一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象，IE8支持，可以代替</p><p>使用该方法，总会返回唯一的一个元素，如果满足条件的元素有多个也只会返回第一个</p><p>要多个，会封装在数组中返回：document.querySelectorAll()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.btn div&quot;</span>);<span class="comment">// CSS选择器的写法，用字符串传进去</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(div.innerHTML);<span class="comment">//我是一个按钮</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h3><p><strong>创建元素节点</strong></p><p>createElement()</p><p>需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);<span class="comment">//新建一个li</span></span><br></pre></td></tr></table></figure><p><strong>创建文本节点</strong></p><p>createTextNode()</p><p>需要一个文本内容作为参数，根据该内容创建文本节点，并将创建好的新节点返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;haha&quot;</span>);<span class="comment">//设置haha文本</span></span><br></pre></td></tr></table></figure><p><strong>添加子节点</strong></p><p>appendChild()</p><p>向一个父节点中添加子节点，语法：父节点.appendChild(子节点);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li.appendChild(text);</span><br></pre></td></tr></table></figure><p><strong>在指定子节点前面插入新的子节点</strong></p><p>insertBefore()</p><p>语法： 父节点.insertBefore(新节点,旧节点);</p><p><strong>替换子节点</strong></p><p>replaceChild()</p><p>语法：父节点.replaceChild(新节点，旧节点)</p><p><strong>删除子节点</strong></p><p>removeChild()</p><p>语法： 父节点.removeChild(子节点)</p><p><strong>获取父节点</strong></p><p>子节点.parentNode（可以和上面的父节点的语法结合，就不用写父节点本身）</p><p><strong>使用innerHTML给DOM增删改</strong></p><p>节点.innerHTML += “&lt;&gt;xxxx&lt;&gt;”;</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">var</span> addEmpButton =<span class="built_in">document</span>.getElementById(<span class="string">&quot;addEmpButton&quot;</span>);</span></span><br><span class="line"><span class="javascript">           addEmpButton.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> name=<span class="built_in">document</span>.getElementById(<span class="string">&quot;empName&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> email=<span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> salary=<span class="built_in">document</span>.getElementById(<span class="string">&quot;salary&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//alert(name+email+salary);</span></span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">                <span class="comment">//创建一个tr</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> tr=<span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line">            </span><br><span class="line"><span class="handlebars"><span class="xml">                tr.innerHTML=&quot;<span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;+name+&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>&quot;+ &quot;<span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; + email + &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>&quot;+ &quot;<span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot; + salary + &quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>&quot;+ &quot;<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;javascript:;&#x27;</span>&gt;</span>&quot;+&quot;Delete&quot; + &quot;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>&quot;;</span></span></span><br><span class="line">                             </span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> employeeTable=<span class="built_in">document</span>.getElementById(<span class="string">&quot;employeeTable&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> tbody=employeeTable.getElementsByTagName(<span class="string">&quot;tbody&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line">                tbody.appendChild(tr);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">             <span class="keyword">var</span> allA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allA.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                allA[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//点击超链接以后删除超链接所在的行，获取当前需要操作的tr</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> tr = <span class="built_in">this</span>.parentNode.parentNode;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> elName = tr.firstElementChild;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> flag = confirm(<span class="string">&quot;sure?you are deleting &quot;</span> + elName.innerHTML);</span></span><br><span class="line">                    if (flag) &#123;</span><br><span class="line">                        tr.parentNode.removeChild(tr);</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="comment">//点击超链接后会有默认行为，可以通过在响应函数最后return false来取消默认行为</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;employeeTable&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>salary<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>tom@tom.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jerry<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>jerry@jerry.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;formDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>添加新员工<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>name:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;empName&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>email:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>salary:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;salary&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addEmpButton&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1618995891/W50_PL_T_2KLM_MPL7_Q_elhohd.png"></p><p>for循环会在页面加载完成后立刻执行，而响应函数会在超链接被点击后才执行，当响应函数执行时，for循环早已执行完毕（allA[]的值问题</p><h3 id="DOM操作CSS"><a href="#DOM操作CSS" class="headerlink" title="DOM操作CSS"></a>DOM操作CSS</h3><p><strong>通过JS修改元素的样式</strong></p><p>语法： 元素.style.样式名=样式值</p><p>如果CSS样式名中含有-，这种名称在JS中不合法，需要将这种样式名修改为驼峰命名法。（background-color===backgroundColor)</p><p>通过style属性设置的样式都是内联样式，有较高优先级，所以通过JS修改的样式往往会立即显示</p><p>但是如果在样式中写了!important，则此时样式会有最高优先级，及时通过js也无法覆盖该样式，导致js修改样式失效，所以尽量不要给样式加!important</p><p><strong>通过JS读取元素的样式</strong></p><p>语法： 元素.style.样式名</p><p>通过style属性设置和读取的都是<strong>内联样式</strong>，无法读取样式表中的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">           width: 100px;</span><br><span class="line">           height: 100px;</span><br><span class="line">           background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        btn1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            box1.style.width=<span class="string">&quot;300px&quot;</span>;<span class="comment">//修改box1的宽度为300px</span></span></span><br><span class="line"><span class="javascript">            box1.style.backgroundColor=<span class="string">&quot;red&quot;</span>;<span class="comment">//修改box1的颜色为红色</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>click here<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>获取元素当前显示的样式</strong></p><p>语法：元素.currentStyle.样式名</p><p>可以用来读取当前元素正在显示的样式，如果当前元素没有设置该样式，就获取默认值。只有ie浏览器支持</p><p>在其他浏览器中可以使用getComputedStyle()，这个方法是window的方法，可以直接使用</p><p>参数：1. 要获取参数的元素；2. 可以传递一个伪元素（一般是null）</p><p>该方法会返回对象，对象中封装了当前元素对应的样式，可以通过对象.样式名来获取样式</p><p>如果获取的样式没有设置，则会获取到真实的值，而不是默认值。（例：没有设置width，用getComputedStyle(box1,null).width不会获取到auto，而是一个长度。（currentStyle会获取auto）。不支持ie8以及以下</p><p>自己定义一个函数，用来获取指定元素的当前样式</p><p>参数：obj 要获取样式的元素，name要获取的样式名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,name</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">window</span>.getComputedStyle</span>)</span>&#123;<span class="comment">//如果直接用getComputedStyle, ie8会因为没有这个属性报错，无法继续if。如果用window.getComputedStyle，就是在window对象中找方法，对ie8来说是undefined的方法，不会报错，会执行else的内容</span></span><br><span class="line">    <span class="keyword">return</span> getComputedStyle(obj,name)[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用一行代码写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle?getComputedStyle(obj,name):obj.currentStyle[name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他方法：</p><p><strong>clientWidth和clientHeight：</strong></p><p>获取元素的可见宽度和可见高度，属性不带px，返回的是一个数字，可以直接进行计算</p><p>会获取包括内容区和内边距（content和padding），不能修改，只读</p><p><strong>offsetWidth和offsetHeight</strong>：</p><p>获取元素整个的宽度和高度，包括内容区，内边距和边框（content，padding，border）</p><p><strong>offsetParent</strong></p><p>用来获取当前元素的定位父元素</p><p>会获取离当前元素最近的<u>开启了定位</u>(position不是static)的祖先元素，如果所有祖先元素都没开启定位，就返回body</p><p><strong>offsetLeft，offsetTop</strong></p><p>当前元素相对于其定位父元素的水平偏移量、垂直偏移量</p><p><strong>scrollWidth, scrollHeight</strong></p><p>获取元素整个滚动区的高度和宽度（子元素比父元素长/高，overflow=auto的时候有滚动条）</p><p><strong>scrollLeft, scrollTop</strong></p><p>可以获取水平滚动条/垂直滚动条滚动的距离</p><p>当满足scrollHeight - scrollTop == clientHeight时，说明垂直滚动条滚动到底了</p><p>当满足scrollWidth - scrollLeft ==clientWidth时，说明水平滚动条滚动到底了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#info</span>&#123;</span></span><br><span class="line">           width: 150px;</span><br><span class="line">           height: 200px;</span><br><span class="line"><span class="css">           <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">           overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//onscroll会在元素滚动条滚动时触发</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&quot;info&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="javascript">        info.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.scrollHeight - <span class="built_in">parseInt</span>(<span class="built_in">this</span>.scrollTop) == <span class="built_in">this</span>.clientHeight</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    inputs[<span class="number">0</span>].disabled=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                    inputs[<span class="number">1</span>].disabled=<span class="literal">false</span>;<span class="comment">//让按钮能用                   </span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(<span class="built_in">this</span>.scrollHeight);</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(<span class="built_in">this</span>.scrollTop);<span class="comment">//这个地方的scrolltop不知道为啥有小数点，为了等式成立取了整数，但是不知道为啥</span></span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(<span class="built_in">this</span>.clientHeight);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            hhhhhhhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>/&gt;</span> 已阅读</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表单项添加disabled=&quot;disabled&quot;，则表单项将会变成不可用的状态--&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1619093915/S54_OL_N_Z9OM6W5_GRIB4_ylupu5.png"></p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>事件对象：当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数。在事件对象中封装了当前事件的相关一切信息，比如鼠标的坐标，键盘哪个按键被按下，鼠标滚轮滚动方向等</p><p>在ie8中，响应函数被触发时，浏览器不会传递事件对象，在ie8以及以下的浏览器中，事件对象被存储为window对象</p><p>onmousemove：该事件会在鼠标在元素中移动时触发</p><p>clientX：鼠标指针的水平坐标</p><p>clientY：鼠标指针的垂直坐标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div1.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">//传入event</span></span><br><span class="line">    event = event || <span class="built_in">window</span>.event;<span class="comment">//兼容问题</span></span><br><span class="line">    <span class="keyword">var</span> x=event.clientX;</span><br><span class="line">    <span class="keyword">var</span> y=event.clientY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>事件的冒泡bubble</strong></p><p>当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。在开发中，大部分时候冒泡都是有用的，如果不希望冒泡，可以通过事件对象取消</p><p>event.cancelBubble=true;</p><p><strong>事件的委派</strong></p><p>只绑定一次事件，可以应用到多个元素上，即使元素是后添加的。可以把绑定给元素的事件绑定到共同的祖先元素上。</p><p>将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件被触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件，原理是冒泡。</p><p>如果触发事件的对象是我们期望的元素，则执行。否则不执行（用event.target查谁是触发事件的对象）</p><p><strong>事件的绑定</strong></p><p>使用对象.事件=函数 的形式绑定响应函数，只能同时为一个元素的一个事件绑定一个响应函数，不能绑定多个，如果绑定过多，后面的覆盖前面的</p><p>addEventListener()（this是绑定事件的对象）</p><p>为元素绑定函数，可以同时绑定多个，按照函数绑定顺序执行：参数：</p><ol><li>事件的字符串，不要on；2. 回调函数，当事件触发时，该函数会被调用；3. 是否在捕获阶段触发事件，需要一个布尔值，一般都传false</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>ie8中用 attachEvent() （this是window）</p><p>后绑定先执行</p><p>参数：1. 事件的字符串，要on；2. 回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来为指定元素绑定响应函数。需要统一两个方法中的this</span></span><br><span class="line"><span class="comment">//参数： obj要绑定事件的对象；eventStr事件的字符串；callback回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,eventStr,callback</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">obj.addEventListener</span>)</span>&#123;</span><br><span class="line">        obj.addEventListener(eventStr,callback,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        obj.attachEvent(<span class="string">&quot;on&quot;</span>+eventStr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback.call(obj);<span class="comment">//在匿名函数中用回调函数</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时调用"><a href="#定时调用" class="headerlink" title="定时调用"></a>定时调用</h3><p>setInterval()</p><p>参数：1. 回调函数，该函数每隔一段时间会被调用一次； 2. 每次调用间隔的时间，单位是毫秒</p><p>返回值：返回一个Number类型的数据（这个数字用来作为定时器的唯一标识）</p><p>clearInterval()</p><p>关闭定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> timer= <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    count.innerHTML=num++;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">num==<span class="number">11</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">100</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><strong>延时调用</strong></p><p>setTimeout( function(){}, 3000)</p><p>延时调用一个函数不马上执行，而是隔一段时间以后再执行，而且只会执行一次</p><p>clearTimeout(timer)</p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p>ES6版本变动内容最多，加入了新的语法特性，编程更简单高效</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ol><li><p>变量不能重复声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">2</span>;<span class="comment">//error, var可以重复</span></span><br></pre></td></tr></table></figure></li><li><p>块级作用域，全局，函数，eval</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if else while for</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;<span class="comment">//error,var可以（会打印undefined），因为var会提前在最前面声明</span></span><br></pre></td></tr></table></figure></li><li><p>不影响作用域链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fun();<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ol><li><p>一定要赋初始值</p></li><li><p>一般常量使用大写</p></li><li><p>常量的值不能修改</p></li><li><p>块级作用域</p></li><li><p>对于数组和对象的元素的修改不算做对常量的修改，常量地址不变化，不会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">a.push(<span class="number">9</span>);<span class="comment">//[1,2,3,4,9]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6允许按照一定模式从数组中和对象中提取值，对变量进行赋值</p><ol><li><p>数组解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c,d]=arr;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;hi&quot;</span>,</span><br><span class="line">    age:<span class="number">19</span>,</span><br><span class="line">    function1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age,function1&#125;=obj;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//hi</span></span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//19</span></span><br><span class="line">function1();<span class="comment">//hello</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>内容中可以直接出现换行符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;1&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;2&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure><p>变量可以拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">`lzh`</span>;</span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">`<span class="subst">$&#123;a&#125;</span> is my name`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sentence);<span class="comment">//lzh is my name</span></span><br></pre></td></tr></table></figure><h2 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h2><p>ES6允许在大括号里直接写入变量和函数，作为对象的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&quot;hi&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age=<span class="number">19</span>;</span><br><span class="line"><span class="keyword">let</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 =&#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    fun1,</span><br><span class="line">    fun2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="comment">//原写法</span></span><br><span class="line"><span class="function"><span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//现在写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line"><span class="keyword">let</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>this是静态的，this始终指向函数声明时所在作用域下的this的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getName2=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.name=<span class="string">&quot;namehere&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    name:<span class="string">&quot;objname&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接调用</span></span><br><span class="line">getName();<span class="comment">//namehere</span></span><br><span class="line">getName2();<span class="comment">//namehere</span></span><br><span class="line"><span class="comment">//call方法调用</span></span><br><span class="line">getName.call(obj);<span class="comment">//objname</span></span><br><span class="line">getName2.call(obj);<span class="comment">//namehere</span></span><br></pre></td></tr></table></figure></li><li><p>不能作为构造实例化对象</p></li><li><p>不能使用arguments变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//error, arguments is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数的简写</p><ol><li><p>省略小括号，当形参有且只有一个的时候，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*n;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">8</span>);<span class="comment">//16</span></span><br></pre></td></tr></table></figure></li><li><p>省略花括号，当代码中只有一条语句的时候，此时return必须省略，且语句的执行结果就是函数的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pow = <span class="function"><span class="params">n</span> =&gt;</span> n*n;</span><br><span class="line">pow(<span class="number">8</span>);<span class="comment">//64</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>练习：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击div后两秒变颜色</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">d.addEventListner(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存this的值，如果不保存，在setTimeout里获取的this是window对象</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        _this.style.background = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6中</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">d.addEventListner(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//箭头函数本身的this是静态的，声明时所在的作用域下的this，指向function()的对象，也就是d</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从数组中返回偶数的元素</span></span><br><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">item % <span class="number">2</span> ==<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)<span class="comment">//result [2,6,16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">item % <span class="number">2</span> ==<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//更简化</span></span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span>===<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>箭头函数适合与this无关的回调，定时器，数组的方法回调</p><p>箭头函数不适合与this有关的回调，事件回调，对象方法</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>ES6函数参数赋值初始值</p><ol><li><p>形参初始值，一般具有默认值的参数位置靠后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = obj.name;</span><br><span class="line">    <span class="keyword">let</span> age = obj.age;<span class="comment">//重复写obj，麻烦</span></span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello(&#123;</span><br><span class="line">    name:<span class="string">&quot;name1&quot;</span>,</span><br><span class="line">    age:<span class="number">100</span>,</span><br><span class="line">&#125;)<span class="comment">//name1, 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello2</span>(<span class="params">&#123;name,age&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">hello2(&#123;</span><br><span class="line">    name:<span class="string">&quot;name2&quot;</span>,</span><br><span class="line">    age:<span class="number">200</span>,</span><br><span class="line">&#125;)<span class="comment">//name2, 200</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">hi(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//1,2,3（是对象</span></span><br></pre></td></tr></table></figure><p>在ES6中引入rest参数，用于获取函数的实参，代替arguments</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi2</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">hi2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//[1,2,3]（是数组</span></span><br></pre></td></tr></table></figure><p>rest参数必须要放在最后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi3</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">hi3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//1,2,[3,4,5]</span></span><br></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>…扩展运算符能将<strong>数组</strong>转换为逗号分割的<strong>参数序列</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">hi(a);<span class="comment">//[1,2,3]（是一整个数组</span></span><br><span class="line">hi(...a);<span class="comment">//1,2,3 （三个arguments</span></span><br></pre></td></tr></table></figure><p>应用：</p><ol><li><p>数组合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b= [<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> ab=[...a,...b];<span class="comment">//[1, 2, 3, &quot;m&quot;, &quot;n&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p>数组克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">const</span> b = [...a];</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//[10,15,20]</span></span><br></pre></td></tr></table></figure></li><li><p>将伪数组转变为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在HTML里写了三个div标签</span></span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);<span class="comment">//对象</span></span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="built_in">console</span>.log(divArr);<span class="comment">//[div,div,div]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>表示独一无二的值，类似字符串</p><p>创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s2===s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s4===s5);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特点</p><ol><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li></ol><p>使用</p><ol><li><p>创建对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向对象中添加方法up和down</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    up:<span class="built_in">Symbol</span>();</span><br><span class="line">down:<span class="built_in">Symbol</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[b.up]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">a[b.down]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//安全添加</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> c=&#123;</span><br><span class="line">    name:<span class="string">&quot;this is c&quot;</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&quot;say&quot;</span>)]:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;i am c&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&quot;other&quot;</span>)]:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;i am not others&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//怎么调用？？？</span></span><br></pre></td></tr></table></figure><p>Symbol内置值</p><ol><li><p>Symbol.hasInstance</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance](param)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(param);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;<span class="comment">//一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(o <span class="keyword">instanceof</span> Person);<span class="comment">//判断o是不是Person里的一个对象</span></span><br><span class="line"><span class="comment">//&#123;&#125;, hi, true</span></span><br></pre></td></tr></table></figure></li><li><p>Symbol.isConcatSpreadable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> result = a.concat(b);<span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line">b[<span class="built_in">Symbol</span>.isConcatSpreadable]=<span class="literal">false</span>;</span><br><span class="line">result = a.concat(b);<span class="comment">//[1,2,3,Array(3)]</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://www.cnblogs.com/zygll/p/14262826.html">详解Symbol</a></p><p>作为对象的方法调用</p></li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>原生具备iterator接口的数据（可以使用for of遍历）</p><ol><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;str3&quot;</span>, <span class="string">&quot;str4&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;<span class="comment">//0 1 2 3</span></span><br><span class="line"><span class="comment">// for in 保存键名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> v <span class="keyword">of</span> a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;<span class="comment">// str1 str2 str3 str4</span></span><br><span class="line"><span class="comment">// for of 保存键值</span></span><br></pre></td></tr></table></figure><p>工作原理</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next()方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直向后移动，直到指向最后一个成员</li><li>每调用next方法，返回一个包含value和done属性的值</li></ol><p>自定义遍历数组：使用迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">    name:<span class="string">&quot;1ban&quot;</span>,</span><br><span class="line">    stu:[<span class="string">&quot;1hao&quot;</span>,<span class="string">&quot;2hao&quot;</span>,<span class="string">&quot;3hao&quot;</span>,<span class="string">&quot;4hao&quot;</span>],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="comment">//索引变量</span></span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> _this=<span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">i&lt;_this.stu.length</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">const</span> result = &#123; <span class="attr">value</span>:_this.stu[i],<span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历这个对象</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> v <span class="keyword">of</span> banji</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);<span class="comment">//1hao    2hao    3hao     4hao </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>一个特殊的函数，异步编程，纯回调函数 node，fs，ajax，mongodb</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next;<span class="comment">//ƒ next() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;stop1&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;stop2&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator2 = gen2();</span><br><span class="line">iterator2.next;<span class="comment">//hello1</span></span><br><span class="line">iterator2.next;<span class="comment">//hello2</span></span><br><span class="line">iterator2.next;<span class="comment">//hello3</span></span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>异步编程的新解决方案</p><p>语法上Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</p><p>本质上 Promise 是一个函数返回的对象，我们可以在它上面绑定回调函数，这样我们就不需要在一开始把回调函数作为参数传入这个函数了</p><ol><li>Promise构造函数：Promise(excutor){}</li><li>Promise.prototype.then方法</li><li>Promise.prototype.catch方法</li></ol><p>实例化Promise对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;数据成功&#x27;</span>;</span><br><span class="line">        resolve(data);</span><br><span class="line">        <span class="comment">//失败</span></span><br><span class="line">        <span class="keyword">let</span> err = <span class="string">&#x27;数据失败&#x27;</span>;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;,<span class="number">1000</span>); </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用Promise对象的then方法</span></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>三种状态：pending，fulfilled，rejected</p><p>不同于以前的传入回调，使用Promise时</p><ol><li>在本轮事件循环运行完成之前，回调函数不会被调用</li><li>即使异步操作已经完成，在这之后通过then()添加的回调函数也会被调用</li><li>通过多次调用then()可以添加多个回调函数，会按照顺序执行</li></ol><p><strong>链式调用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">&#125;).then(</span><br><span class="line">    value=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;成功1&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    reason=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;失败1&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">).then(</span><br><span class="line">    value=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;成功2&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    reason=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;失败2&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">)<span class="comment">//成功1 成功2</span></span><br></pre></td></tr></table></figure><p><strong>宏任务与微任务</strong></p><pre><code class="javascript">setTimeout(() =&gt;&#123;    console.log(&quot;setTimeout,Here&quot;);&#125;,0);new Promise(resolve=&gt;&#123;    resolve();    console.log(&quot;promise&quot;);&#125;).then(value=&gt;console.log(&quot;success&quot;));console.log(&quot;here is 宏任务&quot;);//promise//here is 宏任务//success//setTimeout,Here## async和await两种语法结合可以让异步代码像同步代码一样1. async   async的返回值是promise对象   promise对象的结果由async函数执行的返回值决定</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个网页：结构+表现+行为&lt;/p&gt;
&lt;p&gt;HTML=结构&lt;/p&gt;
&lt;p&gt;CSS=表现&lt;/p&gt;
&lt;p&gt;JavaScript=行为&lt;/p&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="大学课程学习笔记" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>托福学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-01T03:26:14.000Z</published>
    <updated>2021-05-18T07:53:12.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h1><p>英语写作：语言逻辑+语言质量</p><h2 id="独立写作：总分并列"><a href="#独立写作：总分并列" class="headerlink" title="独立写作：总分并列"></a>独立写作：总分并列</h2><p>开头段（60）</p><ul><li>总论点1（160）<ul><li>分论点1</li><li>分论点2</li></ul></li><li>总论点2（160）<ul><li>分论点1</li><li>分论点2</li></ul></li></ul><p>结尾段（60）</p><a id="more"></a><p>图像化题目</p><p>​    Some students enjoy taking distance learning courses on the computer or television. Other students would rather take all of their courses with a teacher in classroom. Which is these options do you think is better?</p><p>distance learning —————&gt;good</p><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Desktop\图片\QQ截图20210301162548.png"></p><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Desktop\图片\QQ截图20210301162942.png" alt="QQ截图20210301162942"></p><p>总观点：在线教育好</p><p>好=对学习好+对个人发展好 <strong>切割逻辑重点</strong></p><p>对学习好：能让学生学习知识，所以好；能激发学生学习兴趣，所以好（理由说，中间环节）</p><p>对个人发展好： 在线教育对坚持不懈有好处；在线教育对人际关系有好处</p><h3 id="开头段"><a href="#开头段" class="headerlink" title="开头段"></a>开头段</h3><h4 id="现象引入"><a href="#现象引入" class="headerlink" title="现象引入"></a>现象引入</h4><p>N，同位语，has been valued and even triggers a heated discussion over 题目改写</p><p>N: 话题词汇/从题目中选择的中性词汇</p><p>同位语： </p><p>1）N为中性词，the foundation of a quality life</p><p>2）N为褒义词，the objective everyone strives for </p><p>题目改写：</p><p>whether/what引导的 名词性从句</p><p>Education, the foundation of a quality life, has been valued and even triggers a heated discussion over whether students should take courses online or in classrooms. </p><h4 id="对方观点"><a href="#对方观点" class="headerlink" title="对方观点"></a>对方观点</h4><p>主语， in some people’s views</p><p>说明观点即可，不需要增加理由</p><h4 id="自己观点"><a href="#自己观点" class="headerlink" title="自己观点"></a>自己观点</h4><p>Contrary to these people’s opinions is my perspective that… , due to …(the contributions to )</p><p>Contrary to these people’s opinions is my perspective that online learning, which requires students to attend classes on computers or televisions, is superior, due to the contributions to their academic performance and personal development.</p><h3 id="中间段"><a href="#中间段" class="headerlink" title="中间段"></a>中间段</h3><h4 id="总论点（概述下文内容）【长句】"><a href="#总论点（概述下文内容）【长句】" class="headerlink" title="总论点（概述下文内容）【长句】"></a>总论点（概述下文内容）【长句】</h4><p><strong>What must be prioritized is that</strong> <em>taking a distance-learning courses,</em> instead of having courses in traditional classrooms, <em>is beneficial to students’ academic learning</em>, by offering them more knowledge and triggering their enthusiasm in learning.</p><p>(对比反驳另外一个观点+提出分论点，与下文呼应)</p><h4 id="分论点1-抽出逻辑链，再进行切割-【短句】"><a href="#分论点1-抽出逻辑链，再进行切割-【短句】" class="headerlink" title="分论点1(抽出逻辑链，再进行切割)【短句】"></a>分论点1(抽出逻辑链，再进行切割)【短句】</h4><p><strong>To begin with</strong>, it is <em>online education</em> that provides students with the access to a large quantity of expertise.</p><p>distance learning ———-&gt;knowledge</p><h4 id="解释1-正面-反面-【长句】"><a href="#解释1-正面-反面-【长句】" class="headerlink" title="解释1(正面+反面)【长句】"></a>解释1(正面+反面)【长句】</h4><p><strong>In detail,</strong> on the Internet, students can acquire a wide range of knowledge in history, art and science, enlarging their knowledge base; <strong>in contrast</strong>, such a large amount of knowledge cannot be obtained when they are instructed by only one teacher in concrete classrooms. </p><p>对比时，针对正面论证写反面（正面：网上可以学到XXXXXX知识，反面：在线下不能学到）</p><h4 id="分论点2【短句】"><a href="#分论点2【短句】" class="headerlink" title="分论点2【短句】"></a>分论点2【短句】</h4><p><strong>Moreover</strong> ,never can we ignore the significance of distance education to students’ interest in learning.</p><p>distance learning———–&gt; interest</p><h4 id="解释2-正面-反面-【长句】"><a href="#解释2-正面-反面-【长句】" class="headerlink" title="解释2(正面+反面)【长句】"></a>解释2(正面+反面)【长句】</h4><p>（下切interest）</p><p><strong>To explain it further,</strong> by receiving education on the Internet, students will find it more interesting to deal with mathematical problems, do research, and write proposals; <strong>on the other hand</strong>, will they be passionate about the tasks when teachers always lecture in brick-and-mortar classrooms?</p><h3 id="中间段2"><a href="#中间段2" class="headerlink" title="中间段2"></a>中间段2</h3><p><strong>What should be equally worth discussing is that</strong> receiving distance education, rather than having traditional face-to-face courses, can promote students’ personal development, by honing their interpersonal skills and cultivating their persistence.</p><p><strong>To begin with</strong>, it is well-acknowledged that educated on the Internet, students can practice their communication skills.</p><p>新逻辑链：distance learning——-&gt;interpersonal</p><p><strong>Specifically</strong>, only in online learning environments will students come across people from backgrounds,such as classmates, instructors and school administrators, with whom they can practice their  socializing; <strong>on the contrary</strong>, under no circumstances will they interact with such a variety of people if they are educated in traditional classroom settings.</p><p><strong>Additionally,</strong> when having a distance education program, students will become more determined.</p><p>新逻辑链： distance learning———-&gt;persistence</p><p><strong>To be more specific</strong>, the more distance-learning courses they take on the Internet, the more distractions they will be exposed to, stimulating them to resist temptations and foster their persistence; <strong>however</strong>, it is impossible for them to encounter these lures in traditional classrooms.</p><h3 id="结尾段"><a href="#结尾段" class="headerlink" title="结尾段"></a>结尾段</h3><h4 id="总结总论点1"><a href="#总结总论点1" class="headerlink" title="总结总论点1"></a>总结总论点1</h4><p>Academic performance, <strong>the foundation of students’ future development</strong>, will be boosted when they receive online education.</p><h4 id="总结总论点2"><a href="#总结总论点2" class="headerlink" title="总结总论点2"></a>总结总论点2</h4><p>Personal development, <strong>essential contributors to students’ future success</strong>, will be facilitated, if they are educated on the Internet.</p><h4 id="总结全文"><a href="#总结全文" class="headerlink" title="总结全文"></a>总结全文</h4><p><strong>To conclude, only be ** having distance education, **instead of ** being taught in classrooms, **can</strong> students reap numerous benefits.  </p><h3 id="模板句式总结"><a href="#模板句式总结" class="headerlink" title="模板句式总结"></a>模板句式总结</h3><p>开头段</p><ol><li>…, 同位语， has been valued and even triggers a heated discussion over…</li><li>…, in many people’s views, …</li><li>Contrary to these people’s opinions is my perspective that … ,due to the contributions to … and …</li></ol><p>中间段</p><ol><li>What must be prioritized is that …/What is equally worth discussing is that…</li><li>Initially, /First, /To begin with,</li><li>To be more specific,/Specifically/ In detail, /To explain it further… + 对比： however/in contrast, /on the contrary / on the other hand</li><li>Moreover/Additionally/Furthermore</li><li>To be more specific,/Specifically/ In detail, /To explain it further… + 对比： however/in contrast, /on the contrary / on the other hand</li></ol><p>结尾段</p><ol><li>…, 同位语， will…</li><li>…, 同位语， will…</li><li>In conclusion , only + 状语 + 半倒装</li></ol><h3 id="主要话题"><a href="#主要话题" class="headerlink" title="主要话题"></a>主要话题</h3><ol><li>教育类<ol><li>学生层面<ol><li>academic learning: more knowledge(1-4); trigger interest(5-7)<ol><li>acquire/gain/obtain/attain academic expertise/knowledge</li><li>broaden/extend/improve/increase knowledge</li><li>sth can provide students with the access to a wide range of/ considerable/comprehensive knowledge</li><li>enrich their knowledge/ enlarge their knowledge base</li><li>excite/ generate/stimulate/trigger/motivate students’ interest/passion/enthusiasm</li><li>participate in/ engage themselves in/ involve themselves in/be engaged in/ be involved in</li><li>allocate/distribute time to doing </li></ol></li><li>skills: interpersonal skills(1-6), time management skills(7,8)<ol><li>extracurricular/after-school activities</li><li>hone/ practice/ develop skills</li><li>cultivate/foster/nurture/shape one’s personalities/characteristics</li><li>interpersonal/communicative/social skills/ tactics/strategies</li><li>converse/ interact/ socialize with sb</li><li>people from assorted/diverse/various/a variety of backgrounds and cultures.</li><li>label and arrange them in the order of urgency</li><li>prioritize task in demand for /demanding/ requiring instant/immediate attention</li></ol></li><li>qualities: independent, persistent(2-5)<ol><li>independence and autonomy/ self-reliance/ self-determination</li><li>confront/ be confronted with/ in the confrontation of</li><li>hardships/ obstacles/adversities/enigmas/frustration/desperation</li><li>persistence/perseverance/grit</li><li>achieve success regardless of/ disregarding any setbacks</li></ol></li><li>professional development: locate careers,(123) promote(45)<ol><li>be competitive in </li><li>win/gain/attain/obtain competitiveness/competitive edges in</li><li>locate/ pursue/ hunt for/ search for career</li><li>get promotion/ advancement</li><li>move up one’s career ladder</li></ol></li></ol></li><li>教师层面<ol><li>benefit students</li><li>benefit teachers<ol><li>teaching methods<ol><li>diverse/assorted/a variety of/ numerous/ excessive/ substantial</li><li>teaching/ pedagogical/ instructional + tactics/approaches/strategies/ techniques</li><li>involve/ engage students in discussions</li><li>increase/boost/enhance + students’ engagement/involvement</li></ol></li><li>achievement/ satisfaction/ motivation<ol><li>a sense of achievement/motivation/attainment/accomplishment</li><li>motivate/ stimulate/ urge/ spur/ inspire sb to do</li></ol></li></ol></li></ol></li><li>学校层面<ol><li>benefit students</li><li>benefit schools<ol><li>enrollment/reputation<ol><li>prestigious/renowned/well-known</li><li>lead to / contribute to / result in enrollment growth</li><li>increase/enhance/boost enrollment rate</li><li>regard/consider as the most essential/vital/decisive/dominant/prominent + element/ingredient/factor/component in their college search process</li></ol></li><li>donation(from alumni, company)<ol><li>a quality/ well-rounded/ decent/ first-class education</li><li>boost/raise/increase a school’s revenue</li><li>build/ establish alumni links</li></ol></li></ol></li></ol></li></ol></li><li>工作类<ol><li>员工层面<ol><li>benefits of high salaries<ol><li>improve one’s professional life</li><li>improve one’s personal life(oneself+family members)–work</li></ol></li><li>benefit of 另一点</li><li>embark on a career(着手工作)</li></ol></li><li>职业生活<ol><li>efficient(reduce time/errors);<ol><li>increase/improve/boost/enhance productivity/efficiency</li><li>lower/undermine/impair/hamper productivity</li><li>eliminate personal distractions/distractors/interruptions 减少干扰</li><li>rectify/correct/revise errors</li><li>decrease the risks/chances/possibilities/likelihoods of errors </li></ol></li><li>relationship(with colleagues/employers/clients)<ol><li>employees/ subordinates/ co-workers/ colleagues/ fellow workers</li><li>render assistance to sb</li><li>move up a career ladder</li><li>sth ensure/guarantee/secure + promotion/advancement</li><li>sb promotion/advancement</li></ol></li></ol></li><li>老板层面<ol><li>efficient: reduce time/ reduce errors</li><li>relationship with subordinates/ clients</li></ol></li><li>公司层面<ol><li>inner operation<ol><li>efficiency</li><li>relationship</li></ol></li><li>external development<ol><li>reputation: attract other</li><li>donation, investment and client</li></ol></li></ol></li></ol></li><li>品质类（品质成功、以貌取人）<ol><li>品质成功<ol><li>efficiency<ol><li>reduce time</li><li>reduce errors(concentrate/misunderstanding)</li></ol></li><li>assistance<ol><li>from parents</li><li>from strangers</li></ol></li><li>triumph/satisfaction/prosperity/success/achievement</li><li>accomplish/achieve/attain/fulfill/meet/reach an objective/target/aim</li><li>pursue their dreams/ in the pursuit of their dreams</li><li>strive for / struggle for + a dream</li><li>realize one’s dream/ reach a dream</li></ol></li><li>以貌取人<ol><li>vary constantly VS personalities<ol><li>mood</li><li>seasons/fashion/ages/living places</li></ol></li><li>uniform<ol><li>at the workplace</li><li>at school</li></ol></li><li>leave a favorable/ good/ positive impression on </li></ol></li></ol></li><li>生活类（健康+朋友+买）<ol><li>health<ol><li>physical health<ol><li>exercise/ do physical activities/ be physically active</li><li>keep a sedentary life/ lead a sedentary lifestyle</li><li>distract/prevent/exclude sb from a sedentary lifestyle</li></ol></li><li>mental health<ol><li>pressure/ tension/ stress</li><li>undergo/ experience/ endure/ suffer from</li><li>cope with/ deal with / handle/ address/ tackle/ combat pressure</li><li>adopt…as a stress-relief/stress-reducing strategy/ adopt… as a stress reducer</li><li>alter one’s stress level(减少压力)</li><li>distract sb from</li><li>daily/ routine worries/concerns/trivia</li><li>happiness/ delight/ elation/ enjoyment/joy/ exhilaration/ contentment</li></ol></li></ol></li><li>relationship<ol><li>new friends<ol><li>build/establish + relationship/connection/bond</li><li>a close/strong/intimate/harmonious bond</li><li>encounter/come across/get acquainted with</li><li>expand/extend one’s current social circle/network</li><li>a wider/larger friend circle</li></ol></li><li>old friends<ol><li>maintain/strengthen relationship/connection/bond</li><li>acquainted friends/ companions</li></ol></li><li>communicate</li><li>assistance</li></ol></li><li>买 切物品<ol><li>students: computers, sport equipment</li><li>adults: mobile phones, automobiles</li><li>professional life: computers, automobiles</li><li>personal life: mobile phones, sports equipment</li></ol></li></ol></li><li>友谊类<ol><li>友谊杀手<ol><li>communication（无法交流）<ol><li>topics</li><li>time</li></ol></li><li>assistance（无法帮助）<ol><li>solve problems in the workplace</li><li>solve problems in the daily life</li></ol></li></ol></li><li>友谊意义</li></ol></li></ol><h2 id="综合概述：对比总分"><a href="#综合概述：对比总分" class="headerlink" title="综合概述：对比总分"></a>综合概述：对比总分</h2><h3 id="笔记记什么？"><a href="#笔记记什么？" class="headerlink" title="笔记记什么？"></a>笔记记什么？</h3><p>专有名词：固定说法，很难找到同义词的名词</p><p>意思（逻辑）</p><p>转折逻辑: however,but,although</p><p>并列逻辑: and, also, moreover, in addition</p><p>总分逻辑: such as, for example, one of which</p><p>因果逻辑: because , so,thus, therefore</p><p>顺序逻辑: first, and then, when, after</p><h4 id="综合写作本质（对比感）"><a href="#综合写作本质（对比感）" class="headerlink" title="综合写作本质（对比感）"></a>综合写作本质（对比感）</h4><p><em>In an academic course, a student might be asked to compare and contract the points of view expressed by the professor in class with those expressed by an author in the assigned reading materials. The student must successfully draw information from each source to explain the contrast</em>.</p><p>读到的东西+上课讲到的东西有什么不同，从材料中提取筛选信息<strong>（专有名词+意思逻辑）</strong>，解释对比</p><h3 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h3><h4 id="开头段-1"><a href="#开头段-1" class="headerlink" title="开头段"></a>开头段</h4><p>主题词，（3个）XX</p><p>读完一整段在做笔记</p><h4 id="中间段-1"><a href="#中间段-1" class="headerlink" title="中间段"></a>中间段</h4><p>TS（主题句）关键词：总分专名（核心细节）</p><p>核心细节→支持中心句的细节</p><h3 id="听力笔记"><a href="#听力笔记" class="headerlink" title="听力笔记"></a>听力笔记</h3><p>TS可能在开头，可能在结尾</p><p>（主）<strong>对比</strong>专名（反驳阅读的专有名词）</p><p>（次）逻辑符号</p><h4 id="开头段-2"><a href="#开头段-2" class="headerlink" title="开头段"></a>开头段</h4><p>记录男女</p><p>听，脑记意思，关注主旨句</p><h4 id="中间段-2"><a href="#中间段-2" class="headerlink" title="中间段"></a>中间段</h4><p>听＞笔记</p><p>尽记录反驳阅读的专有名词（对比专名）+明显简单的逻辑</p><h4 id="补笔记"><a href="#补笔记" class="headerlink" title="补笔记"></a>补笔记</h4><p>3,1,2 的顺序，用汉语串意思，把缩写单词补完整</p><h3 id="综合写作模板结构"><a href="#综合写作模板结构" class="headerlink" title="综合写作模板结构"></a>综合写作模板结构</h3><p><strong>主题（主语从句）</strong> is the focus of both the writer and the professor. In the writing, three 三个TS所属类别，including A,B and C, have been elaborated. The professor, however, claims that 听力主旨.</p><p>As opposed to the writer’s idea that 阅读的TS1, the professor states that 听力的TS1. He/She advances the theory by saying that 听力的细节.</p><p>The professor continues to discredit the writing’s assertion that 阅读TS2, by examining the fact that 听力的TS2. In detail, he/she points out that 听力的细节.</p><p>It is the professor’s third argument that 听力的TS3, which contradicts the view of the writer that 阅读的TS3. To explore deeper, the professor extends that 听力的细节.</p><p>An apparent divide exists between the writer and the professor on 主题（名词）.</p><h3 id="对比意识：听力和阅读的对比内容"><a href="#对比意识：听力和阅读的对比内容" class="headerlink" title="对比意识：听力和阅读的对比内容"></a>对比意识：听力和阅读的对比内容</h3><p>一个细节是否需要写取决于是否有反驳</p><h3 id="读者意识：没有读过阅读没有听过听力的人能看懂"><a href="#读者意识：没有读过阅读没有听过听力的人能看懂" class="headerlink" title="读者意识：没有读过阅读没有听过听力的人能看懂"></a>读者意识：没有读过阅读没有听过听力的人能看懂</h3><p>对文章主题词进行解释，尽可能描述清楚直接</p><p><em>What were the functions of the carved stone balls carved from different types of stones</em> is the focus of both the writer and the professor. In the writing, three <em>uses including weapons, standard weights and social status markers</em> have been elaborated. The professor, however, claims that <em>these purposes are not convincing</em>.</p><ul><li>对主题词进行解释</li><li>including总分逻辑，后面+名词或动词ing</li><li>时态：模板里一般现在时，内容根据具体动作时间判断，如果判断太难，都和阅读保持一致</li></ul><p>第一个理由段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">笔记：</span><br><span class="line">1. weapons: hole, groove, cord</span><br><span class="line">wear</span><br><span class="line">pieces</span><br><span class="line">surface</span><br><span class="line">x wear</span><br><span class="line">x damage</span><br></pre></td></tr></table></figure><p> As opposed to the writer’s idea that <em>carved stone balls could be hunting weapons</em>, the professor states that <em>they lacked signs of wear supposed to appear on weapons</em>. She advances the theory by saying that <em>common weapons generally show wear, for instance, having pieces broken off, but the surfaces of carved stone balls did not show wear of damage</em>.</p><ul><li>不要连续抄阅读的五个词汇，进行词汇变化或句式变化</li><li>听力用自己的话说，但保留对比专名和逻辑关系</li><li>听力的解释用一个句子，可用and, but, or, so 连词，或用分号断句</li><li>对比总分逻辑</li></ul><p>第二个理由段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">笔记：</span><br><span class="line">2. weight measure: size&#x2F;diameter</span><br><span class="line">mass</span><br><span class="line">stones</span><br><span class="line">density</span><br><span class="line">→weight</span><br></pre></td></tr></table></figure><p>The professor continues to discredit the writing’s assertion that <em>carved stone balls, uniform in sizes, could be used to weigh and measure</em> by examining the fact that <em>though having the same sizes, they were different in masses, making it impossible for them to be standard weights</em>. In detail, she points out that <em>carved stone balls were made of different types of stones, with distinct density. Consequently, they, in the uniform size, varied in weight and could not be adopted as weighing systems</em>.</p><p>第三个理由段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">笔记：</span><br><span class="line">3. social: design, status</span><br><span class="line">①. pattern</span><br><span class="line">markings</span><br><span class="line">status system</span><br><span class="line">②. rank</span><br><span class="line">possess</span><br><span class="line">tomb</span><br><span class="line">grave</span><br></pre></td></tr></table></figure><p>It is the professor’s third argument that <em>some balls’ simple patterns and the lack of evidence as possessions indicate that they were not social status markers</em>, which contradicts the view of the writer that <em>they, with intricate designs, could mark their owners’ social status</em>. To explore deeper, the professor contends that <em>admittedly, some balls were carved with elaborate designs, but others had markings that were too simple for balls to be status symbols. <u>Moreover,</u> unlike possessions, which people with high ranks were usually buried with, carved stone balls were not found in tomb or graves, showing that they were not possessions to represent social status.</em></p><p>结尾：</p><p>An apparent divide exists between the writer and the professor on <em>the purposes of carved stone balls</em>.</p><hr><p>​p><h1 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h1><h3 id="结构式阅读法"><a href="#结构式阅读法" class="headerlink" title="结构式阅读法"></a>结构式阅读法</h3><p>skimming ＞＞ scanning</p><p>考察频率最高的文章类型：生命科学类，历史类，社会类，考古类</p><h3 id="词汇题"><a href="#词汇题" class="headerlink" title="词汇题"></a>词汇题</h3><p>顺逻辑： ，（）；：are, and, so that(原因在so that前), by(原因在by后), since, -that, also</p><p>逆逻辑： <strong>neg</strong>ligible - no逆逻辑对应， although,  while（大多时候表示转折）, by comparison, whereas</p><ol><li><p>The most widely <strong>accepted</strong> theory, <u>championed</u> by anthropologists in the late nineteenth and early twentieth centuries, envisions theater as emerging out of myth and ritual. </p><p>championed 最近义词： changed/ debated / created / <strong>supported</strong></p><p>因为逗号顺逻辑→和accepted意思相近→排除前两个反意思的→accept的不一定是create的，但create的一定是accept的，create被accept包含；support与accept范围更相近</p></li><li><p>if it seems difficult to conceive how major <strong>changes</strong> could occur rapidly, consider this: an <u>alteration</u> of a single gene in files is enough to turn a normal fly with a single pair of wings into one that has two pairs of wings. </p><p>alteration最近义词：imperfection/ replacement/ <strong>change</strong>/ duplication</p><p>逗号和冒号都是顺逻辑→ imperfection, replacement和duplication 都是change的一种，意思被包含，故选change</p></li><li><p>Another seemingly <u>plausible</u> explanation –that infants do not form enduring memories at this point in development –also is incorrect.</p><p>plausible最近义词： flexible/ <strong>believable</strong>/ debatable/ predictable</p><p>–that –also都是顺逻辑→ 前段意思和incorrect一样→seemingly XXX 通常实际表反义（他看起来是个好人→他不是个好人）→seemingly plausible表示incorrect, plausible表示correct</p></li></ol><p>词汇前后缀</p><ul><li>neg-逆逻辑</li><li>in- 否定</li><li>pro- 前，进，伸</li><li>uni- 唯一，一致</li><li>ex- 否定，外向</li><li>com- co- 共同</li><li>var- 变化</li><li>terr- 地面，地况</li><li>de- 否</li><li>im- 不能</li></ul><h3 id="细节题-事实信息题"><a href="#细节题-事实信息题" class="headerlink" title="细节题 事实信息题"></a>细节题 事实信息题</h3><p>According to paragraph X, ……..</p><p>定位词，关键词</p><p>选项与题目与文章对应：主干要对，逻辑要对</p><p>虚假绝对逻辑，虚假否定逻辑，虚假比较逻辑，虚假上下逻辑，虚假因果逻辑，虚假转折逻辑，虚假并列逻辑</p><p>时间和地点：定位词+逻辑分割点</p><p>无、反、混、偏、满</p><p>绝对词＜比较＜上升/下降</p><p>永远最后验证最有可能错的选项（绝对词）</p><p>选项中可能存在（关键词的选择原则）    </p><ol><li><p>转折</p><ul><li>转折 however, rather than, instead of , but ,yet, on the other hand, unfortunately, nevertheless</li><li>让步 although, after all, in spite of… , despite, even if, even though, admittedly</li></ul></li><li><p>对比</p><p>by contrast, on the contrary, contradict, while, whereas, however, unlike,</p></li><li><p>因果</p><ul><li>原因 for this reason, due to, thanks to</li><li>结果 evidently, effect, thus,hence, therefore, accordingly, consequentlt</li><li>结尾 therefore, as a result, then, consequently</li><li>结论 in a word, in conclusion, therefore</li></ul></li><li><p>态度观点词</p><ul><li>正面 emphasize, illustrate, acknowledge, explain, account for</li><li>负面 question, argue against, refute</li><li>中性 present/pose, introduce,indicate, conclude, reveal </li></ul></li><li><p>顺序</p></li><li><p>判断</p></li><li><p>比较选择（与文中的动词替换）</p><ul><li>not a ,but rather b</li><li>no longer a but b</li><li>not a ,instead b</li></ul></li><li><p>上升下降，绝对词……</p></li></ol><p>隐性因果关系词：通过（by），由于（out of），导致（bring…to…），时间（when）</p><p>逻辑分割后，在明显分割线以外的部分出现的词都不对</p><p>因果/果因分清楚：A as B = B so A(B是因，A是果)</p><p>结构阅读 + 关键词选择 + 逻辑细节分割</p><h3 id="否定事实信息题"><a href="#否定事实信息题" class="headerlink" title="否定事实信息题"></a>否定事实信息题</h3><p>According to ……., which of the following is <strong>NOT</strong> true of ….? The author …. <strong>EXCEPT</strong>…</p><p>特点</p><ul><li>对应原文某一处描述（通常为举例：注意include等分类逻辑词） （大多情况）</li><li>对应原文两处/两处以上描述，通常为分散举例/排比（未被选择的选项应该和原文构成一一对应）</li><li>顺序性</li></ul><p><strong>选项</strong>核心定位</p><ul><li>一次性找出四个选项的定位词</li><li>全部记在纸上</li><li>每浏览段落的1-2句话，交叉对比四个选项的定位词</li><li>一旦一个选项锁定，留意附近是否有其它选项</li></ul><h3 id="推理题"><a href="#推理题" class="headerlink" title="推理题"></a>推理题</h3><p>infer/ imply / suggest / indicate / most likely</p><p>细节题+正/反向推断</p><p>反向推理：转折词，否定词，反义词，时间地点（出现这四个信号词，优先从反推入手）</p><p>反推选项 主干信息，否定/反义逻辑</p><p>优先看并列（多信息）</p><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Documents\lzhelloblog\lzhelloblog\source_posts\托福学习-reading\QQ截图20210314194313.png" alt="QQ截图20210314194313"></p><p>LF 负面(unfulfilling) artist ＞ entertainer  →  <em>由负面推断</em>  事实: entertain ＞ art </p><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Desktop\图片\QQ截图20210314205619.png" alt="QQ截图20210314205619"></p><p>英国商人operate credit → 推理出 其他非英国人 not operate credit  →  选项 most European not operate</p><h3 id="句子简化题"><a href="#句子简化题" class="headerlink" title="句子简化题"></a>句子简化题</h3><p>文中一个长句子被阴影标出来 Which of the sentences below best express the essential information in the highlighted sentence in the passage? Incorrect choice change the meaning in important ways or leave out essential information.</p><p>步骤</p><ol><li>逻辑词判断</li><li>内容判断<ol><li>主干内容</li><li>次要内容</li></ol></li></ol><p>否定：明显（no, not, none, never, neither, deny），隐含（fail to, absent from, lack, lack of, refuse)</p><p>因果：明显（because, since, for, as, due to, owing to), 隐含（come from, result from, derive from, initiate from; reflect, present, suggest, show,imply, demonstrate; considering, on account of, in view of, rely on; when, while, as long as)</p><p>比较：同类比较/比较级， 隐含（change, vary, alter, modify, revise, increase; same, different; surpass,exceed,transcend, excel）</p><p>最高级/绝对化 ： 明显， 隐含（自身有最高级含义：maximum,minimum, outstanding, extreme； 程度深的词 surpriseingly, amazingly,prohibitively）</p><p><strong>错误选项</strong>： 极端词、虚假逻辑、细节过分放大、引入原文未出现的逻辑/内容、缺少核心逻辑/内容</p><p><strong>居中原则</strong> 当句子中出现多个逻辑词的时候，从最靠近句子中部位置的逻辑词入手</p><p>这类题目中，给的题干句子通常是逻辑的组合（比如 并列+因果，转折+因果等），则可以排除缺少组合中的某一种逻辑的选项。</p><p>题干句子没有什么特别的逻辑的情况下，选项可能会自己添加逻辑（虚假的转折，因果），排除</p><p>not only…. but also…. 并列逻辑</p><p>破折号里面的细节内容</p><h3 id="指代题"><a href="#指代题" class="headerlink" title="指代题"></a>指代题</h3><p>The word XXX in the passage refers to?</p><ol><li>语法原则：单复数一致，人称一致 </li><li>前置原则：正确答案必在所考代词之前（优先主语，其次最近信息-主干信息）</li><li>句内原则：正确答案与所考代词通常出现在<strong>同一句内</strong>，除非代词位于句首/出现指代的传递</li><li>语义原则：代入并翻译成中文验证</li></ol><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Desktop\图片\QQ截图20210315145357.png" alt="QQ截图20210315145357"></p><p>not only… but also… 并列，所以BC不对</p><p>修饰成分非主干，不选</p><h3 id="修辞目的题"><a href="#修辞目的题" class="headerlink" title="修辞目的题"></a>修辞目的题</h3><p><strong>对具体信息目的的提问</strong>：作者举了个例子，题目问作者为什么要举着个例子</p><ul><li>The author discuss X in order to …?</li><li>Why does the author mention X?</li><li>The author uses X as an example of…?</li></ul><p>正确答案通常会包含：论点，论据，论点论据之间的支持/反对关系</p><p>论点论据-核心功能性词汇</p><p>正： to emphasize, to illustrate, to suggest, to provide an example, to cite evidence, to acknowledge</p><p>反： to question, argue against, differentiate/distinguish, compare, contrast, refute, digress, contradict</p><p><strong>对段落目的的提问</strong>： 段落的主旨是？</p><ul><li>what is the purpose of paragraph X?</li><li>what is the structure of paragraph X?</li><li>what is the main point of paragraph X?</li></ul><p><strong>对段间关系的提问</strong>： 某一段和其他段的关系是什么？这一段在全文中有什么作用？(Topic Sentence)</p><ul><li>How is the paragraph X related to other parts of the passage?</li></ul><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Desktop\图片\QQ截图20210315175122.png" alt="QQ截图20210315175122"></p><p>信息封装- A 如何作用于 B</p><p>作用：逻辑关键词、功能性关键词、both</p><p>验证作用：确定论点论据的角色，确定论点论据的正负逻辑</p><p>隐形例证：信息具体时（具体人物，具体地点，具体时间，具体数据），可判定为论据</p><p>不能破坏封装：XXXX作为一个整体，里面的词不会再出现在选项里</p><p>句段逻辑关系：问题解决型、现象解释型、新老观点对比型</p><h3 id="句子插入题"><a href="#句子插入题" class="headerlink" title="句子插入题"></a>句子插入题</h3><p>衔接手段：词汇，逻辑，语法</p><p>先总再分（线性思维原则）</p><p><img src="/lzhello/lzhello.github.io.git/2021/03/01/%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0/Users\HSKyon\Desktop\图片\QQ截图20210316120135.png" alt="QQ截图20210316120135"></p><p>everyday household tasks包括 cliff dwelling, hauling water, woodand food</p><h3 id="主旨题"><a href="#主旨题" class="headerlink" title="主旨题"></a>主旨题</h3><p>最后一个题，选中三个=2分，选中两个=1分</p><p>正确：全文主题、一个或多个段落概述（多为概括性描述，可能找不到对应原文）</p><p>错误：与原文矛盾、原文没有明确提及、过于细枝末节</p><p>10秒蒙：选最长的三个句子</p><p>1-2分钟：精读介绍句，筛选关键词（介绍句的主干，标题，或文章中高频词）</p><p>3分钟+：精度介绍句，review text，记录每段主题句（首尾句）的要点</p><p>排除：</p><ol><li>排除带有解释修饰成分的且修饰对象和内容都为不重要内容的选项</li><li>排除主语为细节的选项</li><li>排除小举例（只提到过一次，未展开，连续列举的举例）</li></ol><p>主要细节：直接支持文章，对理解文章必不可少</p><p>次要细节：支持主要细节，删除后也不影响文章主题</p><hr><h1 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h1><p>讲座+对话</p><h3 id="主旨题-1"><a href="#主旨题-1" class="headerlink" title="主旨题"></a>主旨题</h3><p>key words:</p><p>排除原则：比较、变化、上节课内容、细节、反向</p><h3 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h3><p>1 conversation, 3 minutes, 5 questions</p><p>problem-solving:</p><ol><li>提出问题：直接引出（回答/未回答)、间接引出</li><li>分析问题：围绕问题展开讨论的新信息（提问+因果，并列，第三者，态度和语气)</li><li>解决问题</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Writing&quot;&gt;&lt;a href=&quot;#Writing&quot; class=&quot;headerlink&quot; title=&quot;Writing&quot;&gt;&lt;/a&gt;Writing&lt;/h1&gt;&lt;p&gt;英语写作：语言逻辑+语言质量&lt;/p&gt;
&lt;h2 id=&quot;独立写作：总分并列&quot;&gt;&lt;a href=&quot;#独立写作：总分并列&quot; class=&quot;headerlink&quot; title=&quot;独立写作：总分并列&quot;&gt;&lt;/a&gt;独立写作：总分并列&lt;/h2&gt;&lt;p&gt;开头段（60）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总论点1（160）&lt;ul&gt;
&lt;li&gt;分论点1&lt;/li&gt;
&lt;li&gt;分论点2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总论点2（160）&lt;ul&gt;
&lt;li&gt;分论点1&lt;/li&gt;
&lt;li&gt;分论点2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结尾段（60）&lt;/p&gt;</summary>
    
    
    
    
    <category term="英语" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>前端面试 知识学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/02/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%20%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/02/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%20%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-25T13:20:19.000Z</published>
    <updated>2021-06-01T16:58:46.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端面试中的重要考点"><a href="#前端面试中的重要考点" class="headerlink" title="前端面试中的重要考点"></a>前端面试中的重要考点</h2><ul><li>HTML与CSS</li><li>原型，作用域，异步</li><li>DOM事件与Ajax</li><li>性能优化</li><li>手写代码</li><li>HTTP协议</li></ul><a id="more"></a><p>CSS：布局，定位，移动端响应式</p><p>ES语法：原型&amp;原型链，作用域&amp;闭包，异步&amp;单线程</p><p>Web API： DOM&amp;BOM， Ajax跨域，事件存储</p><p>开发环境：版本管理，调试抓包，打包建构</p><p>运行环境：页面渲染，性能优化，Web安全</p><p>网络通讯： headers，Restful API， 缓存策略</p><h2 id="面试题体验"><a href="#面试题体验" class="headerlink" title="面试题体验"></a>面试题体验</h2><ul><li>typeof能判断的类型？【考点：JS变量类型】</li><li>何时使用===何时使用==？【考点：强制类型转换】</li><li>window.onload和DOMContentLoaded区别？【页面加载过程】</li><li>JS创建10个&lt;a&gt;标签，点击弹出对应序号 【JS作用域】</li><li>手写节流throttle和防抖debounce【性能体验优化】</li><li>Promise解决什么问题？【JS异步】</li></ul><h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><p>JD分析+简历准备</p><p><a href="http://www.imooc.com/article/300475">面试中应避免的几种情况</a></p><hr><h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li>如何理解HTML语义化（根据具体内容，选择合适的标签进行代码的编写，少用div和span）<a href="https://www.jianshu.com/p/6bc1fc059b51">如何理解HTML结构的语义化？</a></li></ol><ul><li>让人更容易读懂（增加代码可读性）</li><li>让搜索引擎更容易读懂（SEO）</li></ul><ol start="2"><li><p>SEO</p><p>前端需要注意哪些SEO</p><ul><li>合理的title、description、keywords：搜索对这三项的权重逐个减小；<ul><li>title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；</li><li>description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；</li><li>keywords列举出重要关键词即可</li></ul></li><li>语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li><li>重要内容不要用js输出：爬虫不会执行js获取内容</li><li>少用iframe：搜索引擎不会抓取iframe中的内容</li><li>非装饰性图片必须加alt</li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><p>如何做SEO优化?</p><ul><li><strong>标题与关键词</strong><ul><li>设置有吸引力切合实际的标题，标题中要包含所做的关键词</li></ul></li><li><strong>网站结构目录</strong><ul><li>最好不要超过三级，每级有“面包屑导航”，使网站成树状结构分布</li></ul></li><li><strong>页面元素</strong><ul><li>给图片标注”Alt”可以让搜索引擎更友好的收录</li></ul></li><li><strong>网站内容</strong><ul><li>每个月每天有规律的更新网站的内容，会使搜索引擎更加喜欢</li></ul></li><li><strong>友情链接</strong><ul><li>对方一定要是正规网站，每天有专业的团队或者个人维护更新</li></ul></li><li><strong>内链的布置</strong><ul><li>使网站形成类似蜘蛛网的结构，不会出现单独连接的页面或链接</li></ul></li><li><strong>流量分析</strong><ul><li>通过统计工具(百度统计，CNZZ)分析流量来源，指导下一步的SEO</li></ul></li></ul></li><li><p>默认情况下，哪些HTML标签是块级元素，哪些是内联元素/行内元素</p></li></ol><ul><li><p>display:block/table    div, h1,h2, table, ul, ol, p    独占一行</p></li><li><p>display:inline/inline-block     span, img, input, button, em</p></li></ul><ul><li><p>block、inline、inline-block 的区别</p></li><li><p>block 块元素独占一行，宽度自动填充为父元素宽度。元素的高度、宽度、行高以及顶和底边距都可设置。即使设置了宽度,仍然是独占一行。例如，<code>div, p</code></p></li><li><p>inline 元素，多个该元素排列在一行，直到超出，才会换新一行，其宽度随元素内容而变化。width,height 属性无效，垂直方向的 padding 和 margin 会失效。例如，<code>a, span</code></p></li><li><p>inline-block：既具有 block 的宽度高度特性又具有 inline 的同行特性。例如，<code>img,input</code></p></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS：布局，定位，图文样式，响应式，CSS3</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ol><li><p>盒子模型的宽度如何计算？</p><p>offsetWidth=content+padding+border（没有margin）</p><p>如果要指定offsetWidth的大小：box-sizing = border-box;（width不再是content宽度，而是整个box宽度，规定容器元素的最终尺寸计算方式，默认值是content-box</p></li><li><p>margin纵向重叠问题</p><p>相邻元素的margin-top和margin-bottom会发生重叠，空白内容的p标签也会重叠</p></li><li><p>margin负值的问题</p><p>对margin的top，left，right，bottom设置负值会发生什么</p><p>margin-top和margin-left设置负值，元素会向上/向左移动</p><p>margin-right负值，右侧元素左移，自身不受影响</p><p>margin-bottom负值，下方元素上移，自身不受影响</p></li><li><p>BFC的理解与应用</p><p>什么是BFC？怎么应用？</p><p>block format context，块级格式化上下文</p><p>独立渲染区域，内部元素的渲染不会影响到边界以外的元素</p><p>形成BFC的条件：</p><ul><li>float不是none；</li><li>position是absolute或者fixed；</li><li>overflow不是visible；</li><li>display是flex inline-block等</li></ul><p>BFC的常见应用：清除浮动，</p></li><li><p>float布局的问题，clearfix</p><p>如何实现圣杯布局和双飞翼布局</p><p>目的：三栏布局，中间一栏最先加载和渲染（内容最重要）；两侧内容固定，中间内容随着宽度自适应；一般用于PC网页</p><p>技术总结：使用float布局；两侧使用margin负值，以便和中间的内容横向重叠；防止中间内容被两侧覆盖，一个用padding（圣杯）一个用margin（双飞翼）；</p><p>手写clearfix</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flex</p><p>Flex 是弹性布局，用来为盒状模型提供最大的灵活性，传统布局方式依赖 position、float 和 display 属性，对特殊布局不方便。</p><p>通过flex实现三点骰子</p><p>常见语法：</p><p>flex-direction:主轴的方向，可横向可纵向</p><p>justify-content: 主轴对齐方式</p><p>align-items: 交叉轴对齐方式</p><p>flex-wrap: 是否换行 </p><p>align-self: 子元素对齐方式</p></li><li><p>元素消失</p><p>visibility=hidden, opacity=0，display:none</p><ul><li>opacity=0，元素隐藏，不改变页面布局，可触发绑定事件</li><li>visibility=hidden，元素隐藏，不改变页面布局，不会触发绑定事件</li><li>display=none，元素隐藏，改变页面布局，可以理解成在页面中把该元素删除掉一样。</li></ul></li><li><p>position属性</p><ul><li>fixed：相对浏览器窗口固定，即使窗口滚动它也不懂，不在文档流中，fixed 元素可与其余元素重叠</li><li>relative：相对于自身原本位置偏移，元素在文档流中仍占据原来的空间</li><li>absolute：相对于最近的父元素定位，不在文档流中</li><li>static：默认值，没有定位，出现在正常的文档流中，忽略任何 top,buttom,left,right 声明</li><li>sticky：元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。一个 sticky 元素会“固定”在离它最近的一个拥有“滚动机制”的祖先上。</li></ul></li></ol><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li><p>absolute和relative分别依据什么定位？</p><p>relative依据自身定位；absolute依据最近一层的定位元素定位</p><p>定位元素：absolute，relative，fixed，inherit</p></li><li><p>居中对齐有哪些实现方式？</p><p>水平居中</p><ol><li>inline元素：text-align: center </li><li>block元素：margin: auto</li><li>absolute元素：left:50% + margin-left负值（left50%让元素左边界在父元素正中间，50%是父元素宽度的50%，然后再用margin-left左移半个自身 </li></ol><p>垂直居中</p><ol><li>inline元素：line-height的值=height值</li><li>absolute元素： top:50% + margin-top负值（必须知道子元素的高</li><li>absolute元素： transform(-50%,-50%)（不需要子元素尺寸，CSS3，所以浏览器可能有不支持</li><li>absolute元素： top,left,bottom,right =0 +margin: auto（不需要子元素尺寸</li></ol></li></ul><h3 id="图文样式"><a href="#图文样式" class="headerlink" title="图文样式"></a>图文样式</h3><ul><li><p>line-height的继承问题</p><p>如果父元素里的line-height是具体的数值（30px），则继承该值；如果父元素里写的是比例（2/1.5），则继承该比例；如果写的是百分比，（200%，150%），则继承计算出来的值</p></li><li><p>文字溢出时，实现在末尾显示三个点省略效果 <a href="https://blog.csdn.net/chuluxie3918/article/details/100819339">参考</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">     <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">     <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">     <span class="attribute">overflow</span>: hidden;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>第 2 行表示强制在一行显示，如果不强制在一行显示，超出容器宽度的内容换行显示，父容器直接被撑高，就没有溢出了；</p><p>第 3 行表示在溢出时显示省略标记，也就是图中红线圈出来的三个点，这个就没啥好说的了；</p><p>第 4 行表示溢出部分内容隐藏，不溢出隐藏的话…. 第 3 行的溢出设置还有啥用，我都直接显示到父容器外面了啊喂！</p></li></ul><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><ul><li><p>rem是什么？</p><p>rem是一个长度单位</p><p>​    长度单位：px，绝对长度单位，最常用；em，相对长度单位，相对于父元素，不常用；rem，相对长度单位，相对于根元素，常用于响应式布局</p></li><li><p>如何实现响应式？</p><p>media-query，根据不同的屏幕宽度来设置根元素font-size</p><p>rem，基于根元素的相对单位</p></li><li><p>rem弊端：</p><p>阶梯性，不够具体</p></li><li><p>网页视口尺寸  </p><p>window.screen.height  屏幕高度（与设备手机有关</p><p>window.innerHeight 网页视口高度（与浏览器有关（===100vh</p><p>document.body.clientHeight body高度（与内容有关</p></li><li><p>vw/vh</p><p>网页视口高度的1/100</p><p>网页视口宽度的1/100</p><p>vmax取两者最大值；vmin取两者最小值</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>HTML5和CSS3有什么新特性 <a href="https://www.cnblogs.com/star91/p/5659134.html">参考</a></p><p>HTML5：aside（侧边栏），footer（section/document页脚），header（文档头部区域），nav（导航链接），audio，video</p><p>表单元素</p><p> Web Storage DOM API 为Web应用提供了一个能够替代cookie的Javascript解决方案</p><ul><li>sessionStorage—客户端数据存储，只能维持在当前会话范围内。</li></ul><p>​       sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</p><ul><li>localStorage—客户端数据存储，能维持在多个会话范围内。</li></ul><p>​       localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。</p><p>CSS3：选择器，边框（borders-image,radius,shadow)，文本效果（text-wrap,text-overflow…），转换变形（transform）</p></li></ul><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><a href="https://blog.csdn.net/weixin_45495667/article/details/106967467?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">ES6</a></h3><h4 id="es6Map实现原理及实现自己的Map方法"><a href="#es6Map实现原理及实现自己的Map方法" class="headerlink" title="es6Map实现原理及实现自己的Map方法"></a>es6Map实现原理及实现自己的Map方法</h4><p>Map        </p><ol><li><p>不重复        </p></li><li><p>字符串 对象 NaN null [] function(){} 10       </p></li><li><p>set get delete has clear方法 </p></li></ol><h3 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h3><ul><li><p>JS值类型和引用类型的区别</p><ol><li>typeof能判断哪些类型</li><li>何时使用===何时使用==</li><li>值类型和引用类型的区别</li><li>手写深拷贝</li></ol></li><li><p>变量类型</p><p>值类型vs引用类型</p><p>typeof运算符</p><p>深拷贝</p></li><li><p>变量计算</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//值类型</span></span><br><span class="line"><span class="keyword">let</span> a =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a=<span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用类型</span></span><br><span class="line"><span class="keyword">let</span> c =&#123;<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = c;</span><br><span class="line">d.age=<span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c.age);<span class="comment">//21</span></span><br></pre></td></tr></table></figure><p>  <img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1619451038/1619451006_1_a3fjal.png"></p><p>  为什么不把内存地址中的东西直接存在栈里：性能，复制慢</p><ul><li><p>常见值类型:undefined, ‘abc’, 100, true, Symbol(‘s’)</p></li><li><p>常见引用类型：</p><p>obj={ x:100}</p><p>arr=[1,2,3]</p><p>null(特殊引用类型，指针指向空地址)</p><p>function fn(){}(特殊引用类型，不用于存储数据，所以没有拷贝，复制函数一说)</p></li></ul><h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><ol><li>能识别出所有的值类型</li><li>识别函数</li><li>判断是否是引用类型（不可再细分）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断所有的值的类型</span></span><br><span class="line"><span class="keyword">let</span> a;<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc&quot;</span>; <span class="comment">//string</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">100</span> ; <span class="comment">//number</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span> ; <span class="comment">//boolean </span></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>(<span class="string">&#x27;s&#x27;</span>); <span class="comment">//symbol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//能判断函数</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log; <span class="comment">//function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//能识别引用类型</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>] <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">x</span> : <span class="number">100</span>&#125; <span class="comment">//object</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><table><thead><tr><th></th><th>是否与原数据指向同一对象</th><th>第一层数据为基本数据类型</th><th>原数据中包含子对象</th></tr></thead><tbody><tr><td>赋值</td><td>是</td><td>改变会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td>浅拷贝</td><td>否</td><td>改变<strong>不会</strong>使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td>深拷贝</td><td>否</td><td>改变<strong>不会</strong>使原数据一同改变</td><td>改变<strong>不会</strong>使原数据一同改变</td></tr></tbody></table><p>注意判断值类型/引用类型</p><p>注意判断是数组还是对象</p><p>递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    age:<span class="number">20</span>,</span><br><span class="line">    name:<span class="string">&quot;object1&quot;</span>,</span><br><span class="line">    address:&#123;</span><br><span class="line">        city:<span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = obj1;</span><br><span class="line">obj2.address.city = <span class="string">&quot;shanghai&quot;</span>;<span class="comment">//浅拷贝，引用值类型</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.address.city);<span class="comment">//shanghai</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*深拷贝</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>obj 要拷贝的对象 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj; <span class="comment">//如果不是对象或者数组，没有深拷贝的必要，直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化返回结果</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;<span class="comment">//判断是不是数组</span></span><br><span class="line">        result=[];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result=&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> key <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">obj.hasOwnProperty(key)</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//保证key不是原型的属性</span></span><br><span class="line">            <span class="comment">//递归调用</span></span><br><span class="line">            result[key] = deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = deepClone(obj1);</span><br><span class="line">obj3.address.city = <span class="string">&quot;shenzhen&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.address.city);<span class="comment">//shanghai </span></span><br></pre></td></tr></table></figure><h4 id="变量计算（类型转换）"><a href="#变量计算（类型转换）" class="headerlink" title="变量计算（类型转换）"></a>变量计算（类型转换）</h4><ul><li><p>字符串拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>+<span class="number">10</span>;<span class="comment">//110</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">100</span>+<span class="string">&#x27;10&#x27;</span>;<span class="comment">//10010</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">true</span>+<span class="string">&#x27;10&#x27;</span>;<span class="comment">//true10 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="number">100</span> + <span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>);<span class="comment">//110</span></span><br></pre></td></tr></table></figure></li><li><p>==（可能发生类型转换，会尽量发生转换使其相等）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> == <span class="string">&#x27;100&#x27;</span>;<span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span>;<span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span> ;<span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;&#x27;</span>;<span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> ; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>除了 == null之外，其他都一律用 ===</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    x:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">obj.a == <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="comment">//相当于判断了if(obj.a === null ||obj.a ===undefined)&#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>if语句和逻辑运算</p><p>truly变量： <code>!!a === true</code> 的变量</p><p>falsely变量： <code>!!a === false</code> 的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="number">0</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">NaN</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="string">&#x27;&#x27;</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">null</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">undefined</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">false</span> ===<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//除了这些都是truly变量</span></span><br></pre></td></tr></table></figure><p>if判断的就是truly和falsely变量</p><p>逻辑判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp;&amp; <span class="number">0</span>);<span class="comment">//0   因为10是truly，0是falsely，&amp;&amp;与运算</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">10</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;abc&#x27;</span>);<span class="comment">//&#x27;abc&#x27;  因为&#x27;abc&#x27;是truly，&#x27;&#x27;是falsely，||或运算，</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span>||<span class="string">&#x27;&#x27;</span>);<span class="comment">//&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="built_in">window</span>.abc);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><ul><li><p>知识点</p><ul><li>class和继承</li><li>类型判断instanceof</li><li>原型和原型链</li></ul></li><li><p>class</p><ul><li>constructor</li><li>属性</li><li>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,number</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`姓名 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 学号 <span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>`</span></span><br><span class="line">       )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类声明对象/实例</span></span><br><span class="line"><span class="keyword">const</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&#x27;小明&#x27;</span>,<span class="number">1234</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.name);<span class="comment">//小明</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.number);<span class="comment">//1234</span></span><br><span class="line">xiaoming.sayHi();<span class="comment">//姓名 小明, 学号 1234</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul><li><p>extends</p></li><li><p>super</p></li><li><p>扩展或重写方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">` <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//父类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,number</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`姓名 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 学号 <span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, major</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.major = major</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 教 <span class="subst">$&#123;<span class="built_in">this</span>.major&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> People(<span class="string">&quot;people1&quot;</span>);</span><br><span class="line">p1.eat();<span class="comment">// people1 eat something</span></span><br><span class="line"><span class="keyword">const</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>,<span class="number">1234</span>);</span><br><span class="line">xiaoming.sayHi(); <span class="comment">//姓名 小明, 学号 1234</span></span><br><span class="line"><span class="keyword">const</span> wang = <span class="keyword">new</span> Teacher(<span class="string">&quot;王&quot;</span>,<span class="string">&quot;math&quot;</span>)</span><br><span class="line">wang.teach(); <span class="comment">//王 教 math//父类</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="类型判断-instanceof"><a href="#类型判断-instanceof" class="headerlink" title="类型判断 instanceof"></a>类型判断 instanceof</h4><p>instanceof是基于原型链实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">xiaoming <span class="keyword">instanceof</span> Student;<span class="comment">//true</span></span><br><span class="line">xiaoming <span class="keyword">instanceof</span> People;<span class="comment">//true</span></span><br><span class="line">xiaoming <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;<span class="comment">//true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//class实际上是函数</span></span><br><span class="line"><span class="keyword">typeof</span> Student;<span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式原型</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.__proto__);</span><br><span class="line"><span class="comment">//显式原型</span></span><br><span class="line"><span class="built_in">console</span>.log(Student.prototype);</span><br><span class="line">xiaoming.__proto__ === Student.prototype; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在定义Student的时候，会有一个属性prototype指向Student.prototype对象，Student的方法都放在prototype里。new出了xiaoming之后，xiaoming的属性有name, number, __ proto__ ，__ proto__ 是隐式原型，指向Student.prototype</p><p>原型关系：</p><ol><li>每个class都有显示原型prototype</li><li>每个实例都有隐式原型__ proto__</li><li>实例的隐式原型指向class的显式原型</li></ol><p>基于原型的执行规则：</p><p>获取属性的xiaoming.name或者执行方法xiaoming.sayHi()时，先在自身属性和方法寻找，如果找不到，就会去隐式原型中查找</p><p>原型链：</p><p><code>People.prototype === Student.prototype.__proto__</code></p><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1621428918/3_7U_JSVSRC_PCHKI9E_GW1_pmj1ub.png" alt="原型链"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>);<span class="comment">//true</span></span><br><span class="line">xiaoming.hasOwnProperty(<span class="string">&#x27;sayHi&#x27;</span>);<span class="comment">//false</span></span><br><span class="line">xiaoming.__proto__.hasOwnProperty(<span class="string">&#x27;sayHi&#x27;</span>);<span class="comment">//true</span></span><br><span class="line">xiaoming.__proto__.__proto__.hasOwnProperty(<span class="string">&#x27;eat&#x27;</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>class是ES6语法规范，由ECMA委员会发布，ECMA只规定语法规则，即代码的书写规范，不规定如何实现，所以以上的实现方式全部都是V8引擎的实现方式</p><h4 id="原型相关面试题"><a href="#原型相关面试题" class="headerlink" title="原型相关面试题"></a>原型相关面试题</h4><ul><li><p>如何准确判断一个变量是不是数组？</p><p>instanceof Array</p></li><li><p>class原型的本质？</p><p>原型和原型链的图示</p><p>属性和方法的执行规则</p></li><li><p>手写简易jQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">        <span class="keyword">const</span> length = result.length;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i=<span class="number">0</span>;i&lt;length;i++</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>[i]=result[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.selector = selector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">each</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.length;i++</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">this</span>[i];</span><br><span class="line">            fn(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">type, fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.each(<span class="function"><span class="params">elem</span>=&gt;</span>&#123;</span><br><span class="line">            elem.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以扩展很多DOM API</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件</span></span><br><span class="line">jQuery.prototype.dialog = <span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    alert(info)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复写 &#x27;造轮子&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myJQuery</span> <span class="keyword">extends</span> <span class="title">jQuery</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(selector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩展自己的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在HTML里放三个p标签元素,写hello1,hello2,hello3</span></span><br><span class="line"><span class="keyword">const</span> $p = <span class="keyword">new</span> jQuery(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//选中所有p元素</span></span><br><span class="line">$p;<span class="comment">//jQuery &#123;0: p, 1: p, 2: p, length: 3, selector: &quot;p&quot;&#125;</span></span><br><span class="line">$p.get(<span class="number">1</span>);<span class="comment">//&lt;p&gt;hello2&lt;/p&gt;</span></span><br><span class="line">$p.each(<span class="function">(<span class="params">elem</span>)=&gt;</span><span class="built_in">console</span>.log(elem.nodeName));<span class="comment">//③p</span></span><br><span class="line">$p.on(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>alert(<span class="string">&#x27;clicked&#x27;</span>));<span class="comment">//点击任意一个HTML里的p元素会alert clicked</span></span><br></pre></td></tr></table></figure></li><li><p>ES5实现ES6的extend继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.prototype</span></span><br><span class="line"><span class="comment">// 这种方式无法在生成对象时进行传参</span></span><br><span class="line"><span class="comment">// 且由classA生成的实例对象会共享name属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">classA.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">classB.prototype = <span class="keyword">new</span> classA();</span><br><span class="line">classB.prototype.constructor = classB;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> classB();</span><br><span class="line"><span class="built_in">console</span>.log(b.getName()); <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.原型链上加构造函数</span></span><br><span class="line"><span class="comment">// 能够传参</span></span><br><span class="line"><span class="comment">// 且公有变量不会被其他实例共享</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classA</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">classA.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classB</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    classA.call(<span class="built_in">this</span>,name);</span><br><span class="line">&#125;</span><br><span class="line">classB.prototype = <span class="keyword">new</span> classA();</span><br><span class="line">classB.prototype.constructor = classB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> classB(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> classB(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b.getName());    <span class="comment">//world</span></span><br><span class="line"><span class="built_in">console</span>.log(c.getName());    <span class="comment">//yes</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h3><ul><li>知识点<ul><li>作用域和自由变量</li><li>闭包</li><li>this</li></ul></li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p> <a href="https://blog.csdn.net/wu_xiaozhou/article/details/52832645">JS的解析原理和变量作用域</a></p><ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域ES6新增</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6块级作用域</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x =<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x);<span class="comment">//error!</span></span><br></pre></td></tr></table></figure><ul><li>自由变量<ul><li>一个变量在当前作用域内没有定义，但是被使用了</li><li>向上级作用域，一层一层寻找，直到找到为止</li><li>如果全局作用域都没找到，则报错xx is not defined</li></ul></li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>作用域应用的特殊情况，有两种情况</p><ol><li>函数作为参数被传递</li><li>函数作为返回值被返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = create();</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>;</span><br><span class="line">fn();<span class="comment">//100</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数作为参数被传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">200</span>;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">print(fn);<span class="comment">//100</span></span><br></pre></td></tr></table></figure><p>闭包：自由变量的查找，是在<strong>函数定义的地方</strong>向上级作用域查找，不是<strong>执行的地方</strong></p><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>作为普通函数</li><li>使用call，apply，bind</li><li>作为对象方法被调用</li><li>在class方法中被调用</li><li>箭头函数</li></ul><p>this在场景中取什么值是由<strong>函数执行</strong>的时候决定的，不是定义的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1();<span class="comment">//Window</span></span><br><span class="line">fn1.call(&#123;<span class="attr">x</span>:<span class="number">200</span>&#125;);<span class="comment">//&#123;x: 200&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.bind(&#123;<span class="attr">x</span>:<span class="number">100</span>&#125;);</span><br><span class="line">fn2();<span class="comment">//&#123;x: 100&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1=&#123;</span><br><span class="line">    name:<span class="string">&quot;a1&quot;</span>;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this 是当前对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">wait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        serTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//this === window</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">//作为普通函数被执行</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a2=&#123;</span><br><span class="line">    name:<span class="string">&quot;a2&quot;</span>;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this 是当前对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">waitAgain</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeOut(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//this 是当前对象</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            <span class="comment">//箭头函数是呗settimeout触发的</span></span><br><span class="line">           <span class="comment">//箭头函数的this取上级作用域的值</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zhangsan = <span class="keyword">new</span> People(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">zhangsan.sayHi();<span class="comment">//People &#123;name: &quot;张三&quot;, age: 20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><ul><li><p>this的不同应用场景如何取值</p><p>当普通函数被调用，直接返回window</p><p>通过call，apply，bind，传入什么就绑定什么</p><p>通过对象方法调用，就返回对象本身</p><p>在class的方法中调用，返回实例本身</p><p>箭头函数，上级作用域的this值</p></li><li><p>手写bind函数</p><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>,<span class="built_in">this</span>);<span class="comment">//this &#123;x: 100&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);<span class="comment">//10 20 30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is fn1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.bind(&#123;<span class="attr">x</span>:<span class="number">100</span>&#125;,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">const</span> result = fn2();</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//this is fn1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//将参数解析为数组</span></span><br><span class="line">     <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//获取this（数组第一项）</span></span><br><span class="line">    <span class="keyword">const</span> t = args.shift();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fn1.bind(...)中的fn1</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(t,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实际开发中闭包的应用场景，举例说明</p><ul><li><p>隐藏数据</p></li><li><p>比如简单做一个cache的工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包隐藏数据，只提供API</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125;;<span class="comment">//闭包中的数据，被隐藏，不被外界访问</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        set:<span class="function"><span class="keyword">function</span> (<span class="params">key,val</span>)</span>&#123;</span><br><span class="line">            data[key] = val</span><br><span class="line">        &#125;,</span><br><span class="line">        get:<span class="function"><span class="keyword">function</span> (<span class="params">key</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//作用域只在大括号内，不会被外界访问到</span></span><br><span class="line"><span class="keyword">const</span> c = createCache();</span><br><span class="line">c.set(<span class="string">&#x27;a&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c.get(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//100</span></span><br></pre></td></tr></table></figure></li><li><p>创建10个a标签</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建10个a标签，点击时弹出对应编号</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++</span>)</span>&#123;</span><br><span class="line">    a=<span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    a.innerHTML = i + <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    a.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        alert(i);</span><br><span class="line">        <span class="comment">//因为这里面的函数不会立马执行，只有被点击的时候才会被执行</span></span><br><span class="line">        <span class="comment">//在这里面执行i的时候，是块级作用域</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line"> <span class="comment">//如果在第一行写let i，点击每个a标签都会弹出10</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="原型中的this"><a href="#原型中的this" class="headerlink" title="原型中的this"></a>原型中的this</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaoming.sayHi();<span class="comment">//姓名 小明, 学号 1234</span></span><br><span class="line">xiaoming.__proto__.sayHi();<span class="comment">//姓名 undefined， 学号 undefined</span></span><br><span class="line">xiaoming.__proto__.sayHi.call(xiaoming);<span class="comment">//姓名 小明，学号 1234</span></span><br></pre></td></tr></table></figure><h4 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call apply bind"></a>call apply bind</h4><p>call、apply、bind都是改变this指向的方法                 <a href="https://www.cnblogs.com/cc-freiheit/p/10763492.html">实现</a></p><p>call/apply:在功能上完全一致，仅仅是传参方式不一致，这样的好处是在传参个数不一定时，可以使用 apply</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call(yourObj, arg1, arg2);</span><br><span class="line">apply(yourObj, [arg1, arg2]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> common = <span class="string">&#x27;common&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;obj&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">fn(common) <span class="comment">// common global</span></span><br><span class="line">fn.call(obj, common) <span class="comment">// common obj</span></span><br></pre></td></tr></table></figure><p>func.bind(yourObj,xxx,xxx) 执行之后会返回一个<strong>新函数</strong>，是 func 函数的副本，不同的是新函数内部 this 永远指向 yourObj，当然这意味着在调用 bind 完成绑定之后，需要手动执行一下这个新函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFn = fn.bind(<span class="literal">null</span>, <span class="string">&#x27;Dot&#x27;</span>);</span><br><span class="line">fn(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);      <span class="comment">// A B C</span></span><br><span class="line">newFn(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);      <span class="comment">// Dot A B</span></span><br><span class="line">newFn(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);        <span class="comment">// Dot B C</span></span><br></pre></td></tr></table></figure><p>可以看到，我们在 bind() 的时候传入了一个参数，新方法的实参都是在 bind 中参数的基础上在往后排。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>知识点</p><ul><li>单线程和异步</li><li>应用场景</li><li>callback hell和Promise</li></ul><h4 id="单线程与异步"><a href="#单线程与异步" class="headerlink" title="单线程与异步"></a>单线程与异步</h4><ul><li><p>JS是单线程语言，只能同时做一件事。先加载/先打印，不行</p></li><li><p>浏览器和nodeJS已支持JS启动进程，比如Web Worker</p></li><li><p>JS和DOM渲染共用同一个线程，因为JS可以修改DOM结构</p></li><li><p>遇到等待（网络请求，定时任务）不能卡住</p></li><li><p>需要异步</p></li><li><p>回调callback函数形式</p></li></ul><h4 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步 callback 回调函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br><span class="line"><span class="comment">//100,300,200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同步</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">alert(<span class="number">200</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br><span class="line"><span class="comment">//先出现100，再alert200，不点确认300不出</span></span><br></pre></td></tr></table></figure><p>基于JS是单线程语言，异步不会阻塞代码执行，同步会阻塞代码执行</p><ul><li><p>异步的应用场景</p><ul><li><p>网络请求，如Ajex, 图片加载等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ajex</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">$.get(<span class="string">&#x27;./data.json&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data1</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data1);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//图片加载</span></span><br><span class="line"><span class="built_in">console</span>.log(;<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">&#x27;/xxx.png&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>定时任务，如setTimeout</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setTimeout</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//setInterval</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url,</span><br><span class="line">            <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">error</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url1=<span class="string">&#x27;/data1.json&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> url2=<span class="string">&#x27;/data2.json&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> url3=<span class="string">&#x27;/data3.json&#x27;</span>;</span><br><span class="line">getData(url1).then(<span class="function"><span class="params">data1</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data1);</span><br><span class="line">    <span class="keyword">return</span> getData(url2);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data2</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data2);</span><br><span class="line">    <span class="keyword">return</span> getData(url3);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data3</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data3);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))<span class="comment">//不是嵌套形式，是平行的，虽然是callback形式，但是是管道式串联的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>promise不是避免了回调，只是把回调变成了串联形式</p><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><ul><li><p>同步和异步的区别是什么？</p><ul><li>基于JS是单线程语言，同步会阻塞代码执行，异步不会阻塞代码执行</li></ul></li><li><p>手写promise加载一张图片</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url=<span class="string">&#x27;https://img2.baidu.com/it/u=3355464299,584008140&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="comment">//promise要传入一个函数，函数有两个参数，分别是resolve和reject</span></span><br><span class="line">    (resolve,reject)=&gt;&#123;</span><br><span class="line">            <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">            img.onload=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                resolve(img);<span class="comment">//如果成功</span></span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;图片加载失败 $&#123;src&#125;&#x27;</span>))<span class="comment">//如果失败</span></span><br><span class="line">            &#125;</span><br><span class="line">            img.src = src</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadImg(url).then(<span class="function"><span class="params">img</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line">&#125;).then(<span class="function"><span class="params">img</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.height)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">ex</span>=&gt;</span><span class="built_in">console</span>.error(ex))</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果把url改成不正确的地址，会报错：Error: 图片加载失败 $&#123;src&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要先后加载两张图片</span></span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">loadImg(url1).then(<span class="function"><span class="params">img1</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img1.width);</span><br><span class="line">    <span class="keyword">return</span> img1;<span class="comment">//return一个普通对象，下一个then里面的普通函数会接收到</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">img1</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img1.height);</span><br><span class="line">    <span class="keyword">return</span> loadImg(url2);  </span><br><span class="line">    <span class="comment">//return 一个promise实例，下一个then接受到的会是loadImg(url2)加载后返回的img2(resolve的img对象)</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">img2</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img2.width);</span><br><span class="line">    <span class="keyword">return</span> img2;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">img2</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img2.height);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">ex</span>=&gt;</span><span class="built_in">console</span>.log(ex))</span><br></pre></td></tr></table></figure><ul><li><p>前端异步的使用场景（等待的场景）</p><p>网络请求，如ajax图片加载</p><p>定时任务，如setTimeout</p><ul><li><p>setTimeout题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//1354  1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>手写简单promise</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟一个简单的异步行为 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchData().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// after 1000ms</span></span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// hi</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi2&#x27;</span>;</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;).then(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data2); <span class="comment">// hi2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="异步进阶"><a href="#异步进阶" class="headerlink" title="异步进阶"></a>异步进阶</h3><ul><li>描述event-loop的机制，可画图</li><li>什么是宏任务和微任务，有什么区别</li><li>Promise有哪三种状态，如何变化</li></ul><h4 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h4><p>事件循环/事件轮询</p><p>JS是单线程运行的,异步是要基于回调来实现的，event loop是异步回调的实现原理</p><p>JS如何执行？从前到后一行行执行，如果某一行执行报错，就停止下面代码的执行；先执行同步代码，再执行异步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"><span class="function"><span class="title">setTimeout</span>(<span class="params"><span class="keyword">function</span> cb1()</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;cb1&#x27;</span>);</span><br><span class="line">           &#125;,<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bye&#x27;</span>);</span><br></pre></td></tr></table></figure><p>总结event loop过程</p><ul><li>同步代码，一行一行放在Call Stack执行</li><li>遇到异步，会先<strong>记录</strong>下，等待时机（定时器，网络请求等）</li><li>时机到了，就放到call back queue里面</li><li>若call stack为空（即同步代码执行完了），event loop开始工作</li><li>轮询查找call back queue，如果有，就移动到call stack执行</li><li> 然后继续轮训查找 </li></ul><p>Call Stack执行→web API处理异步→ Event loop当callstack为空的时候去Queue里找，找到后推进call stack里执行</p><h4 id="DOM事件与event-loop"><a href="#DOM事件与event-loop" class="headerlink" title="DOM事件与event loop"></a>DOM事件与event loop</h4><ul><li>js单线程</li><li>异步（setTimeout，ajax等）使用回调，基于event loop</li><li>DOM事件也使用回调，基于event loop</li><li>但DOM事件不是异步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> btn1=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>)</span><br><span class="line">btn1.onclick(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bye&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//onclick在程序开始后打印完hi就立马执行了，点击后才会执行console.log的回调函数，未点击时会暂存在WebAPI里，什么时候点击了，什么时候放进callback queue，然后通过event loop到call stack里执行</span></span><br></pre></td></tr></table></figure><h4 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h4><p>pending resolved rejected</p><p>pending–&gt; resolved            pending –&gt;rejected</p><p>变化不可逆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;p1&#x27;</span>,p1) <span class="comment">//pending</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;p2&#x27;</span>,p2)<span class="comment">//pending 一开始打印的时候</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;p2-setTimeout&#x27;</span>,p2))<span class="comment">//resolved</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;p3&#x27;</span>,p3)<span class="comment">//pending 一开始打印的时候</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;p3-setTimeout&#x27;</span>,p3))<span class="comment">//rejected</span></span><br><span class="line"><span class="comment">//从pending变化：执行了resolve/reject的函数</span></span><br></pre></td></tr></table></figure><p>状态的表现：</p><ul><li>pending状态，不会触发then和catch</li><li>resolved状态会触发then回调函数</li><li>rejected会触发catch回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">100</span>)<span class="comment">//resolved状态的promise</span></span><br><span class="line">p1.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>,data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">&#125;)<span class="comment">//data 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;err&#x27;</span>) <span class="comment">//rejected状态的promise</span></span><br><span class="line">p2.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data2&#x27;</span>,data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err2&#x27;</span>,err)</span><br><span class="line">&#125;)<span class="comment">//err2 err</span></span><br></pre></td></tr></table></figure><p><strong>then和catch改变状态</strong></p><p>then正常返回resolved，里面有报错则返回rejected</p><p>catch正常返回resolved，里面有报错则返回rejected</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p3 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;my error&#x27;</span>).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;p3&#x27;</span>,p3)<span class="comment">//resolved状态，之后会触发then回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;my error&#x27;</span>).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;catch err&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;p4&#x27;</span>,p4)<span class="comment">//rejected状态，之后会触发catch回调</span></span><br></pre></td></tr></table></figure><p><strong>题目</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).catch(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)<span class="comment">//1, 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;err1&#x27;</span>)<span class="comment">//rejected状态，执行catch</span></span><br><span class="line">&#125;).catch(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)<span class="comment">//1， 2， 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;err2&#x27;</span>)<span class="comment">//rejected状态，执行catch</span></span><br><span class="line">&#125;).catch(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).catch(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)<span class="comment">//1.  2</span></span><br></pre></td></tr></table></figure><h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><ul><li>异步回调 callback hell</li><li>Promise then catch 链式调用，但也是基于回调函数的</li><li>async/await是同步语法，彻底消灭回调函数</li></ul><p><strong>async/await和promise的关系</strong></p><ul><li>执行async函数，返回的是Promise对象</li><li>await相当于Promise的then</li><li>try…catch可以捕获异常，代替了promise的catch</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;<span class="comment">//相当于返回Promise.resolve(100)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = fn1();<span class="comment">//执行async函数，返回的是一个promise对象</span></span><br><span class="line"><span class="comment">//如果返回的是值，就封装成一个promise对象返回，如果返回的是promise，就直接返回promise对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;res1&#x27;</span>,res1); <span class="comment">// Promise对象，resolved状态</span></span><br><span class="line">res1.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>,data);<span class="comment">//data 100</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> p1; <span class="comment">//await 相当于then</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>,data)<span class="comment">//data 200</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="number">300</span>; <span class="comment">//await Promise.resolve(300)，会自动封装</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data1&#x27;</span>,data)<span class="comment">//data1 300</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data2 = <span class="keyword">await</span> fn1(); <span class="comment">//await 相当于调用Promise对象，跟第一种没有区别</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data2&#x27;</span>,data2)<span class="comment">//data2 100</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p4 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;err&#x27;</span>); <span class="comment">//rejected状态</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> p4;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;<span class="function"><span class="title">catch</span>(<span class="params">ex</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;ex&#x27;</span>);<span class="comment">//try...catch相当于promise的catch</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>async-await是语法糖，异步的本质还是回调函数</strong></p><p>async/await消灭异步回调，但js还是单线程，还是有异步，依然基于event loop</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)<span class="comment">//2</span></span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>) <span class="comment">//5</span></span><br><span class="line">    <span class="comment">// 关键在这一步，它相当于放在 callback 中，最后执行。await后面的东西都可以看做callback的内容，也就是异步</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)<span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)<span class="comment">//1</span></span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)<span class="comment">//4同步代码在这里已经执行完成</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a=fn()<span class="comment">//Promise</span></span><br><span class="line">    <span class="keyword">const</span> b=<span class="keyword">await</span> fn()<span class="comment">//100</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>)<span class="comment">//start</span></span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>,a)<span class="comment">//a 100</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">200</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>,b)<span class="comment">//b 200</span></span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">300</span>)<span class="comment">//报错</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>,c)<span class="comment">//不执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>)<span class="comment">//不执行</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><ul><li>for…in 和 forEach for是常规的同步遍历</li><li>for…of常用于异步遍历</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时算乘法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(num * num)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 使用 forEach ，是 1s 之后打印出所有结果，即 3 个值是一起被计算出来的</span></span><br><span class="line"><span class="comment">// function test1 () &#123;</span></span><br><span class="line"><span class="comment">//     const nums = [1, 2, 3];</span></span><br><span class="line"><span class="comment">//     nums.forEach(async x =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         const res = await multi(x);</span></span><br><span class="line"><span class="comment">//         console.log(res);</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// test1();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of ，可以让计算挨个串行执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nums) &#123;<span class="comment">//有顺序</span></span><br><span class="line">        <span class="comment">// 在 for...of 循环体的内部，遇到 await 会挨个串行计算</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> multi(x)</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure><h4 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h4><p>macroTask：setTimeout, setInterval, Ajax, DOM事件</p><p>microTask:  Promise async/await</p><p>微任务执行时机比宏任务要早</p><p><strong>event loop和DOM渲染</strong></p><p>JS是单线程的，且和DOM渲染共用一个线程，当JS执行的时候，要留给DOM渲染一些时机</p><ol><li>call stack 空闲，每次call stack轮训结束</li><li>尝试DOM渲染（不一定非得渲染，就是给一次 DOM 渲染的机会）</li><li>触发event loop</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $p1 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $p2 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $p3 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;#container&#x27;</span>)</span><br><span class="line">            .append($p1)</span><br><span class="line">            .append($p2)</span><br><span class="line">            .append($p3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;length&#x27;</span>,  $(<span class="string">&#x27;#container&#x27;</span>).children().length )</span><br><span class="line">alert(<span class="string">&#x27;本次 call stack 结束，DOM 结构已更新，但尚未触发渲染&#x27;</span>)</span><br><span class="line"><span class="comment">// （alert 会阻断 js 执行，也会阻断 DOM 渲染，便于查看效果）</span></span><br><span class="line"><span class="comment">// 到此，即本次 call stack 结束后（同步任务都执行完了），浏览器会自动触发渲染，不用代码干预</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，按照 event loop 触发 DOM 渲染时机，setTimeout 时 alert ，就能看到 DOM 渲染后的结果了</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;setTimeout 是在下一次 Call Stack ，就能看到 DOM 渲染出来的结果了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>宏任务：DOM 渲染后再触发</li><li>微任务：DOM 渲染前会触发</li></ul><p>执行Promise在等待时机时，放在micro task queue里，而不是callback queue里，而且不会经过WebAPI, 因为Promise是ES规范，不是W3C规范</p><ul><li><p>宏任务：浏览器规定的</p></li><li><p>微任务：ES6语法规定的</p></li><li><p>微任务：ES 语法标准之内，JS 引擎来统一处理。即，不用浏览器有任何关于，即可一次性处理完，更快更及时。</p></li><li><p>宏任务：ES 语法没有，JS 引擎不处理，浏览器（或 nodejs）干预处理。、</p></li></ul><p><img src="https://res.cloudinary.com/drx6hbrzu/image/upload/v1621781359/VX_OV51JHY7_C_0YH37CBSO_fdecs5.png"></p><p>promise和setTimeout执行顺序的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ </span>)</span>&#123;</span><br><span class="line">        i==<span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//2,3,5,4,1</span></span><br></pre></td></tr></table></figure><p>Javascript是单线程的，所有的同步任务都会在主线程中执行。</p><p>当主线程中的任务，都执行完之后，系统会 “依次” 读取任务队列里的事件。与之相对应的异步任务进入主线程，开始执行。</p><p>异步任务之间，会存在差异，所以它们执行的优先级也会有区别。大致分为 <strong>微任务</strong>（micro task，如：Promise、MutaionObserver等）和<strong>宏任务</strong>（macro task，如：setTimeout、setInterval、I/O等）。</p><p>Promise 执行器中的代码会被同步调用，但是<strong>回调</strong>是基于<strong>微任务</strong>的。</p><p>宏任务的优先级高于微任务</p><p>每一个宏任务执行完毕都必须将当前的微任务队列清空</p><p>第一个 script 标签的代码是第一个宏任务</p><p>主线程会不断重复上面的步骤，直到执行完所有任务。</p><p>所有的代码都写在script标签中，所以<strong>读取所有代码是第一个宏任务</strong>，我们开始执行第一个宏任务。</p><p>我们首先遇到<strong>setTimeout</strong>，他是<strong>第二个宏任务</strong>，将它扔进宏任务事件队列里先排队。</p><p>下来我们遇到<strong>promise</strong>，promise执行器里的代码会被<strong>同步调用</strong>，所以我们依次打印出2和3。</p><p>下来遇到<strong>promise的回调</strong>，他是一个微任务，将它扔进<strong>微任务事件队列</strong>中。</p><p>下来我们接着打印出5，然后<strong>执行微任务</strong>并且打印出4.</p><p>我们<strong>第一个宏任务执行完毕</strong>，执行<strong>下一个宏任务</strong>，打印出1，到此，所有任务都执行完毕。</p><p>所以我们最后的结果为2 3 5 4 1。</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a></h3><p><strong>解构赋值</strong>语法是一种 Javascript 表达式。通过<strong>解构赋值,</strong> 可以将属性/值从对象/数组中取出,赋值给其他变量。</p><h3 id="JS-WEB-API-DOM"><a href="#JS-WEB-API-DOM" class="headerlink" title="JS-WEB-API-DOM"></a>JS-WEB-API-DOM</h3><ul><li>JS 基础知识，规定语法（ECMA262标准）</li><li>JS Web API，网页操作的API（W3C标准）</li></ul><p><strong>DOM是什么</strong></p><ul><li>vue和React框架应用广泛，封装了DOM操作</li><li>但DOM操作是基础</li></ul><p>Document Object Model</p><h4 id="DOM节点操作"><a href="#DOM节点操作" class="headerlink" title="DOM节点操作"></a>DOM节点操作</h4><ul><li>获取DOM节点</li><li>attribute</li><li>property</li></ul><h3 id="JS-WEB-API-事件"><a href="#JS-WEB-API-事件" class="headerlink" title="JS-WEB-API-事件"></a>JS-WEB-API-事件</h3><p><strong>事件绑定</strong></p><hr><h1 id="COMPUTER-NETWORK"><a href="#COMPUTER-NETWORK" class="headerlink" title="COMPUTER NETWORK"></a>COMPUTER NETWORK</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP和HTTPS的基本概念"><a href="#HTTP和HTTPS的基本概念" class="headerlink" title="HTTP和HTTPS的基本概念"></a>HTTP和HTTPS的基本概念</h3><p>　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>　　HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL（Secure Sockets Layer）层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>　客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤</p><ul><li>客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</li><li>Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</li><li>客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li><li>Web服务器利用自己的私钥解密出会话密钥。</li><li>Web服务器利用会话密钥加密与客户端之间的通信。</li></ul><p><strong>HTTP请求头和响应头</strong></p><p>HTTP 请求报文由3部分组成(请求行+请求头+请求体)</p><p><a href="https://blog.csdn.net/glpghz/article/details/106063833">HTTP1.0,2.0,3.0 HTTPS</a></p><p><strong>HTTP2的多路复用</strong></p><p>在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：</p><ul><li>第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）</li><li>第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。</li></ul><p>HTTP/2的多路复用就是为了解决上述的两个性能问题。<br>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。<br>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p><ul><li>基于 https，安全性更有保证</li><li>使用二进制格式，比以前基于文本的传输更具普适性</li><li>多路复用，是以前长连接的增强</li></ul><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><a href="https://blog.csdn.net/yrx420909/article/details/102835945">DNS 域名解析</a></p><p>当一个用户在地址栏输入<a href="http://www.baidu.com时，DNS解析有大致十个过程，如下：">www.baidu.com时，DNS解析有大致十个过程，如下：</a></p><ol><li><p>浏览器先检查<strong>自身缓存</strong>中有没有被解析过的这个域名对应的ip地址，如果有，解析结束。同时域名被缓存的时间也可通过<strong>TTL属性</strong>来设置。</p></li><li><p>如果浏览器缓存中没有（专业点叫还没命中），浏览器会检查操作系统缓存中有没有对应的已解析过的结果。而操作系统也有一个域名解析的过程。在windows中可通过c盘里一个叫hosts的文件来设置，如果你在这里指定了一个域名对应的ip地址，那浏览器会首先使用这个ip地址。</p></li><li><p>如果至此还没有命中域名，才会真正的请求<strong>本地域名服务器（LDNS）</strong>来解析这个域名，这台服务器一般在你的城市的某个角落，距离你不会很远，并且这台服务器的性能都很好，一般都会缓存域名解析结果，大约80%的域名解析到这里就完成了。</p></li><li><p>如果LDNS仍然没有命中，就直接跳到Root Server <strong>域名服务器</strong>请求解析</p></li><li><p><strong>根域名服务器</strong>返回给LDNS一个所查询域的<strong>主域名服务器</strong>（gTLD Server，国际顶尖域名服务器，如.com .cn .org等）<strong>地址</strong></p></li><li><p>此时LDNS再发送请求给上一步返回的gTLD</p></li><li><p>接受请求的gTLD查找并返回<strong>这个域名对应的Name Server的地址</strong>，这个Name Server就是网站注册的域名服务器</p></li><li><p>Name Server根据映射关系表找到<strong>目标ip</strong>，返回给LDNS</p></li><li><p>LDNS缓存这个域名和对应的ip</p></li><li><p>LDNS把解析的结果返回给用户，用户根据TTL值缓存到本地系统缓存中，域名解析过程至此结束</p></li></ol><h3 id="UDP-amp-TCP"><a href="#UDP-amp-TCP" class="headerlink" title="UDP&amp;TCP"></a>UDP&amp;TCP</h3><p><a href="https://blog.csdn.net/greentealc/article/details/79880220">TCP+UDP</a></p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>1：消息，临时响应，代表请求已被接受，需要继续处理</p><p>2：成功，代表请求已成功被服务器接收、理解、并接受。</p><p>3：重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。</p><ul><li><p><a href="https://zh.wikipedia.org/wiki/HTTP_301">301 Moved Permanently</a></p><p>被请求的资源已<strong>永久移动</strong>到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。</p></li><li><p><a href="https://zh.wikipedia.org/wiki/HTTP_302">302 Found</a></p><p>要求客户端执行<strong>临时重定向</strong>（原始描述短语为“Moved Temporarily”）</p></li><li><p><a href="https://zh.wikipedia.org/wiki/HTTP_303">303 See Other</a></p><p>对应当前请求的响应可以在另一个 URI 上被找到</p></li><li><p><strong>304 Not Modified</strong></p><p>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。</p><p>表示资源在由请求头中的<code>If-Modified-Since</code>或<code>If-None-Match</code>参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p><p>注：与协商缓存有关</p></li><li><p>305 Use Proxy</p><p>被请求的资源必须通过指定的<strong>代理</strong>才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。</p></li></ul><p>4：客户端错误</p><ul><li>400 Bad Request</li></ul><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p><ul><li>401 Unauthorized</li></ul><p>未认证，类似于 403 Forbidden</p><ul><li><strong>404 Not Found</strong></li><li><strong>405 Method Not Allowed</strong></li><li><strong>418 I’m a teapot</strong></li></ul><p>5：服务器错误</p><ul><li>500 Internal Server Error</li></ul><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p><ul><li>502 Bad Gateway</li></ul><p>作为<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E5%85%B3">网关</a>或者<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8">代理</a>工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p><ul><li><p>503 Service Unavailable</p><p>由于临时的服务器维护或者<a href="https://zh.wikipedia.org/wiki/%E9%81%8E%E8%BC%89">过载</a>，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。</p></li><li><p>504 Gateway Timeout</p><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI 标识出的服务器，例如<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>、<a href="https://zh.wikipedia.org/wiki/FTP">FTP</a>、<a href="https://zh.wikipedia.org/wiki/LDAP">LDAP</a>）或者辅助服务器（例如<a href="https://zh.wikipedia.org/wiki/DNS">DNS</a>）收到响应。</p></li></ul><h3 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h3><ul><li>get：请求资源，可以使用缓存</li><li>Post：提交数据，POST 产生两个 TCP 数据包，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据），不能使用缓存</li><li>Put：更新资源</li><li>Delete：删除资源</li><li>Options：返回某资源所支持的 HTTP 请求方法</li><li>Trace：回显服务器收到的请求，主要用于测试或诊断</li><li>Connect：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="从输入URL到页面加载完成"><a href="#从输入URL到页面加载完成" class="headerlink" title="从输入URL到页面加载完成"></a><a href="https://www.cnblogs.com/liutianzeng/p/10456865.html">从输入URL到页面加载完成</a></h3><p>　　1、浏览器的地址栏输入URL并按下回车。</p><p>　　2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。</p><p>　　3、DNS解析URL对应的IP。</p><p>　　4、根据IP建立TCP连接（三次握手）。</p><p>　　5、HTTP发起请求。</p><p>　　6、服务器处理请求，浏览器接收HTTP响应。</p><p>　　7、渲染页面，构建DOM树。</p><p>　　8、关闭TCP连接（四次挥手）。</p><p>页面加载时，大致可以分为以下几个步骤：</p><ol><li>　　开始解析HTML文档结构</li><li>　　加载外部样式表及JavaScript脚本</li><li>　　解析执行JavaScript脚本</li><li>　　DOM树渲染完成</li><li>　　加载未完成的外部资源（如 图片）</li><li>页面加载成功</li></ol><h3 id="浏览器存储方式：Cookie、SessionStorage、LocalStorage"><a href="#浏览器存储方式：Cookie、SessionStorage、LocalStorage" class="headerlink" title="浏览器存储方式：Cookie、SessionStorage、LocalStorage"></a>浏览器存储方式：Cookie、SessionStorage、LocalStorage</h3><p>共同点：都是存储在浏览器端</p><p>不同点：</p><ul><li><p>cookie 可以在浏览器和服务器中来回传递的，而余下两者是只在本地保存的。</p></li><li><p>可存储数据的大小不一样，cookie 数据不能超过 4k，剩下的就比较大了，大概是在 5M 左右。</p></li><li><p>数据有效期不一样，sessionStorage 当关闭浏览器的时候就失效了，localStorage 一直有效，需要手动清</p><p>除，而 cookie 只在有效期之内一直有效。</p></li><li><p>作用域不一样，localStorage、cookie 在所有同源窗口中都是共享的，sessionStorage 是某个窗口私有</p><p>的。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前端面试中的重要考点&quot;&gt;&lt;a href=&quot;#前端面试中的重要考点&quot; class=&quot;headerlink&quot; title=&quot;前端面试中的重要考点&quot;&gt;&lt;/a&gt;前端面试中的重要考点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML与CSS&lt;/li&gt;
&lt;li&gt;原型，作用域，异步&lt;/li&gt;
&lt;li&gt;DOM事件与Ajax&lt;/li&gt;
&lt;li&gt;性能优化&lt;/li&gt;
&lt;li&gt;手写代码&lt;/li&gt;
&lt;li&gt;HTTP协议&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TCP连接 学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/02/18/TCP%E8%BF%9E%E6%8E%A5-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/02/18/TCP%E8%BF%9E%E6%8E%A5-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-18T12:55:01.000Z</published>
    <updated>2021-02-24T03:20:03.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计网学习"><a href="#计网学习" class="headerlink" title="计网学习"></a>计网学习</h1><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p><strong>关键词</strong><br>面向连接的可靠的传输</p><p>确认ACK（确认号是否有效，一般置为1）：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效</p><p>同步SYN（请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1）：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</p><p>终止FIN（希望断开连接）：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</p><a id="more"></a><p>三次握手</p><p>C to S : 建立连接 SYN</p><p>S to C : SYN+ACK</p><p>C to S : ACK</p><p>四次分手（目的是为了让资源不要随意释放）</p><p>C to S : FIN</p><p>S to C : FIN+ACK</p><p>S to C : FIN</p><p>C to S : ACK</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>【1】为什么连接3次握手，断开4次分手</p><p>“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”</p><p>防止了服务器端的一直等待而浪费资源</p><p>当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，<strong>很可能并不会立即关闭SOCKET</strong>，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p>在谢希仁著《计算机网络》书中同时举了一个例子，如下：</p><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，<strong>而是在某个网络结点长时间的滞留了</strong>，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。<strong>这样，server的很多资源就白白浪费掉了</strong>。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p><p>【2】为什么不能连接时2次握手</p><p>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p><p>为了保证服务端S能收接受到客户端C的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手。</p><h2 id="Socket-套接字"><a href="#Socket-套接字" class="headerlink" title="Socket 套接字"></a>Socket 套接字</h2><p>ip+port 唯一表示</p><p>ip找到主机</p><p>port（端口号）找到程序<br>65535个</p><font size="3"><h3 id="一-OSI七层模型-amp-TCP-IP四层模型"><a href="#一-OSI七层模型-amp-TCP-IP四层模型" class="headerlink" title="一. OSI七层模型 &amp; TCP/IP四层模型"></a>一. OSI七层模型 &amp; TCP/IP四层模型</h3><p>​    五层模型 【作用】<br>​    1. 应用层 ： 应用进程间【通信数据】的处理<br>​        2. 传输层 ： 实现【两台主机】间【数据传输】<br>​        3. 网络层 ： 两台主机通信，会经过多段【数据链路】。网络层作用 【选择】合适的路由和交换节点<br>​        4. 数据链路层 ： 确保【一段链路】上的数据传输<br>​        5. 物理层 ： 实现 【两个节点间】【比特流】的【透明传输】</p><hr><h3 id="二-应用层-amp-传输层-amp-网络层-常见协议-1710"><a href="#二-应用层-amp-传输层-amp-网络层-常见协议-1710" class="headerlink" title="二. 应用层 &amp; 传输层 &amp; 网络层 常见协议 1710"></a>二. 应用层 &amp; 传输层 &amp; 网络层 常见协议 1710</h3><h5 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h5><p>​        DNS ： 实现 域名–&gt;IP地址<br>​            (注意：多个主机可以映射成一个IP地址，一台主机 映射唯一MAC地址)<br>​        HTTP ： 实现 客户端 向服务端请求资源，服务端向客户端发送 资源数据(html css js)<br>​        FTP： 文件传输协议<br>​        STMP： 邮件传输协议<br>​        SSL： 加密套接字协议<br>​        </p><h5 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h5><p>​        TCP： </p><ol><li><p>【区别】：面向连接、可靠的数据传输，一对一全双工</p></li><li><p>【应用场景】：应用于【文件传输、重要状态更新】</p></li><li><p>【基于TCP的协议】：HTTP、FTP、SMTP 协议基于TCP。 【文件传输、邮件发送，要求可靠性】</p></li></ol><pre><code>     UDP：      1. 【区别】：不面向连接、不可靠的数据传输，一对多     2. 【应用场景】： 应用于【视频传输、实时通信】     3. 【基于UDP的协议】： DNS协议  (数据量小，调用频繁。建立连接开销过大)</code></pre><h5 id="网络层："><a href="#网络层：" class="headerlink" title="网络层："></a>网络层：</h5><p>ARP ： 实现 IP地址–&gt;Mac地址<br>          IP：【主机间通信】  经过多段数据链路，<br>         IP协议 = 【路由+交换节点】的选择<br>         IP协议 = 【无连接、不可靠】数据传输</p><hr><h3 id="三-TCP-三次握手"><a href="#三-TCP-三次握手" class="headerlink" title="三.   TCP 三次握手"></a>三.   TCP 三次握手</h3><p>【==三次握手目的==】： 双方确认 自己和对方的 【<strong>发送与接受正常</strong>】</p><h5 id="！！3-1-为什么三次握手"><a href="#！！3-1-为什么三次握手" class="headerlink" title="！！3.1. 为什么三次握手"></a>！！3.1. 为什么三次握手</h5><p>ACK 确认位<br>SYN 同步位<br>seq 序号： 自己本次数据的开始序号<br>ack 确认号 : 对方下次数据的开始序号</p><p>(1) 客户端–SYN，seq=x –&gt;服务端<br>    服务端确认 客户端发送和服务端接受 正常<br>(2) 服务端–ACK SYN seq=y ack =x+1 –&gt; 客户端<br>    客户端确认  客户端发送和接受 服务端发送和接受 正常<br>    【SYN=1的原因】 ： 服务端告诉客户端 我接收到的信息确实是你发送的<br>(3) 客户端–ACK seq=x+1 ack=y+1–&gt;服务端<br>    服务端确认 客户端接受 和 服务端发送 正常<br>    第三次握手 ，客户端可向 服务端传输信息<br>    【ACK=1的原因】 客户端告诉服务端 ， 我接受到的信息确实是你发送的<br>三次握手 确认双方 接受和发送功能正常，缺一不可</p><h5 id="3-2-缺少第三次握手"><a href="#3-2-缺少第三次握手" class="headerlink" title="3.2 缺少第三次握手"></a>3.2 缺少第三次握手</h5><p>第一次握手时，客户端 发送SYN信息滞留，超时重传。滞留信息 和   超时重传信息最终都成功发送，则存在两次连接建立，浪费资源。</p><hr><h3 id="四-TCP-四次挥手-1853"><a href="#四-TCP-四次挥手-1853" class="headerlink" title="四. TCP 四次挥手 1853"></a>四. TCP 四次挥手 1853</h3><h5 id="！！4-1-四次挥手过程"><a href="#！！4-1-四次挥手过程" class="headerlink" title="！！4.1 四次挥手过程"></a>！！4.1 四次挥手过程</h5><p>​    第一次挥手 ： 客户端–&gt;服务端发送断开请求。请求 = {FIN=1,seq=x}<br>​    第二次挥手 ： 服务端–&gt;客户端发送响应。响应 = {ACK=1,seq=y,ack=x+1}<br>​<br>​    期间存在 服务端–&gt;客户端 发送数据<br>​<br>​    第三次挥手 ： 服务端—&gt;客户端发送断开请求。 请求 = {FIN=1，seq=z}<br>​    第四次挥手 ： 客户端—&gt;服务端发送响应 。 响应 = {ACK=1,ack=z+1,}<br>​<br>​    至此 连接关闭</p><h5 id="！！4-2-第四次挥手后-【客户端-time-wait】，等待2MSL-1933"><a href="#！！4-2-第四次挥手后-【客户端-time-wait】，等待2MSL-1933" class="headerlink" title="！！4.2 第四次挥手后 【客户端= time wait】，等待2MSL 1933"></a>！！4.2 第四次挥手后 【客户端= time wait】，等待2MSL 1933</h5><p>第四次挥手的【报文段】丢失，则服务端【超时重传】第三次挥手【报文段】。<br>若 客户端未等待2MSL直接关闭，则无法接受重传【报文段】，关闭失败。</p><h5 id="4-3-CLOSE-WAIT-TIME-WAIT"><a href="#4-3-CLOSE-WAIT-TIME-WAIT" class="headerlink" title="4.3 CLOSE-WAIT TIME-WAIT"></a>4.3 CLOSE-WAIT TIME-WAIT</h5><ol><li>CLOSED-WAIT ：   服务端 【被动接受】断开连接请求</li><li>TIME-WAIT : 发送完最后一次ACK报文段后，进入TIME-WAIT，等待2MSL.防止最后ACK报文段丢失。</li></ol><h5 id="4-4-TIME-WAIT状态过多"><a href="#4-4-TIME-WAIT状态过多" class="headerlink" title="4.4 TIME-WAIT状态过多"></a>4.4 <a href="https://www.cnblogs.com/dadonggg/p/8778318.html">TIME-WAIT状态过多</a></h5><p>TIME-WAIT状态占用端口。<br>短链接 = {处理业务+传输数据} &lt; TIME-wait的时间 的连接</p><p>【高并发短连接】服务器【主动】申请关闭连接，造成TIME-WAIT过多。</p><p>​    </p><hr><h3 id="五-TCP可靠性"><a href="#五-TCP可靠性" class="headerlink" title="五.TCP可靠性"></a>五.TCP可靠性</h3><ol><li><p>校验和： 确保端到端数据可靠传输，TCP首部含有校验和字段，</p></li><li><p>【ARQ】自动重传请求 :  存在 【等待停止】 和 【GO_BACK_N】 两种ARQ </p></li><li><p>【流量控制】：<br> (1) 【目的】：  防止【接收端】的接受能力不足<br> (2) 接收端返回【确认报文】中含【接收窗口】大小</p></li><li><p>【拥塞控制】:<br> (1) 【目的】：  防止【全局网络 】如【路由器||链路】过载<br> (2) 【网络】拥塞情况决定的【拥塞窗口】大小。<br> (3) TCP拥塞控制采用四种算法, </p><p> ​    1) 慢开始： 拥塞窗口大小cwbd &lt; 慢开始阈值， 每经过一轮传播，cwnd加倍</p><p> ​    2)拥塞避免、 ： 拥塞窗口大小cwbd &gt; 慢开始阈值, 每经过一轮传播 拥塞窗口+1</p><p> ​    3)快重传 :<br> ​        当【接收端】接收到【顺序错误】的报文段后，向【发送端】发送【重复】ACK报文。<br> ​        此时 发送端是根据【接收重复ACK报文】判断传输失败，而不是根据【超时】判断发送失败。避免【超时等待】时，发送端空等。<br> ​    4)快恢复<br> ​        【慢开始阈值】 = 【初始拥塞窗口】 = 【旧拥塞窗口的一半】<br> 【发送窗口】 = Math.min(接收窗口、拥塞窗口);</p><hr></li></ol><h3 id="六-输入URL显示主页-1149-1249"><a href="#六-输入URL显示主页-1149-1249" class="headerlink" title="六. 输入URL显示主页 1149 - 1249"></a>六. 输入URL显示主页 1149 - 1249</h3><ol><li><p>DNS 解析域名</p></li><li><p>建立TCP连接 ： 三次握手</p></li><li><p>创建http请求报文，并通过【SSL加密】。最后发送http请求<br> 请求报文 = {</p><ul><li><p>请求行 = {请求方法 + URL + http版本} </p></li><li><p>请求首部 = {</p><pre><code>  Connnection = keep-alive ，  Accept = 客户端接收的数据类型，  content -length = 内容长度</code></pre><p>   }</p></li><li><p>请求实体 = { 如 【请求方法=post||put】，则请求实体存储传输的数据}<br>}</p><p>请求经过【负载均衡+重定向】</p></li></ul><ol start="4"><li><p>服务端接收解析http请求，并返回http响应。<br>响应报文 = {</p><ul><li><p>响应行 = { 协议版本 + 状态码 }</p></li><li><p>响应首部 = {<br> content-legnth<br> content-type = html<br> }    </p></li><li><p>响应实体 = { 请求所需的资源 如 html css js}<br> }</p><ol start="5"><li><p>浏览器解析http响应，并渲染页面</p></li><li><p>断开TCP连接 ： 四次挥手</p></li></ol></li></ul></li></ol></li></ol><hr><h3 id="七-HTTPS-1500"><a href="#七-HTTPS-1500" class="headerlink" title="七. HTTPS  1500"></a>七. HTTPS  1500</h3><p>(1)    【对称加密】： 密钥只有一个，加密解密使用同个密码。【速度快】<br>            【优点】： 速度快<br>            【缺点】 ： 无法确保【消息来源】，存在自己发自己的情况</p><p>(2)    【非对称加密】： 密钥分 公钥、私钥(本人保管)。<br>            (公钥加密内容 使用私钥解密，私钥加密内容，使用公钥解密)。<br>            【举例】： A 发送邮件给B ， 若邮件使用A的私钥加密，则确保(确保邮件来源)。 若邮件使用B的公钥加密，则确保邮件去处。<br>            【优点】： 确保【消息来源】 || 【消息去处】 【二者按需取一】<br>            【缺点】： 速度慢<br>(3)     【数字签名】：<br>            数字签名 = 对消息的hash值使用私钥加密。<br>            数字签名添加在消息尾部<br>            【优点】：确保 【消息来源】 和 【消息未被修改】。<br>            【缺点】：C修改B电脑中的A公钥，C冒充A发送数据给B，B无法察觉。<br>(4)     【数字证书】：<br>            数字证书 = 将A的公钥交由第三方CA(Certificate Authority)的私钥加密<br>            数字证书 添加在 消息尾部。避免B电脑中A公钥被替换。</p><p>(1) HTTP 默认端口 = 80<br>    HTTP协议 运行在TCP之上，http报文是明文。<br>    【http安全缺陷】 = {<br>            (1) 无法验证服务器身份<br>            (2) 无法确保数据完整性<br>            (3) 无法确保数据未被窃听<br>        }<br>(2) HTTPS 默认端口 = 443<br>    HTTPS = HTTP报文 + SSL协议(加密http报文)<br>    【http报文】 采用【对称加密】，【对称加密的密钥】采用【服务端数字证书】进行【非对称加密】<br>    接收方</p><p> 非对称加密 采用 幂模运算，在解密过程中私钥很大，导致幂运算很慢</p><h5 id="https-加密过程"><a href="#https-加密过程" class="headerlink" title="https 加密过程"></a><a href="https://www.cnblogs.com/wqhwe/p/5407468.html">https 加密过程</a></h5><hr><h3 id="八-HTTP-长短连接-1718"><a href="#八-HTTP-长短连接-1718" class="headerlink" title="八. HTTP 长短连接 1718"></a>八. HTTP 长短连接 1718</h3><p>​    Http短链接 ： 每次客户端发送请求都会重新建立连接。<br>​    Http长连接 ： 服务器响应报文中，其响应首部 connection=keep-alive，表明该链接是长连接，一段时间内不断开。客户端再次发送请求时通过该链接。</p><hr><h3 id="！！九-Cookie-和-Session的区别"><a href="#！！九-Cookie-和-Session的区别" class="headerlink" title="！！九. Cookie 和 Session的区别"></a>！！九. Cookie 和 Session的区别</h3><p>HTTP协议是无状态协议。不保存【用户状态】。</p><p>   (1) Session作用：实现【服务端】存储【用户状态】<br>            每个用户绑定一个SessionID，请求中url或者cookie拿到sessionid<br>            Session存储在服务器||数据库中，超过一段时间会销毁。<br>            常用于 购物车场景。明确购物操作是哪一个用户进行的。</p><p>Cookie作用 ：实现【客户端】存储【用户状态】<br>        有4KB的大小限制<br>        当请求发送给同个domain中服务器，则都会携带cookie<br>        可以禁用cookie<br>        常用于下次访问网站时自动登录</p><hr><h3 id="十-URI-和URL"><a href="#十-URI-和URL" class="headerlink" title="十. URI 和URL"></a>十. URI 和URL</h3><p>​    URI : 统一资源标识符，唯一标识一个资源<br>​    URL : 统一资源定位器，定位资源所在位置</p><hr><h3 id="！十一-HTTP1-0-和-HTTP1-1"><a href="#！十一-HTTP1-0-和-HTTP1-1" class="headerlink" title="！十一. HTTP1.0 和 HTTP1.1"></a>！十一. HTTP1.0 和 HTTP1.1</h3><pre><code>1. HTTP1.0 默认使用短链接 ， HTTP1.1默认使用长连接     </code></pre><ol start="2"><li><p>http1.0 存在【带宽浪费】：<br>   例如<br>   客户端仅需要某资源对象的一部分，<br>   但在http1.0中只能请求整个资源。<br>   http1.1中【允许请求资源的某个部分】，响应码206。</p></li><li><p>【错误状态响应码不同】：<br>   http1.1中增加【错误状态】响应码，<br>   如 409(confilct)请求资源和资源当前状态冲突 410(GONE) 请求资源永久删除 </p></li><li><p>【缓存处理】<br>   http1.1 在报文首部中 引入If-unModitfied-Since If-match等缓存头</p></li><li><h6 id="【host头】："><a href="#【host头】：" class="headerlink" title="【host头】："></a>【host头】：</h6><p>   ttp1.0认为一台主机匹配一个IP地址，因此 request中的URL不带有hostname<br>   虚拟机技术发展， 一台物理主机可以创建多台虚拟主机，<br>   http1.1通过hostname指定虚拟机，http1.1不指定hostname，则会报错400 请求错误</p></li></ol><h4 id="HTTP1-1-和-http-2-0-区别"><a href="#HTTP1-1-和-http-2-0-区别" class="headerlink" title="HTTP1.1 和 http 2.0 区别"></a>HTTP1.1 和 http 2.0 区别</h4><ol><li>HTTP/2采用二进制格式(传统二进制格式 健壮性考虑因素很多)</li><li>多路复用 (共享连接) ：<br> HTTP1.X采用keep alive来解决复用TCP的问题，但是仍存在请求阻塞问题<br> HTTP1.x需要每条请求顺序发送,服务端才能判断接收到的数据属于哪条请求<br> HTTP/2 每个请求以stream的方式传输，每个stream有唯一标识  </li><li>header ：<br> 通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小</li></ol><p>   HAPCK</p><p>服务器推送：<br>浏览器只请求了index.html，但是服务器把index.html、style.css、example.png全部发送给浏览器</p><p>​    </p><hr><h3 id="十二-get和post的区别"><a href="#十二-get和post的区别" class="headerlink" title="十二. get和post的区别"></a>十二. get和post的区别</h3><ol><li>【参数传递】<br> GET参数通过URL传递<br> POST数据通过 http请求的请求实体传递</li><li>【刷新】<br> GET方法用于获取资源，不改变资源的状态，所以是幂等的<br> POST方法用于创建资源，不幂等<br> 两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI</li><li>【缓存问题】<br> GET在浏览器中缓存，post不缓存</li></ol><hr><h4 id="十三-状态码"><a href="#十三-状态码" class="headerlink" title="十三. 状态码"></a>十三. 状态码</h4><p>​    1XX请求成功，正在处理<br>​    2XX请求成功，已经处理<br>​        200 - 请求成功<br>​        206 - 请求部分成功<br>​    3XX 重定向<br>​    301永久重定向<br>​    302临时重定向<br>​<br>​    4XX<br>​    400 请求语法错误<br>​    403 服务被拒绝<br>​    404页面不存在<br>​<br>​    5XX<br>​    500服务器内部错误（报错了）<br>​    502 服务不可用</p><h4 id="十四-正向代理和-反向代理"><a href="#十四-正向代理和-反向代理" class="headerlink" title="十四. 正向代理和 反向代理"></a>十四. 正向代理和 反向代理</h4><p>正向代理隐藏真实客户端，<br>    1. 做【缓存】，加速访问资源<br>        2. 对客户端【授权】<br>        3. 客户端访问记录</p><p>反向代理隐藏真实服务端，<br>    1. 实现负载均衡<br>        2. 避免网络攻击</p></font>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计网学习&quot;&gt;&lt;a href=&quot;#计网学习&quot; class=&quot;headerlink&quot; title=&quot;计网学习&quot;&gt;&lt;/a&gt;计网学习&lt;/h1&gt;&lt;h2 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;&lt;br&gt;面向连接的可靠的传输&lt;/p&gt;
&lt;p&gt;确认ACK（确认号是否有效，一般置为1）：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效&lt;/p&gt;
&lt;p&gt;同步SYN（请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1）：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。&lt;/p&gt;
&lt;p&gt;终止FIN（希望断开连接）：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接&lt;/p&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>并发learning</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/02/18/%E5%B9%B6%E5%8F%91learning-1/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/02/18/%E5%B9%B6%E5%8F%91learning-1/</id>
    <published>2021-02-18T12:00:03.000Z</published>
    <updated>2021-02-20T14:15:14.513Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-进程process和线程thread的关系"><a href="#一-进程process和线程thread的关系" class="headerlink" title="一. 进程process和线程thread的关系"></a>一. 进程process和线程thread的关系</h4><h5 id="两者的定义"><a href="#两者的定义" class="headerlink" title="两者的定义"></a><strong>两者的定义</strong></h5><p>进程(process)是程序运行的基本单位。一个进程可以有多个线程。进程是及程序的一次执行过程，是正在运行的程序的抽象，代表了运行的CPU。系统资源（内存，文件等）都已进程为单位分配。操作系统为每个进程都分配了独立的地址空间，同时通过“调度”把控制权交给了进程。</p><p>但是进程存在问题：</p><ol><li>进程切换的代价和开销大</li><li>在一个进程内需要并行执行多个程序与实现不同功能</li><li>有时性能低</li></ol><p>线程(thread)是进程划分成更小的运行单位。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。多个线程【共享】进程的【堆和方法】区资源，但每个线程【独占】一个【程序计数器、虚拟机栈、本地方法栈】。</p><h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a><strong>区别：</strong></h5><ol><li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多</li></ol><a id="more"></a><hr><h4 id="二-如何避免死锁"><a href="#二-如何避免死锁" class="headerlink" title="二. 如何避免死锁"></a>二. 如何避免死锁</h4><h5 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a><strong>什么是死锁？</strong></h5><p>两个或两个以上的线程在执行过程中，由于竞争资源而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。简化一点说就是：<u>一组相互竞争资源的线程因为互相等待，导致“永久”阻塞的现象。</u></p><h5 id="死锁的【四个必要条件】"><a href="#死锁的【四个必要条件】" class="headerlink" title="死锁的【四个必要条件】"></a><strong>死锁的【四个必要条件】</strong></h5><ul><li>互斥，共享资源 X 和 Y 只能被一个线程占用；</li><li>占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</li><li>不可抢占，其他线程不能强行抢占线程 T1 占有的资源；</li><li>循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等待。</li></ul><p> <strong>避免【线程死锁】</strong><br>       1. 加锁顺序<br>       2. 加锁时限<br>       3. 死锁检测</p><p><strong>例子</strong>：</p><hr><h4 id="三-一些基础问题"><a href="#三-一些基础问题" class="headerlink" title="三. 一些基础问题"></a>三. 一些基础问题</h4><h5 id="3-1-sleep-和-wait的区别"><a href="#3-1-sleep-和-wait的区别" class="headerlink" title="3.1 sleep 和 wait的区别"></a>3.1 sleep 和 wait的区别</h5><ol><li>【是否释放锁】：sleep 没有释放锁，wait释放锁。<br> 因此 wait多用线程交互，sleep只是暂停线程执行</li><li>【是否自动苏醒】：<br> 线程调用sleep()后，会自动苏醒。<br> 线程调用wait() ，若wait()无参，需要等待其他线程调 【同一对象】的notify() notifyAll()唤醒.若wait()方法有timeout参数,则会超时后苏醒。    </li></ol><h5 id="3-2-为什么调用start执行run-，而不是直接调用run"><a href="#3-2-为什么调用start执行run-，而不是直接调用run" class="headerlink" title="3.2 为什么调用start执行run()，而不是直接调用run()"></a>3.2 为什么调用start执行run()，而不是直接调用run()</h5><p>直接调用run()方法： 只是在main()线程中将run方法作为普通方法调用，还是在main线程中执行。这并不是多线程<br>调用start()方法 ： 启动一个线程 &amp; 使该线程进入就绪状态，当该线程分配到时间片后开始运行。</p><hr><h4 id="四-Synchronized-相关问题"><a href="#四-Synchronized-相关问题" class="headerlink" title="四. Synchronized 相关问题"></a>四. Synchronized 相关问题</h4><h5 id="4-1-sychronized-使用方式"><a href="#4-1-sychronized-使用方式" class="headerlink" title="4.1 sychronized 使用方式"></a>4.1 sychronized 使用方式</h5><p>Synchronized 修饰对象 = {1. 代码块  2. 方法}</p><ol><li>Synchronized 修饰 静态方法 ||  Sychronized(Class)修饰代码块 = {<br> Class 类上锁<br>}</li><li>Synchronized 修饰 实例方法 {<br> 该类的某个对象实例上锁<br>}</li></ol><h5 id="4-2-单例模式-【双重校验锁】-实现对象单例"><a href="#4-2-单例模式-【双重校验锁】-实现对象单例" class="headerlink" title="4.2 单例模式 =  【双重校验锁】 实现对象单例"></a>4.2 单例模式 =  【双重校验锁】 实现对象单例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Class Singleton&#123;</span><br><span class="line">    <span class="comment">// 为什么 volatile修饰</span></span><br><span class="line">    ---</span><br><span class="line">    </span><br><span class="line">    JVM指令重排 ，为对象分配内存空间，并且uniqueInstance指向该内存地址，但是对象并未初始化</span><br><span class="line">    线程T2调用get方法，在外层校验中发现uniqueInstance！=<span class="keyword">null</span>,则直接返回。【但此时uniqueInstance未被初始化】</span><br><span class="line">    </span><br><span class="line">    ---</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance ;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 私有构造器     </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance==<span class="keyword">null</span>)&#123; <span class="comment">// 检测单例是否已经创建</span></span><br><span class="line">            Synchronized(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(uniqueInstance==<span class="keyword">null</span>)&#123; <span class="comment">// 检测其他线程是否先获取锁创建了单例对象</span></span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-JDK1-6后-Synchronized的底层优化-1041"><a href="#4-3-JDK1-6后-Synchronized的底层优化-1041" class="headerlink" title="4.3 JDK1.6后 Synchronized的底层优化 1041"></a>4.3 JDK1.6后 Synchronized的底层优化 1041</h5><p>​    四种锁状态 ： 无锁 –&gt; 偏向锁 –&gt; 轻量级锁 —&gt;重量级锁<br>​    锁随着【竞争程度】上升，逐渐升级。但不可降级。</p><pre><code>1. 【初次执行Synchronized代码块】，锁对象变为【偏向锁】    (通过CAS操作修改对象头中【锁标志位】和【持锁线程ID】)。    (偏向锁意为偏向于第一个获取它的线程)。执行完同步块后，线程不主动释放偏向锁。    当执行下一个同步块时，检测该当前想要获取锁的线程是否就是持有锁的线程。    如果是，则正常执行。【线程没有释放锁，因此也不用重新加锁】   2. 【一旦出现锁竞争】，偏向锁升级为【轻量级锁】。    如果锁标志位=释放，则线程通过【CAS操作】修改锁标志位，并获取锁。    如果锁标志位=锁定，则线程通过【自旋】等待锁的释放。    自旋：一个线程获取锁，其他线程通过忙循环等待线程释放锁。    轻量级锁本质 = 【忙等开销 换取 用户态切换到核心态的开销】   3. 【忙等是有限度】，当某个线程自旋次数达到最大自选次数。    该线程通过CAS操作修改对象头的锁标志位，表明轻量级锁升级为【重量级锁】    一个线程持有锁时，其他请求线程只能阻塞等待。</code></pre><h5 id="4-4-synchronized-底层"><a href="#4-4-synchronized-底层" class="headerlink" title="4.4 synchronized 底层"></a>4.4 synchronized 底层</h5><p>Sychronized 修饰 代码块 || 方法<br>    1.修饰代码块时<br>        通过 【monitorenter 和 monitorExit 两条指令】，分别指定同步代码块的 开始位置和结束位置。<br>        线程获取锁 = 获取位于对象头的monitor的持有权<br>        获取到锁，则计数器++。 执行到monitorExit，则计数器–</p><pre><code>2.修饰方法     JVM通过 ACC_SYNCHRONIZED 辨别方法为同步方法 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【面试口头】</span><br><span class="line">    Sychronized 是【JVM】层面的关键字。它是通过 【字节码指令】实现的。</span><br><span class="line">       (1) Sychronized 修饰 【代码块】时，montior-enter monitor-exit两个字节码指令表明 同步块的开始和结束位置。</span><br><span class="line">       (2) Sychronized 修饰 【方法】时，JVM中通过ACC_SYCHRONIZED 标志同步方法 </span><br></pre></td></tr></table></figure><h5 id="4-5-ReentrantLock-和-Sychronized-区别"><a href="#4-5-ReentrantLock-和-Sychronized-区别" class="headerlink" title="4.5  ReentrantLock 和 Sychronized 区别"></a>4.5  ReentrantLock 和 Sychronized 区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.  两者都是【可重入锁】 : </span><br><span class="line">    获得某一对象锁时，若自己未释放，也可重复再次获得该对象的锁 。 锁计数器++ </span><br><span class="line">    </span><br><span class="line">2. Sychronized 依赖JVM实现，而ReentrantLock 依赖API实现(JDK层面)</span><br><span class="line">    ReentrantLock 调用 lock() unlock() try&#x2F;finally语句 实现同步块，可以直接查看源代码</span><br><span class="line">    Sychronized 在JVM层面，通过字节码指令 monitorEnter monitorExit指定同步块的开始和结束位置 </span><br><span class="line">    </span><br><span class="line">3. ReentrantLock 实现高级功能</span><br><span class="line">    (1) ReentrantLock实现等待可中断 ： </span><br><span class="line">        通过调用 lockInterruptibly() 中断等待锁的线程</span><br><span class="line">    (2) ReentrantLock可实现公平锁，而Sychronized仅实现非公平锁：</span><br><span class="line">        公平锁 &#x3D; 先等待的线程，先获得锁</span><br><span class="line">    (3) 等待&#x2F;通知机制 不同：</span><br><span class="line">        Sychronized 通过 notiy() notifyAll() wait() 实现等待&#x2F;通知机制</span><br><span class="line">        ReentrantLock 通过 Condition对象实现。</span><br><span class="line">            一个lock可创建多个Condition对象，一个Condition对象可注册多个线程。</span><br><span class="line">            Condition 对象调用signal ||signalAll() </span><br><span class="line">                唤醒线程所在范围 &#x3D;  注册的线程，</span><br><span class="line">            而Sychronized 调用 notify() || notifyAll() </span><br><span class="line">                唤醒线程 &#x3D; JVM选择的</span><br><span class="line">            因此 ReentrantLock的等待通知机制更加灵活</span><br><span class="line">    </span><br><span class="line">        </span><br></pre></td></tr></table></figure><hr><h4 id="五-volatile"><a href="#五-volatile" class="headerlink" title="五. volatile"></a>五. volatile</h4><h5 id="5-1-volatile-作用"><a href="#5-1-volatile-作用" class="headerlink" title="5.1 volatile 作用"></a>5.1 volatile 作用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 防止指令重排</span><br><span class="line">2. 保证变量的可见性</span><br><span class="line">    当前Java内存模型，不是从主存读取变量，而是将变量保存在本地内存(寄存器)。</span><br><span class="line">    可能存在 一个线程修改【主存】中的变量值，而另一个线程仍使用【本地内存】中的变量拷贝值，</span><br><span class="line">    造成【数据】不一致。</span><br><span class="line">    变量声明为volatile，即告知JVM该变量不稳定。每次要在主存中读取值。</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="5-2-Synchronized-和-volatile-的区别"><a href="#5-2-Synchronized-和-volatile-的区别" class="headerlink" title="5.2 Synchronized 和 volatile 的区别"></a>5.2 Synchronized 和 volatile 的区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 【是否阻塞】</span><br><span class="line">    volatile 不会造成阻塞，Synchronized会造成阻塞</span><br><span class="line">2. 【作用范围不同】</span><br><span class="line">    volatile 只能修饰变量， Synchronized 修饰 代码块和 方法 </span><br><span class="line">3. 【作用不同】</span><br><span class="line">    volatile 主要用于保证变量在多个线程之间的可见性，而Synchronized则是保证临界资源在多个线程之间的同步性</span><br><span class="line">    volatile 仅保证变量的可见性，而不保证原子性。Synchronized两者都能保证</span><br><span class="line">4. 【效率】</span><br><span class="line">    volatile 是 线程同步的轻量级实现，效率高于Sychronized</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="五-ThreadLocal"><a href="#五-ThreadLocal" class="headerlink" title="五. ThreadLocal"></a>五. ThreadLocal</h4><p>作用 ： 和每个线程绑定专属的本地变量</p><h5 id="！5-1-ThreadLocal-底层原理"><a href="#！5-1-ThreadLocal-底层原理" class="headerlink" title="！5.1 ThreadLocal 底层原理"></a>！5.1 ThreadLocal 底层原理</h5><p>每个Thread对象中具备threadLocalMap ，而threadLocalMap中存储 key=threadLocal的键值对。<br>ThreadLocal.get() threadLocal.set();</p><h5 id="5-2-软引用-amp-弱引用"><a href="#5-2-软引用-amp-弱引用" class="headerlink" title="5.2 软引用 &amp; 弱引用"></a>5.2 软引用 &amp; 弱引用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">虚引用-&gt; 弱引用 -&gt; 软引用 -&gt; 强引用</span><br><span class="line">弱引用被GC线程发现后，不论内存空间是否不足，都立刻回收</span><br><span class="line">软引用被GC线程发现后，如果内存空间不足，则回收</span><br></pre></td></tr></table></figure><hr><h4 id="！！六-线程池-1057"><a href="#！！六-线程池-1057" class="headerlink" title="！！六. 线程池 1057"></a>！！六. 线程池 1057</h4><p>作用 ： 减少 创建和销毁线程的开销，任务无需等待线程创建可立即执行。</p><h5 id="6-1-callable-和-runnable-的区别"><a href="#6-1-callable-和-runnable-的区别" class="headerlink" title="6.1 callable 和 runnable 的区别"></a>6.1 callable 和 runnable 的区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callable 可返回值||抛出异常，runnable不行</span><br></pre></td></tr></table></figure><h5 id="6-2-submit-和-execute-区别"><a href="#6-2-submit-和-execute-区别" class="headerlink" title="6.2 submit 和 execute 区别"></a>6.2 submit 和 execute 区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execute提交【无返回值】的任务，无法根据返回值判断任务是否成功执行</span><br><span class="line">submit提交【有返回值】的任务，根据返回值判断任务是否成功执行</span><br></pre></td></tr></table></figure><h5 id="6-3-【如何】创建线程池-1344"><a href="#6-3-【如何】创建线程池-1344" class="headerlink" title="6.3  【如何】创建线程池 1344"></a>6.3  【如何】创建线程池 1344</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">方法1 ： 通过构造器 </span><br><span class="line">ThreadPoolExecutor();</span><br><span class="line">！！ 【构造器参数】</span><br><span class="line"></span><br><span class="line">    1. int corePoolSize：</span><br><span class="line">        任务数 &lt; 核心池大小 ，</span><br><span class="line">        则将任务交给空闲线程 || 创建新线程 处理  </span><br><span class="line">    2. int maximunPoolSize：</span><br><span class="line">        等待队列已满 &amp; 核心池大小&lt;任务数&lt; 最大线程数量，</span><br><span class="line">        则创建临时线程</span><br><span class="line">    3. long keepAliveTime,TimeUtil：</span><br><span class="line">        线程空闲时间 &gt; 指定时间后，则线程销毁</span><br><span class="line">    4. BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">        任务数&gt;核心池大小 &amp; 请求队列未满 ，</span><br><span class="line">        则任务加入请求队列</span><br><span class="line">        </span><br><span class="line">    5. ThreadFactory</span><br><span class="line">        负责创建线程</span><br><span class="line">    6. handler 制定拒绝策略</span><br><span class="line">方法2： 通过【工具类Executors】 创建线程池。 线程池类型如下 </span><br><span class="line">    1. FixedThreadPool ： 线程数量固定</span><br><span class="line">    2. SingleThreadExecutor : 线程数量&#x3D;1 ，多余任务提交给线程池则进入等待队列</span><br><span class="line">        如果创建这两类线程池，则其 请求队列长度&#x3D;Integer.MAX_VALUE;</span><br><span class="line">        可能堆积大量请求而导致OOM</span><br><span class="line">        </span><br><span class="line">    3. CachedThreadPool ： 线程数量不固定，优先复用空闲线程</span><br><span class="line">        该类线程池，允许创建的线程数量&#x3D;Integer.MAX_VALUE,</span><br><span class="line">        可能创建过多线程，导致OOM</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="6-4-线程池拒绝策略"><a href="#6-4-线程池拒绝策略" class="headerlink" title="6.4 线程池拒绝策略"></a>6.4 线程池拒绝策略</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. abort : 默认使用的拒绝策略， 拒绝执行任务，抛出异常</span><br><span class="line">2. CallerRunPolicy ： 调用 当前线程池所在线程执行任务</span><br><span class="line">3. discard ： 直接抛弃任务，不做任何处理</span><br><span class="line">4. discardOldest ： 抛弃 请求队列中最早的任务</span><br></pre></td></tr></table></figure><h5 id="6-5-Executor创建线程池的【弊端】"><a href="#6-5-Executor创建线程池的【弊端】" class="headerlink" title="6.5 Executor创建线程池的【弊端】"></a>6.5 Executor创建线程池的【弊端】</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FixedThreadPool 、SingleThreadExecutor 中等待队列长度设置为Integer.MAX_VALUE</span><br><span class="line"></span><br><span class="line">CachedThreadPool 和 ScheduledThreadPool 允许最大线程数设置为 Integer.MAX_VALUE</span><br><span class="line"></span><br><span class="line">这两者都可能造成 OOM的问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="七-AQS-1430"><a href="#七-AQS-1430" class="headerlink" title="七. AQS 1430"></a>七. AQS 1430</h4><p><img src="https://note.youdao.com/yws/res/43414/400F2FB130F9470BAD70079722D25F33" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">一. AQS 是构建同步器的【框架】 </span><br><span class="line">        【核心思想】 ： 线程请求资源 </span><br><span class="line">        情况1 ： 资源空闲</span><br><span class="line">            则 请求线程设置为工作线程，资源上锁</span><br><span class="line">        情况2 ： 资源被占用</span><br><span class="line">            则 请求线程阻塞，加入CLH队列。等待资源空闲时竞争资源</span><br><span class="line">    </span><br><span class="line">二. AQS 定义两种 资源共享模式</span><br><span class="line">    1. 独占锁 Exclusive  ： 锁只能被一个线程占有</span><br><span class="line">        例如 ： ReentrantLock 又分为 公平锁和非公平锁</span><br><span class="line">        </span><br><span class="line">    2. 共享锁 shared    ： 多个线程共享锁</span><br><span class="line">        例如 ： CountDownLatch 、Semaphore</span><br><span class="line">        </span><br><span class="line">三. AQS框架 自定义模块</span><br><span class="line">    尝试 获取&#x2F;释放 独占资源</span><br><span class="line">    tryAcquire()</span><br><span class="line">    tryRelease()</span><br><span class="line">    尝试 获取&#x2F;释放共享资源</span><br><span class="line">    tryAcquireShared()</span><br><span class="line">    tryReleaseShared()</span><br><span class="line"></span><br><span class="line">四. AQS 常见组件 </span><br><span class="line">    1. ReentrantLock </span><br><span class="line">        A 线程调用 lock()方法</span><br><span class="line">        若 state&#x3D;0 ，</span><br><span class="line">            则资源空闲 ，state++，且 A线程可重复获取锁 </span><br><span class="line">            </span><br><span class="line">        若 state！&#x3D;0 ， </span><br><span class="line">            则资源被占有，当state&#x3D;0时其他线程才能竞争</span><br><span class="line">    </span><br><span class="line">    2. CountDownLatch </span><br><span class="line">        (1) 构造器初始化 【state &#x3D; N】</span><br><span class="line">            </span><br><span class="line">            当【子线程】调用countDown(),通过 CAS操作state自减1</span><br><span class="line">            </span><br><span class="line">            当state&#x3D;0 时，调用await的线程 恢复正常继续执行</span><br><span class="line">    </span><br><span class="line">    3. CyclicBarrier </span><br><span class="line">        构造方法 state&#x3D;n</span><br><span class="line">         </span><br><span class="line">        每当一个线程调用 await()方法，则CAS操作state自减1</span><br><span class="line">            </span><br><span class="line">        当state&#x3D;0 时 ，所有调用await()的线程恢复</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">         </span><br></pre></td></tr></table></figure><hr><h5 id="AQS源码"><a href="#AQS源码" class="headerlink" title="AQS源码"></a>AQS源码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. aquire()</span><br><span class="line"></span><br><span class="line">public void aquire()&#123;   </span><br><span class="line">    if(!tryAcquire()    &#x2F;&#x2F; 尝试获取一次  </span><br><span class="line">        &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE),arg)) </span><br><span class="line">            &#x2F;&#x2F; acquireQueued 【作用】： 自旋检测  (tryAcquire()&amp;&amp; node&#x3D;&#x3D;head.next)</span><br><span class="line">            &#x2F;&#x2F; addWaiter【作用】： 添加当前线程node至 队列尾部</span><br><span class="line">            </span><br><span class="line">        selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line">【问题】： 为何不仅调用 acuqireQueued(addWaiter())</span><br><span class="line">    优先尝试最可能成功的代码， 可减少执行的字节码指令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="八-用户态和核心态-1425"><a href="#八-用户态和核心态-1425" class="headerlink" title="八. 用户态和核心态 1425"></a>八. 用户态和核心态 1425</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指令分为 特权指令和非特权指令</span><br><span class="line">其中 特权指令必须在核心态执行，如 启动IO &#x2F;内存清零 &#x2F;修改程序状态字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="九-乐观锁和悲观锁-很不错的总结"><a href="#九-乐观锁和悲观锁-很不错的总结" class="headerlink" title="九. 乐观锁和悲观锁 很不错的总结"></a>九. <a href="https://www.zhihu.com/search?type=content&q=%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81">乐观锁和悲观锁</a> 很不错的总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">悲观锁和乐观锁 是锁的两种分类，并非特指某一个锁。</span><br><span class="line">悲观锁【通过阻塞机制】实现，乐观锁通过【回滚重试】实现。</span><br><span class="line"></span><br><span class="line">1. 悲观锁 ：</span><br><span class="line">    【描述】：线程独占临界资源，在线程执行完毕前，其他【请求】线程只能【阻塞】等待</span><br><span class="line">    【适用场景】： 写操作较多，资源竞争激烈。</span><br><span class="line">2. 乐观锁 ：</span><br><span class="line">    【描述】：乐观锁并【未上锁】，【更新前】检测该数据在【读取到更新】这一段时间内是否被其他线程修改。如果被修改，则循环操作直到成功为止。</span><br><span class="line">    【使用场景】: 读操作较多，资源竞争情况较少</span><br><span class="line">3. CAS 是原子性操作，是乐观锁实现的基础：</span><br><span class="line">    （1） 读取值A，在更新为B之前，检测【原值】是否为A</span><br><span class="line">    （2） 如果是，则更新为B</span><br><span class="line">          如果不是，则更新失败。</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="十-Atomic原子性"><a href="#十-Atomic原子性" class="headerlink" title="十. Atomic原子性"></a>十. Atomic原子性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过 &#123;</span><br><span class="line">    unsafe CAS操作</span><br><span class="line">    Volitle 修饰属性，保证可见</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十一-多线程内存模型"><a href="#十一-多线程内存模型" class="headerlink" title="十一. 多线程内存模型"></a>十一. 多线程内存模型</h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一-进程process和线程thread的关系&quot;&gt;&lt;a href=&quot;#一-进程process和线程thread的关系&quot; class=&quot;headerlink&quot; title=&quot;一. 进程process和线程thread的关系&quot;&gt;&lt;/a&gt;一. 进程process和线程thread的关系&lt;/h4&gt;&lt;h5 id=&quot;两者的定义&quot;&gt;&lt;a href=&quot;#两者的定义&quot; class=&quot;headerlink&quot; title=&quot;两者的定义&quot;&gt;&lt;/a&gt;&lt;strong&gt;两者的定义&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;进程(process)是程序运行的基本单位。一个进程可以有多个线程。进程是及程序的一次执行过程，是正在运行的程序的抽象，代表了运行的CPU。系统资源（内存，文件等）都已进程为单位分配。操作系统为每个进程都分配了独立的地址空间，同时通过“调度”把控制权交给了进程。&lt;/p&gt;
&lt;p&gt;但是进程存在问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程切换的代价和开销大&lt;/li&gt;
&lt;li&gt;在一个进程内需要并行执行多个程序与实现不同功能&lt;/li&gt;
&lt;li&gt;有时性能低&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;线程(thread)是进程划分成更小的运行单位。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。多个线程【共享】进程的【堆和方法】区资源，但每个线程【独占】一个【程序计数器、虚拟机栈、本地方法栈】。&lt;/p&gt;
&lt;h5 id=&quot;区别：&quot;&gt;&lt;a href=&quot;#区别：&quot; class=&quot;headerlink&quot; title=&quot;区别：&quot;&gt;&lt;/a&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；&lt;/li&gt;
&lt;li&gt;一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线&lt;/li&gt;
&lt;li&gt;进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；&lt;/li&gt;
&lt;li&gt;调度和切换：线程上下文切换比进程上下文切换要快得多&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>java学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/01/18/java%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/01/18/java%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-18T10:28:47.000Z</published>
    <updated>2021-02-21T08:45:43.232Z</updated>
    
    <content type="html"><![CDATA[<font size="3"><h3 id="一-Java-方法中-仅存在【值传递】"><a href="#一-Java-方法中-仅存在【值传递】" class="headerlink" title="一.Java 方法中 仅存在【值传递】"></a>一.Java 方法中 仅存在【值传递】</h3><p>方法得到所有【参数值的拷贝】，因此，方法不能修改一个基本数据，【对象引用作为参数】，则该参数和对象引用指向同一个对象。</p><hr><h3 id="二-和-equals-区别"><a href="#二-和-equals-区别" class="headerlink" title="二. == 和 equals 区别"></a>二. == 和 equals 区别</h3><h5 id="1"><a href="#1" class="headerlink" title="1. =="></a>1. ==</h5><p> == 判断两个对象的【<strong>地址</strong>】是否相同， 即是否【<strong>同一个对象</strong>】</p><h5 id="2-equals"><a href="#2-equals" class="headerlink" title="2. equals"></a>2. equals</h5><p>equals 分两种情况<br>(1) equals 【<strong>没有被类重写</strong>】，则equals方法等价==<br>(2) equals 【<strong>被类重写</strong>】， 则根据重写方法 判断两个对象内容是否相等  </p><a id="more"></a><hr><h3 id="三-为什么重写euqals-方法-必须重写-hashCode"><a href="#三-为什么重写euqals-方法-必须重写-hashCode" class="headerlink" title="三. 为什么重写euqals 方法 必须重写 hashCode()"></a>三. 为什么重写euqals 方法 必须重写 hashCode()</h3><ol><li><p>两个对象 hashCode() 所得hash值相等 ， 但equals()方法不一定返回true  </p></li><li><p>两个对象 equals() 返回true，那么对象调用hashCode()返回的hash值一定相等  </p></li><li><p> 如果 仅重写 equals(),而不重写hashcode(),则存在 equals方法会返回true，而hashcode()方法返回的hash值不相等  </p></li><li><p>HashMap中 两个key 重复  </p></li></ol><p><strong>为什么hash值相同，而两个对象不一定equals</strong></p><ul><li>hashCode() 算法存在碰撞情况</li></ul><hr><h3 id="四-String-和-StringBuffer、StringBuilder-区别"><a href="#四-String-和-StringBuffer、StringBuilder-区别" class="headerlink" title="四. String 和 StringBuffer、StringBuilder 区别"></a>四. String 和 StringBuffer、StringBuilder 区别</h3><ol><li><p>String 【<strong>字符串常量</strong>】 ：</p><p>内部的 char[] 是通过final修饰符修饰，因此String是<strong>不可变对象</strong></p></li><li><p>StringBuffer ： 线程安全 </p></li><li><p>StringBuilder </p><p>StringBuffer 和 StringBuilder 都继承 AbstractStringBuilder</p></li></ol><p>该父类定义了append insert等公共方法<br>StringBuffer 对实现的方法加上同步锁，线程安全<br>StringBuilder 对实现的方法没有上锁，所以线程非安全</p><p>String： 适用操作少量数据<br>StringBuilder ： 适用于 【单线程】操作大量数据<br>StringBuffer ：适用于 【多线程】操作大量数据</p><hr><h3 id="五-反射"><a href="#五-反射" class="headerlink" title="五. 反射"></a>五. 反射</h3><p>反射 ： 是把java类中各个成分 映射成一个个java对象</p><ol><li>获取class对象三种方式 </li></ol><ul><li>object.getClass()    // 通过【对象实例】获取class</li><li>Object.class;        // 通过【类的静态class属性】 获取class </li><li>Class.forName(String className) // 通过 【class名】获取 class</li></ul><ol start="2"><li>运行期间，一个类只能有一个Class对象产生</li><li>反射的应用场景  </li></ol><ul><li>JDBC 连接数据库时，反射加载 【驱动程序】</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forNmae(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">// 加载驱动程序</span></span><br></pre></td></tr></table></figure><ul><li>Spring中 IOC容器根据配置文件信息–&gt; 获取类文件信息–&gt;反射创建bean实例 ，并反射调用Set方法设置属性</li></ul><ol start="4"><li><p>反射 优缺点</p><ul><li>优点： 在【运行时】，动态加载类，使代码更灵活</li><li>缺点 ： 反射是一系列解释性操作，通过JVM实现。效率低于Java代码</li></ul></li><li><p>反射定义</p></li></ol><p><strong>反射本质就是根据类class的字节码信息，将类的内部属性方法一一映射成Java对象</strong></p><hr><h3 id="六-接口interface和抽象类abstract-class的区别"><a href="#六-接口interface和抽象类abstract-class的区别" class="headerlink" title="六. 接口interface和抽象类abstract class的区别"></a>六. 接口interface和抽象类abstract class的区别</h3><ol><li>接口是对行为(方法)的抽象，是一种对行为的规范。抽象类是对类的抽象，用来捕捉子类的共同特征，提供设计模板。</li><li>一个类可实现多个接口(implements),一个类只能继承一个抽象类(extend)</li><li>类实现接口，则接口内抽象方法必须全部实现。<br> 类继承抽象类，则抽象类内抽象方法不一定全部实现</li><li>接口内实例变量默认final类型，方法默认public。而抽象类内没有限制。</li></ol><p><strong>什么时候使用抽象类和接口</strong></p><ul><li>如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用<strong>抽象类</strong>吧。</li><li>如果你想实现多重继承，那么你必须使用接口。由于<strong>Java不支持多继承</strong>，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。</li><li>如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。</li></ul><p><a href="https://www.cnblogs.com/dolphin0520/p/3811437.html">深入理解Java的接口和抽象类</a></p><hr><h3 id="七-重写override和重载overload的区别"><a href="#七-重写override和重载overload的区别" class="headerlink" title="七. 重写override和重载overload的区别"></a>七. 重写override和重载overload的区别</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/20171102-1.png" alt="java多态性的不同表现"></p><p><strong>重写 ：</strong> </p><ol><li><p><strong>发生在子类与父类中</strong></p></li><li><p>相同的方法名</p></li><li><p>相同的参数列表</p></li><li><p>返回值相同 或者 子类方法的返回值是父类方法返回值类型的子类</p></li><li><p>访问修饰符相同 或者 子类方法的修饰符范围 大于 父类</p></li><li><p>抛出的异常相同 或者 子类方法抛出的异常 小于父类。例如：父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。</p></li></ol><p>   【方法的外貌没有改变，方法提供的行为改变】</p><p>   【返回值】【抛出异常类型】 都是其父类方法的子类 </p><p>   【访问修饰符】 子类访问权限&gt;=父类访问权限 </p><p><strong>重载 ：</strong> </p><ol><li><strong>发生在同一个类中</strong></li><li>相同的方法名</li><li>参数列表不同</li><li>不看返回值，如果出现了只有返回值不同的“重载”，是错的。</li></ol><p>【参数】 【返回值】 【访问修饰符范围】 都发生改变 </p><p><a href="https://www.runoob.com/java/java-override-overload.html">Java 重写(Override)与重载(Overload)</a></p><hr><h3 id="八-异常体系"><a href="#八-异常体系" class="headerlink" title="八. 异常体系"></a>八. 异常体系</h3><p>所有异常继承公共祖先【throwable类】</p><p>异常分为两大类 ： Exception &amp; Error<br>(1) Error 是【程序无法处理】的错误，大部分是代码在JVM运行时出现问题。</p><p>​    如程序申请内存时，内存资源不足。抛出OOM<br>​    Error发生时，JVM一般会【终止】线程<br>(2) Exception是【程序可以处理】的错误</p><p>​    常见Exception：         </p><ul><li>ArithmeticException 算数异常</li><li>NullPointException 空指针异常</li><li>ArrayIndexOutOfBoundsException 下标越界</li></ul><hr><h3 id="九-深拷贝-amp-浅拷贝"><a href="#九-深拷贝-amp-浅拷贝" class="headerlink" title="九. 深拷贝 &amp; 浅拷贝"></a>九. 深拷贝 &amp; 浅拷贝</h3><p>浅拷贝 ： 对基本数据类型【值传递】，对引用数据类型进行 引用地址拷贝<br>深拷贝 ： 对基本数据类型【值传递】，对引用数据类型，则创建新对象，并复制其内容到新对象中。</p><hr><h3 id="十-泛型"><a href="#十-泛型" class="headerlink" title="十. 泛型"></a>十. 泛型</h3><p><strong>Java泛型设计原则：只要在编译时期没有出现警告，那么运行时期就不会出现ClassCastException异常</strong>.</p><p>泛型：<strong>把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</strong></p><ol><li><p>泛型的作用  </p><p>泛型是 【编译期】的【类型确认】机制。在【编译期】确认【容器】内元素为正确类型。防止ClassCastException</p></li><li><p>泛型擦除<br>编译器在【编译期】，确认类型正确后，擦除【容器的类型信息】。所以在【运行时】，容器不存在【类型信息】。<br>如List<String> 在JVM中运行时 仅为List，不存在<String>信息</String></String></p></li></ol><p><a href="https://segmentfault.com/a/1190000014120746">泛型就是这么简单</a></p><hr><h3 id="十一-final"><a href="#十一-final" class="headerlink" title="十一. final"></a>十一. final</h3><p> final 修饰 变量 、方法 、 类<br>           1. 修饰【变量】：<br>            变量 = 基础数据类型 ， 则变量值不可变<br>            变量 = 引用数据类型， 则引用对象不可变<br>           2. 修饰【类】<br>            类不能被继承<br>           3. 修饰【方法】<br>            方法不能被子类重写</p><hr><h3 id="十二-Java-三大特性-封装-继承-多态"><a href="#十二-Java-三大特性-封装-继承-多态" class="headerlink" title="十二. Java 三大特性: 封装 + 继承 + 多态"></a>十二. Java 三大特性: 封装 + 继承 + 多态</h3><ol><li>封装 </li></ol><p>对象属性【私有化】 ， 提供外界【访问】属性的方法</p><ol start="2"><li>继承</li></ol><ul><li>子类 拥有父类的属性和方法 ， 但是父类privete属性和方法 子类无法调用</li><li>子类可【扩展】，拥有自己的属性和方法</li><li>子类 重写 父类的方法 </li></ul><ol start="3"><li>多态</li></ol><p>对象引用 指向的实例类型未知<br>因此 ，【对象引用的方法调用 】，在【运行时】确定调用的是哪个方法</p><hr><h3 id="十三-Object-方法"><a href="#十三-Object-方法" class="headerlink" title="十三. Object 方法"></a>十三. Object 方法</h3><h5 id="equal-hashcode"><a href="#equal-hashcode" class="headerlink" title="equal hashcode"></a>equal hashcode</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; obj.getClass() == <span class="keyword">this</span>.getClass()) &#123;</span><br><span class="line">            Person person= (Person) obj;<span class="comment">// 强转类型</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> name.equals(person.getName())&amp;&amp;person.age==age;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h5><p>获得类文件对象</p><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5><p>深浅拷贝</p><h5 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h5><p>​    用于GC的垃圾回收<br>       1. 实例不可达，GC判断实例是否【重写】finalize方法，未重写则直接回收<br>       2. 否则，将实例加入F-Queue队列，由低优先级线程执行F-Queue中实例的finalize方法<br>       3. finalize方法执行完毕后，【再次】判断实例对象是否可达。可达则复活，否则回收</p><hr><h3 id="十四-静态内部类-和内部类"><a href="#十四-静态内部类-和内部类" class="headerlink" title="十四. 静态内部类 和内部类"></a>十四. 静态内部类 和内部类</h3><ol><li> 静态内部类可以有静态成员(方法，属性)，而非静态内部类则不能有静态成员</li><li>静态内部类 访问 外部类的【静态】静态成员,<br>  而非静态内部类 访问 外部类的【所有成员】(方法，属性)</li><li>静态内部类【实例创建】 不依赖于外部类的实例，通过类名直接调用构造器<br>非静态内部类【实例创建】，依赖于外部类的实例，通过外部实例调用构造器</li></ol><hr><h3 id="十五-线程池只是销毁了超出核心线程数目的空闲线程而已-没有标记表明线程是否核心"><a href="#十五-线程池只是销毁了超出核心线程数目的空闲线程而已-没有标记表明线程是否核心" class="headerlink" title="十五. 线程池只是销毁了超出核心线程数目的空闲线程而已,没有标记表明线程是否核心"></a>十五. 线程池只是销毁了超出核心线程数目的空闲线程而已,没有标记表明线程是否核心</h3><hr><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><h5 id="创建模式：-工厂模式-、抽象工厂模式、单例模式"><a href="#创建模式：-工厂模式-、抽象工厂模式、单例模式" class="headerlink" title="创建模式： 工厂模式 、抽象工厂模式、单例模式"></a>创建模式： 工厂模式 、抽象工厂模式、单例模式</h5><ol><li><strong>工厂模式</strong></li></ol><p>意义： 为对象的创建提供接口，隔离具体的创建过程<br>{<br>    1. 扩展性 ： 构造器修改<br>        2. 降低代码量： 创建对象的过程有一定代码量，且在多处使用。<br>}</p><p>简单工厂模式<br>    工厂类(唯一)、抽象产品类(唯一)、具体产品类<br>    每当添加具体产品，则需要在唯一工厂类中添加相应业务逻辑，这不符合开放封闭原则</p><p>适用于： 创建具体产品较少场景</p><p>工厂方法模式<br>    抽象工厂类、具体工厂类、抽象产品、具体产品<br>    抽象工厂类提供创建接口，而其子类(具体工厂)确定要创建的对象<br>    每添加一个具体产品，对应添加一个具体工厂类</p><p>抽象工厂模式<br>    抽象工厂(一组) 、具体工厂、抽象产品、具体产品</p><ol start="2"><li><strong>单例模式</strong></li></ol><p>饿汉式 + 懒汉式</p><ol start="3"><li><strong>结构模式：</strong></li></ol><h5 id="装饰器模式、代理模式"><a href="#装饰器模式、代理模式" class="headerlink" title="装饰器模式、代理模式"></a><a href="https://www.jianshu.com/p/c06a686dae39">装饰器模式、代理模式</a></h5><p>两者内部都持有 原对象属性</p><p>代理：<br>    注重 如何调用源对象某一个功能，<br>        不需要兼顾源对象的其他功能</p><p>装饰：<br>    注重 原对象【功能扩展】。<br>    装饰类实例需要【兼顾】原对象的其他方法。因为扩展后的对象仍是是对象本身。</p><hr></font>]]></content>
    
    
    <summary type="html">&lt;font size=&quot;3&quot;&gt;

&lt;h3 id=&quot;一-Java-方法中-仅存在【值传递】&quot;&gt;&lt;a href=&quot;#一-Java-方法中-仅存在【值传递】&quot; class=&quot;headerlink&quot; title=&quot;一.Java 方法中 仅存在【值传递】&quot;&gt;&lt;/a&gt;一.Java 方法中 仅存在【值传递】&lt;/h3&gt;&lt;p&gt;方法得到所有【参数值的拷贝】，因此，方法不能修改一个基本数据，【对象引用作为参数】，则该参数和对象引用指向同一个对象。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;二-和-equals-区别&quot;&gt;&lt;a href=&quot;#二-和-equals-区别&quot; class=&quot;headerlink&quot; title=&quot;二. == 和 equals 区别&quot;&gt;&lt;/a&gt;二. == 和 equals 区别&lt;/h3&gt;&lt;h5 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1. ==&quot;&gt;&lt;/a&gt;1. ==&lt;/h5&gt;&lt;p&gt; == 判断两个对象的【&lt;strong&gt;地址&lt;/strong&gt;】是否相同， 即是否【&lt;strong&gt;同一个对象&lt;/strong&gt;】&lt;/p&gt;
&lt;h5 id=&quot;2-equals&quot;&gt;&lt;a href=&quot;#2-equals&quot; class=&quot;headerlink&quot; title=&quot;2. equals&quot;&gt;&lt;/a&gt;2. equals&lt;/h5&gt;&lt;p&gt;equals 分两种情况&lt;br&gt;(1) equals 【&lt;strong&gt;没有被类重写&lt;/strong&gt;】，则equals方法等价==&lt;br&gt;(2) equals 【&lt;strong&gt;被类重写&lt;/strong&gt;】， 则根据重写方法 判断两个对象内容是否相等  &lt;/p&gt;&lt;/font&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2021/01/18/SQL%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2021/01/18/SQL%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-18T10:26:41.000Z</published>
    <updated>2021-02-21T10:50:35.717Z</updated>
    
    <content type="html"><![CDATA[<font size="3"><h3 id="一-mysql存储引擎-MyISAM-和-InnoDB的区别"><a href="#一-mysql存储引擎-MyISAM-和-InnoDB的区别" class="headerlink" title="一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}"></a>一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}</h3><ol><li><p>【是否支持行锁】<br>  MyISAM 仅支持表锁， InnoDB支持表锁和行锁</p></li><li><p>【是否支持事务】<br>  MyISAM不支持事务，且不具备【崩溃恢复能力】。<br>  InnoDB 支持事务，提供回滚和崩溃恢复。</p></li><li><p>【是否支持外键】<br>  仅InnoDB支持外键 </p></li><li><p>【是否支持MVCC】<br>  仅InnoDB支持MVCC</p></li><li><p>【应用场景不同】<br>  MyISAM 适用 【Select】频繁，并发少<br>  InnoDB 适用 【Insert Delete Update】频繁，高并发</p><p>  因为<br>  (1) MyISAM 仅缓存索引块，而InnoDB缓存 {索引+数据}<br>  (2) InnoDB 回表需要映射块，而MyISAM 直接映射数据地址<br>  (3) InnoDB 需要维护MVCC机制</p></li></ol><pre><code>    6. MyISAM索引 和 InnoDB 索引 区别    InnoDB 【主键索引】 叶子节点 = &#123;主键ID ， data数据&#125;    因此 InnoDB根据【主键】索引查询，不需要二次寻址，效率更高    InnoDB 【二级索引】 叶子节点 = &#123;key, 主键ID&#125;    如果过实现索引覆盖，即 要查询列值 全部命中索引，则直接返回 非主键索引的内容    如果为实现索引覆盖，则需要根据【主键ID】做回表    【存储结构不同】    InnoDB 存储结构 = 索引和数据 集中存储    MyISAM存储结构 = &#123;表定义，MYD数据文件，MYI索引文件&#125;6. 不带WHERE条件时，【count(*)效率不同 】    MyISAM 自带计数器存储保存【总行数】，可直接返回结果    InnoDB 扫描全表计算总行数    </code></pre><a id="more"></a><h3 id="二-事务特性"><a href="#二-事务特性" class="headerlink" title="二. 事务特性"></a>二. <a href="https://www.zhihu.com/search?type=content&q=%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4%E6%80%A7">事务特性</a></h3><p>事务符合 ACID原则的一组操作 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. Atomicity</span><br><span class="line">    事务是不可分割的最小单元，事务内所有操作要么全部执行成功，要么全部失败回滚</span><br><span class="line"></span><br><span class="line">2. Isolation</span><br><span class="line">    事务所作出的修改，在提交前，对于其他事务而言不可见</span><br><span class="line">    </span><br><span class="line">3. Durability</span><br><span class="line">    事务一旦提交，所作出的修改是永久的。</span><br><span class="line">    </span><br><span class="line">4. Consistency</span><br><span class="line">    系统从一个正确状态--&gt;另一个正确状态</span><br><span class="line">    AID是数据库的特征，通过AID手段保证C这个目的</span><br><span class="line">    </span><br><span class="line">   【数据库】约束列值 不能小于0，则事务执行失败</span><br><span class="line">   【应用层】约束 余额数据不能小于0，则应用层通过事务回滚保证约束</span><br><span class="line">   </span><br><span class="line">   没有约束，则事务执行成功，且保持了一致性。因为没有破坏约束。</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="三-并发事务带来的问题-1630-1700"><a href="#三-并发事务带来的问题-1630-1700" class="headerlink" title="三. 并发事务带来的问题 1630 - 1700"></a>三. 并发事务带来的问题 1630 - 1700</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 脏读 </span><br><span class="line">    事务A 修改数据，但并未commit。而事务B读取该数据。 </span><br><span class="line">2. 丢失修改</span><br><span class="line">    事务A 、B都读取同一个数据。事务A 、B先后修改数据，则 第一次修改操作丢失。</span><br><span class="line">3. 不可重复读</span><br><span class="line">    事务A 共读取两次数据，而在这两次读取之间。事务B修改了数据。则事务A两次读取到的数据不同。</span><br><span class="line">4. 幻读 </span><br><span class="line">    事务A 读取【n行数据】,事务B在n行数据间添加数据。则事务A第二次读取时，读取到n+1行。</span><br></pre></td></tr></table></figure><h4 id="！！四-事务隔离级别-1801"><a href="#！！四-事务隔离级别-1801" class="headerlink" title="！！四.  事务隔离级别 1801"></a>！！四.  事务隔离级别 1801</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. Read-Uncommitted 读取未提交</span><br><span class="line">    无论事务是否提交，直接【读取主记录】 </span><br><span class="line">    即并发问题 &#x3D;【脏读】+【不可重复读】+【幻影读】</span><br><span class="line">2. Read-committed 读取已提交</span><br><span class="line">    【读取最新版本的快照】，快照是事务提交后产生，但可能存在同一事务两次读取的快照不同。</span><br><span class="line">    即并发问题 &#x3D; 【不可重复读】+【幻影读】</span><br><span class="line">3. Repeatable 可重复读</span><br><span class="line">    【读取指定版本快照】，则事务多次读取某数据行的结果一致，但读取到的数据可能并非最新数据 。</span><br><span class="line">    即并发问题 &#x3D; 【幻影读】</span><br><span class="line">4. Serializable 可串行化 </span><br><span class="line">    上表锁，读写相互阻塞。效率低下。</span><br><span class="line">    无并发问题 </span><br><span class="line">    </span><br><span class="line">InnoDB引擎默认实现 可重复读隔离级别 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="！！五-MVCC-1655"><a href="#！！五-MVCC-1655" class="headerlink" title="！！五. MVCC 1655"></a>！！五. MVCC 1655</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">【目的】 ： </span><br><span class="line">    MVCC是行锁的变种，它想要尽可能地避免加锁操作，实现【非阻塞】读。从而提高处理并发事务的性能</span><br><span class="line"></span><br><span class="line">【MVCC 实现的隔离级别】</span><br><span class="line">    MVCC仅 Read Committed &amp; REPEATABLE READ 两种隔离级别</span><br><span class="line">    READ UNCOMMITTED 总是【读取最新】数据行 ，与MVCC的版本快照机制不符</span><br><span class="line">    SERIALIZABLE 则 对读取的【数据行】都加锁 ，与MVCC 尽可能避免加锁的原则不符</span><br><span class="line">    </span><br><span class="line">【undolog】 记录数据行的某个历史版本，undolog以链表形式存在</span><br><span class="line"></span><br><span class="line">RC 是读取 最新版本的 undolog</span><br><span class="line">RR 是读取 某一指定老版本的undolog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="！！-六-索引"><a href="#！！-六-索引" class="headerlink" title="！！ 六. 索引"></a>！！ 六. 索引</h4><p>索引的存储结构 = {<br>    1. Hash表<br>    2. B+树<br>}</p><h5 id="！6-1-hash索引"><a href="#！6-1-hash索引" class="headerlink" title="！6.1 hash索引"></a>！6.1 hash索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) hash 索引的实现 </span><br><span class="line">    底层数据结构 &#x3D; hash表</span><br><span class="line">    通过hash值定位数据行，产生碰撞则采用拉链法解决。</span><br><span class="line">(2) hash索引的缺点 </span><br><span class="line">    1. 适用于等值查询。</span><br><span class="line">       但hash索引无法排序，因此不适用于范围查询，不支持最左匹配原则。</span><br><span class="line">    2. 大量重复的键值，减低效率、</span><br></pre></td></tr></table></figure><h5 id="6-2-磁盘预读取"><a href="#6-2-磁盘预读取" class="headerlink" title="6.2 磁盘预读取"></a>6.2 磁盘预读取</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">磁盘读取以【磁盘块】为基本单位。</span><br><span class="line">【磁盘预读取】：每次读取多个【物理连续】的磁盘块</span><br><span class="line">B树利用磁盘预读取特性。在建立节点时，申请【物理连续】的一页空间。</span><br><span class="line">一页空间 &#x3D; 磁盘预读取的 多个磁盘块总和</span><br><span class="line">从而 【实现一次磁盘IO读取一个节点】，减少磁盘IO次数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="！！6-3-为什么使用B-树，而不是-B树"><a href="#！！6-3-为什么使用B-树，而不是-B树" class="headerlink" title="！！6.3 为什么使用B+树，而不是 B树 "></a>！！6.3 <a href="https://blog.csdn.net/qq_21993785/article/details/80580679">为什么使用B+树，而不是 B树 </a></h5><pre><code>1.  Mysql根据【磁盘IO次数】衡量查询效率，而【B+树磁盘IO次数更少】    因为 B+树中【 非叶节点 = &#123; 指针+key &#125; 】    而B树中 【非叶节点 = &#123; 指针+ key + data数据 &#125;】,    每个节点(即每一页) 存储空间有限，B树节点存储的key较少，出度较小    因此B树的节点较多(key总量固定)    导致B树深度较大，磁盘IO次数多。2.  B+树叶子节点通过指针连接，便于【区间访问】</code></pre><h5 id="！！6-4-为什么使用-B-树，而不是红黑树"><a href="#！！6-4-为什么使用-B-树，而不是红黑树" class="headerlink" title="！！6.4 为什么使用 B+树，而不是红黑树"></a>！！6.4 为什么使用 B+树，而不是红黑树</h5><pre><code>【B+树磁盘IO次数更少】 1.  红黑树的深度往往较大，而磁盘IO次数是和树高度成正比。2.      B树利用磁盘预读取特性。在建立节点时，申请【物理连续】的一页空间。    一页空间 = 磁盘预读取的 多个磁盘块总和    从而 【实现一次磁盘IO读取一个节点】，减少磁盘IO次数    红黑树上逻辑较近的节点，其物理距离可能较远。无法利用磁盘预读特性</code></pre><h2 id="​"><a href="#​" class="headerlink" title="​        "></a>​        </h2><h5 id="6-5-聚簇索引和-非聚簇索引-主键索引和二级索引"><a href="#6-5-聚簇索引和-非聚簇索引-主键索引和二级索引" class="headerlink" title="!! 6.5 聚簇索引和 非聚簇索引  主键索引和二级索引"></a>!! 6.5 聚簇索引和 非聚簇索引  主键索引和二级索引</h5><h5 id="聚簇索引和非聚簇索引-【区别】"><a href="#聚簇索引和非聚簇索引-【区别】" class="headerlink" title="聚簇索引和非聚簇索引 【区别】"></a>聚簇索引和非聚簇索引 【区别】</h5><h6 id="聚簇索引-将索引结构和数据放在一起的索引"><a href="#聚簇索引-将索引结构和数据放在一起的索引" class="headerlink" title="聚簇索引 = 将索引结构和数据放在一起的索引"></a>聚簇索引 = 将索引结构和数据放在一起的索引</h6><pre><code>【优点】：查询效率高，定位到索引树叶节点，就直接找到数据【缺点】： 索引列更新时，维护代价大【主键索引】属于【聚簇索引】</code></pre><hr><h6 id="非聚簇索引-索引结构和数据分离的索引"><a href="#非聚簇索引-索引结构和数据分离的索引" class="headerlink" title="非聚簇索引 = 索引结构和数据分离的索引"></a>非聚簇索引 = 索引结构和数据分离的索引</h6><pre><code>【优点】： 更新代价小 【缺点】： 需要二次查询，        例如 二级索引需要在主键索引中再次回表查询【二级索引】属于【非聚簇索引】</code></pre><hr><h6 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h6><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主键索引 叶子节点 &#x3D; &#123;key,其他data数据&#125; </span><br><span class="line"></span><br><span class="line">InnoDB中如果没有指定表的主键，则检测表是否有唯一索引</span><br><span class="line">如果有，则该字段默认 &#x3D; 主键</span><br><span class="line">如果没有， 则InnoDB自动创建6B的自增主键</span><br></pre></td></tr></table></figure></code></pre><hr><h6 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h6><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">二级索引 叶子节点 &#x3D; &#123;key，主键ID&#125;</span><br><span class="line"></span><br><span class="line">二级索引查询【过程】</span><br><span class="line">    1. 【非聚集索引】中查询到主键ID</span><br><span class="line">    2. 【回表】 ： 根据主键ID在  【聚集索引】中查询整行记录</span><br></pre></td></tr></table></figure></code></pre><h2 id="​-1"><a href="#​-1" class="headerlink" title="​        "></a>​        </h2><h5 id="6-6-最左前缀"><a href="#6-6-最左前缀" class="headerlink" title="!! 6.6 最左前缀"></a>!! 6.6 最左前缀</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">联合索引 是由多个列组成。如(name,age)</span><br><span class="line">查询时，列值【从左到右】匹配索引。</span><br><span class="line">遇到【范围查询】(&gt; &lt; between like左匹配)后 ，不可进一步匹配。</span><br></pre></td></tr></table></figure><p>​    </p><h5 id="6-7-覆盖索引"><a href="#6-7-覆盖索引" class="headerlink" title="6.7 覆盖索引"></a>6.7 覆盖索引</h5><pre><code>在非聚集索引的叶子节点中 所含的列值是要查询的列值，不用进行回表。直接返回即可</code></pre><h5 id="6-8-为什么不对每个列创建索引"><a href="#6-8-为什么不对每个列创建索引" class="headerlink" title="6.8 为什么不对每个列创建索引"></a>6.8 为什么不对每个列创建索引</h5><pre><code>1. 数据CRUD时， 索引需要动态维护2. 索引占据物理空间，尤其聚簇索引</code></pre><hr><h4 id="七-数据库三大范式"><a href="#七-数据库三大范式" class="headerlink" title="七.  数据库三大范式"></a>七.  数据库三大范式</h4><p>第一范式： 每个列不可分离<br>第二范式： 非主键<strong>完全依赖</strong>主键<br>第三范式： 非主键<strong>只依赖</strong>主键，不依赖非主键</p><h4 id="八-索引应用场景"><a href="#八-索引应用场景" class="headerlink" title="八. 索引应用场景"></a>八. 索引应用场景</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE add index(字段名) 创建索引</span><br><span class="line">    1. WHERE </span><br><span class="line">    WHERE 筛选字段进行查询时，</span><br><span class="line">    如果 该字段建立索引，则查询效率更高</span><br><span class="line">    </span><br><span class="line">    2. ORDER BY  </span><br><span class="line">   </span><br><span class="line">    使用order by将查询结果按照某个字段排序时，</span><br><span class="line">    </span><br><span class="line">    如果该字段没有建立索引，</span><br><span class="line">    查询出的所有数据使用外部排序，涉及磁盘IO，则效率底下</span><br><span class="line">    </span><br><span class="line">    ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br><span class="line">    由于索引有序，所以按照索引顺序逐条读出数据</span><br><span class="line">    </span><br><span class="line">    3. 索引覆盖</span><br><span class="line">    【查询的字段】都建立过索引，</span><br><span class="line">    引擎会直接在索引表中查询而【不访问原始数据】</span><br><span class="line">    尽可能在select后只写必要的查询字段，以增加索引覆盖的几率</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="九-创建索引的原则"><a href="#九-创建索引的原则" class="headerlink" title="九. 创建索引的原则"></a>九. 创建索引的原则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 字段 基数大</span><br><span class="line">2. 字段 重复值较少 </span><br><span class="line">3. 字段 频繁作为【查询条件】</span><br><span class="line">4. 字段 更新少 </span><br><span class="line">5. 最左匹配原则 ：  </span><br><span class="line">    MySQL对 索引中的列值 从左到右匹配，直到遇到范围查询就停止</span><br><span class="line">6. 尽量扩展索引，而非创建新索引</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十-大表优化"><a href="#十-大表优化" class="headerlink" title="十.  大表优化"></a>十.  大表优化</h4><h5 id="explain-查看执行计划-，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等"><a href="#explain-查看执行计划-，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等" class="headerlink" title="explain 查看执行计划 ，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等"></a>explain 查看执行计划 ，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等</h5><h5 id="1-大表优化"><a href="#1-大表优化" class="headerlink" title="1. 大表优化"></a>1. 大表优化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. 限定数据范围 </span><br><span class="line">    查询语句 通过查询条件限定数据范围</span><br><span class="line">2. 数据库主从同步，读写分离</span><br><span class="line">    多个服务器上部署mysql，</span><br><span class="line">    一台服务器为【主库】，负责【写数据】</span><br><span class="line">    其他服务器为【从库】，负责【读数据】</span><br><span class="line">    </span><br><span class="line">    一. 主从同步实现</span><br><span class="line">    【主库A】数据库事件存储在 日志系统A中，传输日志文件</span><br><span class="line">    【从库】 接收文件并写入本地日志系统，然后将【数据库事件】在从库MySQL中完成</span><br><span class="line"></span><br><span class="line">3. 垂直分区</span><br><span class="line">    </span><br><span class="line">    优点：一行记录 的数据量变少，在查询时IO次数减少</span><br><span class="line">    </span><br><span class="line">    缺点：</span><br><span class="line">        (1) 主键冗余，</span><br><span class="line">        (2) 引起join操作</span><br><span class="line">4. 水平分区</span><br><span class="line">    将 【行数据】分组存储到不同【库 ||表】， 【最好分库】</span><br><span class="line">    </span><br><span class="line">    【缺点】：</span><br><span class="line">        (1) 查询时，通常需要 【多个表名】 + 【UNION操作】</span><br><span class="line">        (2) 跨库 JOIN 性能很差 , </span><br><span class="line">        (3) 【跨库】的【事务支持】，逻辑复杂度和性能代价 都很大</span><br><span class="line"></span><br><span class="line">            </span><br></pre></td></tr></table></figure><hr><h5 id="2-分表-分库后的问题"><a href="#2-分表-分库后的问题" class="headerlink" title="2. 分表 分库后的问题"></a>2. 分表 分库后的问题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1). 【跨节点】的 count，order by ， group by 等【聚合函数】逻辑复杂</span><br><span class="line">(2). 【跨库】的join 性能代价大</span><br><span class="line">(3). 【主键ID问题】 ：MySQL原先主键自增机制，跨库情况下，存在主键重复的问题</span><br><span class="line">   1)  若采用 UUID作为主键， 则UUID主键占用内存过大</span><br><span class="line">   2)  多个数据库采用 跨步自增</span><br><span class="line">   3) ...</span><br><span class="line">(4) 【事务支持】</span><br></pre></td></tr></table></figure><hr><h5 id="3-主从分布，读写分离"><a href="#3-主从分布，读写分离" class="headerlink" title="3. 主从分布，读写分离"></a>3. 主从分布，读写分离</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用 &#x3D; &#123; 负载均衡 + 数据备份 + 高可用&#125;</span><br><span class="line">流程 &#x3D;&#123;</span><br><span class="line">    1. 主库的【数据库事件】记录在二进制的binlog，binlog传输给从库</span><br><span class="line">    2. 从库读取binlog内容到本地日志系统的relaylog</span><br><span class="line">    3. 从库 执行relay log中的SQL语句，实现主从同步</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十一-SQL生命周期"><a href="#十一-SQL生命周期" class="headerlink" title="十一. SQL生命周期"></a>十一. SQL生命周期</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 应用服务器与数据库服务器建立一个连接，应用服务器发送SQL请求</span><br><span class="line"></span><br><span class="line">2. 数据库进程拿到【sql请求】，通过【连接器】验证SQL语句是否具有【权限】</span><br><span class="line"></span><br><span class="line">3. 【分析器】进行 词法分析和语法分析。 </span><br><span class="line">    词法分析 提取SQL语句关键元素 ： SELECT 、 表名 、 查询条件等</span><br><span class="line">    语法分析 判断SQL语句是否正确 ：判断关键词是否正确</span><br><span class="line"></span><br><span class="line">4. 【优化器】生成SQL【执行计划】</span><br><span class="line">    </span><br><span class="line">5. 【执行器】按照执行计划， 将数据读取到内存并进行逻辑处理</span><br><span class="line"></span><br><span class="line">6. 通过连接，将数据传输给应用服务器 </span><br><span class="line"></span><br><span class="line">7. 断开连接</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十二-MySQL锁"><a href="#十二-MySQL锁" class="headerlink" title="十二. MySQL锁"></a>十二. MySQL锁</h4><h5 id="1-表锁"><a href="#1-表锁" class="headerlink" title="1. 表锁"></a>1. 表锁</h5><h5 id="2-行锁"><a href="#2-行锁" class="headerlink" title="2. 行锁"></a>2. 行锁</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Record Lock :  单个数据行的锁</span><br><span class="line">2. Gap Lock ： 锁定范围，不包括记录本身</span><br><span class="line">3. Next-key lock : record + gap 结合，锁定一个范围，并且锁定记本身</span><br></pre></td></tr></table></figure><h4 id="十三-count-count1-count-col-区别-1050-1110"><a href="#十三-count-count1-count-col-区别-1050-1110" class="headerlink" title="十三. count* count1 count(col)区别  1050 - 1110"></a>十三. count* count1 count(col)区别  1050 - 1110</h4><h5 id="count-expression-聚合函数"><a href="#count-expression-聚合函数" class="headerlink" title="count(expression) = 聚合函数"></a>count(expression) = 聚合函数</h5><pre><code>逐行检测expression是否=null, expression！=null则计数器加1</code></pre><h5 id="count-1-和count-作用相同"><a href="#count-1-和count-作用相同" class="headerlink" title="count(1)和count(*)作用相同:"></a>count(1)和count(*)作用相同:</h5><pre><code>count(1) 每行expression=1 ，NOT NULL，count(1)作用=统计总行数count(*) 并非 统计每行所有列值是否为null，列值全为null的数据行不存在.因此 count(*) = 统计总行数</code></pre><h5 id="count-1-count-经过优化器指定的执行计划相同-，两者效率相同"><a href="#count-1-count-经过优化器指定的执行计划相同-，两者效率相同" class="headerlink" title="count(1) count(*) 经过优化器指定的执行计划相同 ，两者效率相同"></a>count(1) count(*) 经过优化器指定的执行计划相同 ，两者效率相同</h5><pre><code>在没有二级索引情况下， 通过主键索引统计总行数如果有二级索引， 则优先选择 【最窄】二级索引统计总行数 主键索引 叶节点 = &#123;主键ID, 其他所有列值&#125;二级索引 叶节点 = &#123;key+主键ID&#125; </code></pre><h5 id="count-col-逐行检测col是否-null"><a href="#count-col-逐行检测col是否-null" class="headerlink" title="count(col) 逐行检测col是否=null"></a>count(col) 逐行检测col是否=null</h5><pre><code>因此 count(col)统计 非null列的总行数对col建立非聚集索引，可以优化查询效率</code></pre><h4 id="十四-explain-返回的结果"><a href="#十四-explain-返回的结果" class="headerlink" title="十四. explain 返回的结果"></a>十四. <a href="https://blog.csdn.net/zhuxineli/article/details/14455029">explain 返回的结果</a></h4><h5 id="type-【引擎查找表】的方式"><a href="#type-【引擎查找表】的方式" class="headerlink" title="type 【引擎查找表】的方式"></a>type 【引擎查找表】的方式</h5><pre><code>all,index,range,ref,eq_ref，const从左到右，它们的效率依次是增强的all     全表扫描index   全索引扫描range   范围扫描 ：     【索引】+【范围查询】ref     小范围扫描：    【可能重复】的【普通索引】+【表联结情况】eq_ref  单条数据扫描 ： 【主键 || 唯一】索引+【表联结情况】const   单条数据扫描 ： 【主键 || 唯一】索引 </code></pre><p>​    </p><h5 id="key"><a href="#key" class="headerlink" title="key"></a>key</h5><pre><code>MySQL 使用的索引</code></pre><h5 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h5><pre><code>MYSQL 执行查询的行数，数值越大性能越差 </code></pre><h5 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h5><pre><code>Using index 使用覆盖索引Using Where 使用WHERE过滤Using temporary ： 使用临时表 ，建议优化Using filesort ： 对查询结果【外部排序】，而非根据索引有序读取。建议优化 </code></pre><hr><h4 id="十五-SQL优化-1020"><a href="#十五-SQL优化-1020" class="headerlink" title="十五. SQL优化 1020"></a>十五. SQL优化 1020</h4><h4 id="一-WHERE的优化"><a href="#一-WHERE的优化" class="headerlink" title="(一). WHERE的优化"></a>(一). WHERE的优化</h4><h5 id="1-全表扫描"><a href="#1-全表扫描" class="headerlink" title="1.全表扫描"></a>1.全表扫描</h5><p>WHERE,ORDER BY涉及的列上 建立索引 </p><h5 id="2-WHERE条件中避免使用的判断"><a href="#2-WHERE条件中避免使用的判断" class="headerlink" title="2.WHERE条件中避免使用的判断"></a>2.WHERE条件中避免使用的判断</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    is null ,</span><br><span class="line">    !&#x3D;  ,</span><br><span class="line">    OR  ,</span><br><span class="line">    in  ,   &#x2F;&#x2F;  慎重使用，非连续 in集合会放弃索引，全表扫描</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些判断，会使得引擎【放弃索引】，进行【全表扫描】</p><h5 id="3-WHERE条件中-避免【运行时解析】的变量"><a href="#3-WHERE条件中-避免【运行时解析】的变量" class="headerlink" title="3. WHERE条件中 避免【运行时解析】的变量"></a>3. WHERE条件中 避免【运行时解析】的变量</h5><p>原因： 执行计划在【<strong>编译期</strong>】制定，【<strong>运行时解析</strong>】的变量不能作为索引输入项<br>因此采用全表扫描  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    1. 参数 </span><br><span class="line">         WHERE num &#x3D; @num</span><br><span class="line">    2. WHERE条件左侧 避免 函数调用+算术计算 </span><br><span class="line">        WHERE num &#x3D; 100+2</span><br><span class="line">        WHERE substring(num,1,3) &#x3D; &#39;abc&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="十六-超大分页"><a href="#十六-超大分页" class="headerlink" title="十六. 超大分页"></a>十六. 超大分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">超大分页 &#x3D; Limit 10000，10 </span><br><span class="line">MySQL并非跳过&#x3D; offset行，而是取offset+N行，然后返回放弃前offset行，返回N行</span><br><span class="line">那当offset特别大的时候，效率低下</span><br><span class="line"></span><br><span class="line">【优化方法】： 先快速定位 主键，然后再关联</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="十七-SQL优化"><a href="#十七-SQL优化" class="headerlink" title="十七. SQL优化"></a>十七. SQL优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 慢查询日志 ，查看开销大的SQL</span><br><span class="line">    set GLOBAL slow_query_log &#x3D; on</span><br><span class="line">2.  开销大原因 &#x3D; &#123;</span><br><span class="line">    1.  </span><br><span class="line">        【原因一】：SQL语句 是否加载额外的数据 </span><br><span class="line">        【例子】： 未使用WHERE范围限制、 Limit分页过大、 使用&#123;is NULL，!&#x3D; ，OR&#125; 触发全表扫描</span><br><span class="line">        【优化】 ： 修改SQL语句</span><br><span class="line">        </span><br><span class="line">    2. </span><br><span class="line">        【原因二】： 未命中索引、使用的索引有待优化</span><br><span class="line">        【例子】： SELECT A,B,C FROM t WHERE A&#x3D;? AND B&#x3D; ? </span><br><span class="line">                    或者 ORDER BY 、ON的列上是否建立索引 </span><br><span class="line">        【优化】：explain查询执行计划，创建||选择其他索引，使得SQL语句尽可能地命中索引</span><br><span class="line">        </span><br><span class="line">    3. </span><br><span class="line">        【原因三】： SQL语句无法优化，【大表情况】</span><br><span class="line">            (1) 分库分表</span><br><span class="line">            (2) 主从同步，读写分离</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></font>]]></content>
    
    
    <summary type="html">&lt;font size=&quot;3&quot;&gt;

&lt;h3 id=&quot;一-mysql存储引擎-MyISAM-和-InnoDB的区别&quot;&gt;&lt;a href=&quot;#一-mysql存储引擎-MyISAM-和-InnoDB的区别&quot; class=&quot;headerlink&quot; title=&quot;一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}&quot;&gt;&lt;/a&gt;一. mysql存储引擎 = { MyISAM 和 InnoDB的区别}&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【是否支持行锁】&lt;br&gt;  MyISAM 仅支持表锁， InnoDB支持表锁和行锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【是否支持事务】&lt;br&gt;  MyISAM不支持事务，且不具备【崩溃恢复能力】。&lt;br&gt;  InnoDB 支持事务，提供回滚和崩溃恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【是否支持外键】&lt;br&gt;  仅InnoDB支持外键 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【是否支持MVCC】&lt;br&gt;  仅InnoDB支持MVCC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【应用场景不同】&lt;br&gt;  MyISAM 适用 【Select】频繁，并发少&lt;br&gt;  InnoDB 适用 【Insert Delete Update】频繁，高并发&lt;/p&gt;
&lt;p&gt;  因为&lt;br&gt;  (1) MyISAM 仅缓存索引块，而InnoDB缓存 {索引+数据}&lt;br&gt;  (2) InnoDB 回表需要映射块，而MyISAM 直接映射数据地址&lt;br&gt;  (3) InnoDB 需要维护MVCC机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    6. MyISAM索引 和 InnoDB 索引 区别

    InnoDB 【主键索引】 叶子节点 = &amp;#123;主键ID ， data数据&amp;#125;
    因此 InnoDB根据【主键】索引查询，不需要二次寻址，效率更高

    InnoDB 【二级索引】 叶子节点 = &amp;#123;key, 主键ID&amp;#125;
    如果过实现索引覆盖，即 要查询列值 全部命中索引，则直接返回 非主键索引的内容
    如果为实现索引覆盖，则需要根据【主键ID】做回表

    【存储结构不同】
    InnoDB 存储结构 = 索引和数据 集中存储
    MyISAM存储结构 = &amp;#123;表定义，MYD数据文件，MYI索引文件&amp;#125;

6. 不带WHERE条件时，【count(*)效率不同 】
    MyISAM 自带计数器存储保存【总行数】，可直接返回结果
    InnoDB 扫描全表计算总行数    &lt;/code&gt;&lt;/pre&gt;&lt;/font&gt;</summary>
    
    
    
    
    <category term="基础编程知识学习" scheme="https://github.com/lzhello/lzhello.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>firstblog</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2020/11/12/firstblog/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2020/11/12/firstblog/</id>
    <published>2020-11-12T11:43:38.000Z</published>
    <updated>2021-02-18T16:18:43.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的博客文章"><a href="#我的博客文章" class="headerlink" title="我的博客文章"></a>我的博客文章</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><h3 id="这是一个三级标记（-后面一定要加空格）"><a href="#这是一个三级标记（-后面一定要加空格）" class="headerlink" title="这是一个三级标记（#后面一定要加空格）"></a>这是一个三级标记（#后面一定要加空格）</h3><p><em>这一句话会是斜体</em></p><p><strong>这一句话会被加粗</strong></p><p><strong><em>这一句话会被斜体加粗</em></strong></p><p><del>这一句话会有删除线</del></p><blockquote><p>这里是引用的内容</p><blockquote><p>还能接着引用</p><blockquote><p>还能再往里引用</p></blockquote></blockquote></blockquote><a id="more"></a><p>接下来是分割线</p><hr><hr><h3 id="这里是超链接"><a href="#这里是超链接" class="headerlink" title="这里是超链接"></a>这里是超链接</h3><p><a href="http://baidu.com/">百度</a></p><h3 id="这里是无序列表"><a href="#这里是无序列表" class="headerlink" title="这里是无序列表"></a>这里是无序列表</h3><ul><li>列表1</li></ul><ul><li>列表2</li></ul><ul><li>列表3<ul><li>列表嵌套（前加三个空格）</li></ul></li></ul><h3 id="这里是有序列表"><a href="#这里是有序列表" class="headerlink" title="这里是有序列表"></a>这里是有序列表</h3><ol><li>列表1</li><li>列表2</li><li>列表3</li></ol><h3 id="这里是表格"><a href="#这里是表格" class="headerlink" title="这里是表格"></a>这里是表格</h3><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h3 id="这里是代码"><a href="#这里是代码" class="headerlink" title="这里是代码"></a>这里是代码</h3><p><code>printf(&#39;hello,world);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     System.out.println(&quot;hello,world&quot;);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;我的博客文章&quot;&gt;&lt;a href=&quot;#我的博客文章&quot; class=&quot;headerlink&quot; title=&quot;我的博客文章&quot;&gt;&lt;/a&gt;我的博客文章&lt;/h1&gt;&lt;h2 id=&quot;这是一个二级标题&quot;&gt;&lt;a href=&quot;#这是一个二级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一个二级标题&quot;&gt;&lt;/a&gt;这是一个二级标题&lt;/h2&gt;&lt;h3 id=&quot;这是一个三级标记（-后面一定要加空格）&quot;&gt;&lt;a href=&quot;#这是一个三级标记（-后面一定要加空格）&quot; class=&quot;headerlink&quot; title=&quot;这是一个三级标记（#后面一定要加空格）&quot;&gt;&lt;/a&gt;这是一个三级标记（#后面一定要加空格）&lt;/h3&gt;&lt;p&gt;&lt;em&gt;这一句话会是斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这一句话会被加粗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;这一句话会被斜体加粗&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这一句话会有删除线&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里是引用的内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还能接着引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还能再往里引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/lzhello/lzhello.github.io.git/2020/11/12/hello-world/"/>
    <id>https://github.com/lzhello/lzhello.github.io.git/2020/11/12/hello-world/</id>
    <published>2020-11-12T08:42:59.216Z</published>
    <updated>2020-11-12T08:42:59.216Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
